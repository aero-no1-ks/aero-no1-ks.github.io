(function() {
  /*! jQuery v1.10.2 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license
  //@ sourceMappingURL=jquery.min.map
  */
  (function(e, t) {
    var n, r, i = typeof t, o = e.location, a = e.document, s = a.documentElement, l = e.jQuery, u = e.$, c = {}, p = [], f = "1.10.2", d = p.concat, h = p.push, g = p.slice, m = p.indexOf, y = c.toString, v = c.hasOwnProperty, b = f.trim, x = function(e, t) {
      return new x.fn.init(e,t,r)
    }, w = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, T = /\S+/g, C = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, N = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, k = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, E = /^[\],:{}\s]*$/, S = /(?:^|:|,)(?:\s*\[)+/g, A = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g, j = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g, D = /^-ms-/, L = /-([\da-z])/gi, H = function(e, t) {
      return t.toUpperCase()
    }, q = function(e) {
      (a.addEventListener || "load" === e.type || "complete" === a.readyState) && (_(),
      x.ready())
    }, _ = function() {
      a.addEventListener ? (a.removeEventListener("DOMContentLoaded", q, !1),
      e.removeEventListener("load", q, !1)) : (a.detachEvent("onreadystatechange", q),
      e.detachEvent("onload", q))
    };
    x.fn = x.prototype = {
      jquery: f,
      constructor: x,
      init: function(e, n, r) {
        var i, o;
        if (!e) {
          return this
        }
        if ("string" == typeof e) {
          if (i = "<" === e.charAt(0) && ">" === e.charAt(e.length - 1) && e.length >= 3 ? [null, e, null] : N.exec(e),
          !i || !i[1] && n) {
            return !n || n.jquery ? (n || r).find(e) : this.constructor(n).find(e)
          }
          if (i[1]) {
            if (n = n instanceof x ? n[0] : n,
              x.merge(this, x.parseHTML(i[1], n && n.nodeType ? n.ownerDocument || n : a, !0)),
              k.test(i[1]) && x.isPlainObject(n)) {
                for (i in n) {
                  x.isFunction(this[i]) ? this[i](n[i]) : this.attr(i, n[i])
                }
              }
              return this
            }
            if (o = a.getElementById(i[2]),
            o && o.parentNode) {
              if (o.id !== i[2]) {
                return r.find(e)
              }
              this.length = 1,
              this[0] = o
            }
            return this.context = a,
            this.selector = e,
            this
          }
          return e.nodeType ? (this.context = this[0] = e,
            this.length = 1,
            this) : x.isFunction(e) ? r.ready(e) : (e.selector !== t && (this.selector = e.selector,
              this.context = e.context),
              x.makeArray(e, this))
            },
            selector: "",
            length: 0,
            toArray: function() {
              return g.call(this)
            },
            get: function(e) {
              return null == e ? this.toArray() : 0 > e ? this[this.length + e] : this[e]
            },
            pushStack: function(e) {
              var t = x.merge(this.constructor(), e);
              return t.prevObject = this,
              t.context = this.context,
              t
            },
            each: function(e, t) {
              return x.each(this, e, t)
            },
            ready: function(e) {
              return x.ready.promise().done(e),
              this
            },
            slice: function() {
              return this.pushStack(g.apply(this, arguments))
            },
            first: function() {
              return this.eq(0)
            },
            last: function() {
              return this.eq(-1)
            },
            eq: function(e) {
              var t = this.length
              , n = +e + (0 > e ? t : 0);
              return this.pushStack(n >= 0 && t > n ? [this[n]] : [])
            },
            map: function(e) {
              return this.pushStack(x.map(this, function(t, n) {
                return e.call(t, n, t)
              }))
            },
            end: function() {
              return this.prevObject || this.constructor(null)
            },
            push: h,
            sort: [].sort,
            splice: [].splice
          },
          x.fn.init.prototype = x.fn,
          x.extend = x.fn.extend = function() {
            var e, n, r, i, o, a, s = arguments[0] || {}, l = 1, u = arguments.length, c = !1;
            for ("boolean" == typeof s && (c = s,
              s = arguments[1] || {},
              l = 2),
              "object" == typeof s || x.isFunction(s) || (s = {}),
              u === l && (s = this,
                --l); u > l; l++) {
                  if (null != (o = arguments[l])) {
                    for (i in o) {
                      e = s[i],
                      r = o[i],
                      s !== r && (c && r && (x.isPlainObject(r) || (n = x.isArray(r))) ? (n ? (n = !1,
                        a = e && x.isArray(e) ? e : []) : a = e && x.isPlainObject(e) ? e : {},
                        s[i] = x.extend(c, a, r)) : r !== t && (s[i] = r))
                      }
                    }
                  }
                  return s
                }
                ,
                x.extend({
                  expando: "jQuery" + (f + Math.random()).replace(/\D/g, ""),
                  noConflict: function(t) {
                    return e.$ === x && (e.$ = u),
                    t && e.jQuery === x && (e.jQuery = l),
                    x
                  },
                  isReady: !1,
                  readyWait: 1,
                  holdReady: function(e) {
                    e ? x.readyWait++ : x.ready(!0)
                  },
                  ready: function(e) {
                    if (e === !0 ? !--x.readyWait : !x.isReady) {
                      if (!a.body) {
                        return setTimeout(x.ready)
                      }
                      x.isReady = !0,
                      e !== !0 && --x.readyWait > 0 || (n.resolveWith(a, [x]),
                      x.fn.trigger && x(a).trigger("ready").off("ready"))
                    }
                  },
                  isFunction: function(e) {
                    return "function" === x.type(e)
                  },
                  isArray: Array.isArray || function(e) {
                    return "array" === x.type(e)
                  }
                  ,
                  isWindow: function(e) {
                    return null != e && e == e.window
                  },
                  isNumeric: function(e) {
                    return !isNaN(parseFloat(e)) && isFinite(e)
                  },
                  type: function(e) {
                    return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? c[y.call(e)] || "object" : typeof e
                  },
                  isPlainObject: function(e) {
                    var n;
                    if (!e || "object" !== x.type(e) || e.nodeType || x.isWindow(e)) {
                      return !1
                    }
                    try {
                      if (e.constructor && !v.call(e, "constructor") && !v.call(e.constructor.prototype, "isPrototypeOf")) {
                        return !1
                      }
                    } catch (r) {
                      return !1
                    }
                    if (x.support.ownLast) {
                      for (n in e) {
                        return v.call(e, n)
                      }
                    }
                    for (n in e) {}
                    return n === t || v.call(e, n)
                  },
                  isEmptyObject: function(e) {
                    var t;
                    for (t in e) {
                      return !1
                    }
                    return !0
                  },
                  error: function(e) {
                    throw Error(e)
                  },
                  parseHTML: function(e, t, n) {
                    if (!e || "string" != typeof e) {
                      return null
                    }
                    "boolean" == typeof t && (n = t,
                      t = !1),
                      t = t || a;
                      var r = k.exec(e)
                      , i = !n && [];
                      return r ? [t.createElement(r[1])] : (r = x.buildFragment([e], t, i),
                      i && x(i).remove(),
                      x.merge([], r.childNodes))
                    },
                    parseJSON: function(n) {
                      return e.JSON && e.JSON.parse ? e.JSON.parse(n) : null === n ? n : "string" == typeof n && (n = x.trim(n),
                      n && E.test(n.replace(A, "@").replace(j, "]").replace(S, ""))) ? Function("return " + n)() : (x.error("Invalid JSON: " + n),
                      t)
                    },
                    parseXML: function(n) {
                      var r, i;
                      if (!n || "string" != typeof n) {
                        return null
                      }
                      try {
                        e.DOMParser ? (i = new DOMParser,
                          r = i.parseFromString(n, "text/xml")) : (r = new ActiveXObject("Microsoft.XMLDOM"),
                          r.async = "false",
                          r.loadXML(n))
                        } catch (o) {
                          r = t
                        }
                        return r && r.documentElement && !r.getElementsByTagName("parsererror").length || x.error("Invalid XML: " + n),
                        r
                      },
                      noop: function() {},
                      globalEval: function(t) {
                        t && x.trim(t) && (e.execScript || function(t) {
                          e.eval.call(e, t)
                        }
                      )(t)
                    },
                    camelCase: function(e) {
                      return e.replace(D, "ms-").replace(L, H)
                    },
                    nodeName: function(e, t) {
                      return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase()
                    },
                    each: function(e, t, n) {
                      var r, i = 0, o = e.length, a = M(e);
                      if (n) {
                        if (a) {
                          for (; o > i; i++) {
                            if (r = t.apply(e[i], n),
                            r === !1) {
                              break
                            }
                          }
                        } else {
                          for (i in e) {
                            if (r = t.apply(e[i], n),
                            r === !1) {
                              break
                            }
                          }
                        }
                      } else {
                        if (a) {
                          for (; o > i; i++) {
                            if (r = t.call(e[i], i, e[i]),
                            r === !1) {
                              break
                            }
                          }
                        } else {
                          for (i in e) {
                            if (r = t.call(e[i], i, e[i]),
                            r === !1) {
                              break
                            }
                          }
                        }
                      }
                      return e
                    },
                    trim: b && !b.call("\ufeff\u00a0") ? function(e) {
                      return null == e ? "" : b.call(e)
                    }
                    : function(e) {
                      return null == e ? "" : (e + "").replace(C, "")
                    }
                    ,
                    makeArray: function(e, t) {
                      var n = t || [];
                      return null != e && (M(Object(e)) ? x.merge(n, "string" == typeof e ? [e] : e) : h.call(n, e)),
                      n
                    },
                    inArray: function(e, t, n) {
                      var r;
                      if (t) {
                        if (m) {
                          return m.call(t, e, n)
                        }
                        for (r = t.length,
                          n = n ? 0 > n ? Math.max(0, r + n) : n : 0; r > n; n++) {
                            if (n in t && t[n] === e) {
                              return n
                            }
                          }
                        }
                        return -1
                      },
                      merge: function(e, n) {
                        var r = n.length
                        , i = e.length
                        , o = 0;
                        if ("number" == typeof r) {
                          for (; r > o; o++) {
                            e[i++] = n[o]
                          }
                        } else {
                          while (n[o] !== t) {
                            e[i++] = n[o++]
                          }
                        }
                        return e.length = i,
                        e
                      },
                      grep: function(e, t, n) {
                        var r, i = [], o = 0, a = e.length;
                        for (n = !!n; a > o; o++) {
                          r = !!t(e[o], o),
                          n !== r && i.push(e[o])
                        }
                        return i
                      },
                      map: function(e, t, n) {
                        var r, i = 0, o = e.length, a = M(e), s = [];
                        if (a) {
                          for (; o > i; i++) {
                            r = t(e[i], i, n),
                            null != r && (s[s.length] = r)
                          }
                        } else {
                          for (i in e) {
                            r = t(e[i], i, n),
                            null != r && (s[s.length] = r)
                          }
                        }
                        return d.apply([], s)
                      },
                      guid: 1,
                      proxy: function(e, n) {
                        var r, i, o;
                        return "string" == typeof n && (o = e[n],
                          n = e,
                          e = o),
                          x.isFunction(e) ? (r = g.call(arguments, 2),
                          i = function() {
                            return e.apply(n || this, r.concat(g.call(arguments)))
                          }
                          ,
                          i.guid = e.guid = e.guid || x.guid++,
                          i) : t
                        },
                        access: function(e, n, r, i, o, a, s) {
                          var l = 0
                          , u = e.length
                          , c = null == r;
                          if ("object" === x.type(r)) {
                            o = !0;
                            for (l in r) {
                              x.access(e, n, l, r[l], !0, a, s)
                            }
                          } else {
                            if (i !== t && (o = !0,
                              x.isFunction(i) || (s = !0),
                              c && (s ? (n.call(e, i),
                              n = null) : (c = n,
                                n = function(e, t, n) {
                                  return c.call(x(e), n)
                                }
                              )),
                              n)) {
                                for (; u > l; l++) {
                                  n(e[l], r, s ? i : i.call(e[l], l, n(e[l], r)))
                                }
                              }
                            }
                            return o ? e : c ? n.call(e) : u ? n(e[0], r) : a
                          },
                          now: function() {
                            return (new Date).getTime()
                          },
                          swap: function(e, t, n, r) {
                            var i, o, a = {};
                            for (o in t) {
                              a[o] = e.style[o],
                              e.style[o] = t[o]
                            }
                            i = n.apply(e, r || []);
                            for (o in t) {
                              e.style[o] = a[o]
                            }
                            return i
                          }
                        }),
                        x.ready.promise = function(t) {
                          if (!n) {
                            if (n = x.Deferred(),
                            "complete" === a.readyState) {
                              setTimeout(x.ready)
                            } else {
                              if (a.addEventListener) {
                                a.addEventListener("DOMContentLoaded", q, !1),
                                e.addEventListener("load", q, !1)
                              } else {
                                a.attachEvent("onreadystatechange", q),
                                e.attachEvent("onload", q);
                                var r = !1;
                                try {
                                  r = null == e.frameElement && a.documentElement
                                } catch (i) {}
                                r && r.doScroll && function o() {
                                  if (!x.isReady) {
                                    try {
                                      r.doScroll("left")
                                    } catch (e) {
                                      return setTimeout(o, 50)
                                    }
                                    _(),
                                    x.ready()
                                  }
                                }()
                              }
                            }
                          }
                          return n.promise(t)
                        }
                        ,
                        x.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(e, t) {
                          c["[object " + t + "]"] = t.toLowerCase()
                        });
                        function M(e) {
                          var t = e.length
                          , n = x.type(e);
                          return x.isWindow(e) ? !1 : 1 === e.nodeType && t ? !0 : "array" === n || "function" !== n && (0 === t || "number" == typeof t && t > 0 && t - 1 in e)
                        }
                        r = x(a),
                        function(e, t) {
                          var n, r, i, o, a, s, l, u, c, p, f, d, h, g, m, y, v, b = "sizzle" + -new Date, w = e.document, T = 0, C = 0, N = st(), k = st(), E = st(), S = !1, A = function(e, t) {
                            return e === t ? (S = !0,
                              0) : 0
                            }, j = typeof t, D = 1 << 31, L = {}.hasOwnProperty, H = [], q = H.pop, _ = H.push, M = H.push, O = H.slice, F = H.indexOf || function(e) {
                              var t = 0
                              , n = this.length;
                              for (; n > t; t++) {
                                if (this[t] === e) {
                                  return t
                                }
                              }
                              return -1
                            }
                            , B = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", P = "[\\x20\\t\\r\\n\\f]", R = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", W = R.replace("w", "w#"), $ = "\\[" + P + "*(" + R + ")" + P + "*(?:([*^$|!~]?=)" + P + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + W + ")|)|)" + P + "*\\]", I = ":(" + R + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + $.replace(3, 8) + ")*)|.*)\\)|)", z = RegExp("^" + P + "+|((?:^|[^\\\\])(?:\\\\.)*)" + P + "+$", "g"), X = RegExp("^" + P + "*," + P + "*"), U = RegExp("^" + P + "*([>+~]|" + P + ")" + P + "*"), V = RegExp(P + "*[+~]"), Y = RegExp("=" + P + "*([^\\]'\"]*)" + P + "*\\]", "g"), J = RegExp(I), G = RegExp("^" + W + "$"), Q = {
                              ID: RegExp("^#(" + R + ")"),
                              CLASS: RegExp("^\\.(" + R + ")"),
                              TAG: RegExp("^(" + R.replace("w", "w*") + ")"),
                              ATTR: RegExp("^" + $),
                              PSEUDO: RegExp("^" + I),
                              CHILD: RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + P + "*(even|odd|(([+-]|)(\\d*)n|)" + P + "*(?:([+-]|)" + P + "*(\\d+)|))" + P + "*\\)|)", "i"),
                              bool: RegExp("^(?:" + B + ")$", "i"),
                              needsContext: RegExp("^" + P + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + P + "*((?:-\\d)?\\d*)" + P + "*\\)|)(?=[^-]|$)", "i")
                            }, K = /^[^{]+\{\s*\[native \w/, Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, et = /^(?:input|select|textarea|button)$/i, tt = /^h\d$/i, nt = /'|\\/g, rt = RegExp("\\\\([\\da-f]{1,6}" + P + "?|(" + P + ")|.)", "ig"), it = function(e, t, n) {
                              var r = "0x" + t - 65536;
                              return r !== r || n ? t : 0 > r ? String.fromCharCode(r + 65536) : String.fromCharCode(55296 | r >> 10, 56320 | 1023 & r)
                            };
                            try {
                              M.apply(H = O.call(w.childNodes), w.childNodes),
                              H[w.childNodes.length].nodeType
                            } catch (ot) {
                              M = {
                                apply: H.length ? function(e, t) {
                                  _.apply(e, O.call(t))
                                }
                                : function(e, t) {
                                  var n = e.length
                                  , r = 0;
                                  while (e[n++] = t[r++]) {}
                                  e.length = n - 1
                                }
                              }
                            }
                            function at(e, t, n, i) {
                              var o, a, s, l, u, c, d, m, y, x;
                              if ((t ? t.ownerDocument || t : w) !== f && p(t),
                              t = t || f,
                              n = n || [],
                              !e || "string" != typeof e) {
                                return n
                              }
                              if (1 !== (l = t.nodeType) && 9 !== l) {
                                return []
                              }
                              if (h && !i) {
                                if (o = Z.exec(e)) {
                                  if (s = o[1]) {
                                    if (9 === l) {
                                      if (a = t.getElementById(s),
                                      !a || !a.parentNode) {
                                        return n
                                      }
                                      if (a.id === s) {
                                        return n.push(a),
                                        n
                                      }
                                    } else {
                                      if (t.ownerDocument && (a = t.ownerDocument.getElementById(s)) && v(t, a) && a.id === s) {
                                        return n.push(a),
                                        n
                                      }
                                    }
                                  } else {
                                    if (o[2]) {
                                      return M.apply(n, t.getElementsByTagName(e)),
                                      n
                                    }
                                    if ((s = o[3]) && r.getElementsByClassName && t.getElementsByClassName) {
                                      return M.apply(n, t.getElementsByClassName(s)),
                                      n
                                    }
                                  }
                                }
                                if (r.qsa && (!g || !g.test(e))) {
                                  if (m = d = b,
                                    y = t,
                                    x = 9 === l && e,
                                    1 === l && "object" !== t.nodeName.toLowerCase()) {
                                      c = mt(e),
                                      (d = t.getAttribute("id")) ? m = d.replace(nt, "\\$&") : t.setAttribute("id", m),
                                      m = "[id='" + m + "'] ",
                                      u = c.length;
                                      while (u--) {
                                        c[u] = m + yt(c[u])
                                      }
                                      y = V.test(e) && t.parentNode || t,
                                      x = c.join(",")
                                    }
                                    if (x) {
                                      try {
                                        return M.apply(n, y.querySelectorAll(x)),
                                        n
                                      } catch (T) {} finally {
                                        d || t.removeAttribute("id")
                                      }
                                    }
                                  }
                                }
                                return kt(e.replace(z, "$1"), t, n, i)
                              }
                              function st() {
                                var e = [];
                                function t(n, r) {
                                  return e.push(n += " ") > o.cacheLength && delete t[e.shift()],
                                  t[n] = r
                                }
                                return t
                              }
                              function lt(e) {
                                return e[b] = !0,
                                e
                              }
                              function ut(e) {
                                var t = f.createElement("div");
                                try {
                                  return !!e(t)
                                } catch (n) {
                                  return !1
                                } finally {
                                  t.parentNode && t.parentNode.removeChild(t),
                                  t = null
                                }
                              }
                              function ct(e, t) {
                                var n = e.split("|")
                                , r = e.length;
                                while (r--) {
                                  o.attrHandle[n[r]] = t
                                }
                              }
                              function pt(e, t) {
                                var n = t && e
                                , r = n && 1 === e.nodeType && 1 === t.nodeType && (~t.sourceIndex || D) - (~e.sourceIndex || D);
                                if (r) {
                                  return r
                                }
                                if (n) {
                                  while (n = n.nextSibling) {
                                    if (n === t) {
                                      return -1
                                    }
                                  }
                                }
                                return e ? 1 : -1
                              }
                              function ft(e) {
                                return function(t) {
                                  var n = t.nodeName.toLowerCase();
                                  return "input" === n && t.type === e
                                }
                              }
                              function dt(e) {
                                return function(t) {
                                  var n = t.nodeName.toLowerCase();
                                  return ("input" === n || "button" === n) && t.type === e
                                }
                              }
                              function ht(e) {
                                return lt(function(t) {
                                  return t = +t,
                                  lt(function(n, r) {
                                    var i, o = e([], n.length, t), a = o.length;
                                    while (a--) {
                                      n[i = o[a]] && (n[i] = !(r[i] = n[i]))
                                    }
                                  })
                                })
                              }
                              s = at.isXML = function(e) {
                                var t = e && (e.ownerDocument || e).documentElement;
                                return t ? "HTML" !== t.nodeName : !1
                              }
                              ,
                              r = at.support = {},
                              p = at.setDocument = function(e) {
                                var n = e ? e.ownerDocument || e : w
                                , i = n.defaultView;
                                return n !== f && 9 === n.nodeType && n.documentElement ? (f = n,
                                  d = n.documentElement,
                                  h = !s(n),
                                  i && i.attachEvent && i !== i.top && i.attachEvent("onbeforeunload", function() {
                                    p()
                                  }),
                                  r.attributes = ut(function(e) {
                                    return e.className = "i",
                                    !e.getAttribute("className")
                                  }),
                                  r.getElementsByTagName = ut(function(e) {
                                    return e.appendChild(n.createComment("")),
                                    !e.getElementsByTagName("*").length
                                  }),
                                  r.getElementsByClassName = ut(function(e) {
                                    return e.innerHTML = "<div class='a'></div><div class='a i'></div>",
                                    e.firstChild.className = "i",
                                    2 === e.getElementsByClassName("i").length
                                  }),
                                  r.getById = ut(function(e) {
                                    return d.appendChild(e).id = b,
                                    !n.getElementsByName || !n.getElementsByName(b).length
                                  }),
                                  r.getById ? (o.find.ID = function(e, t) {
                                    if (typeof t.getElementById !== j && h) {
                                      var n = t.getElementById(e);
                                      return n && n.parentNode ? [n] : []
                                    }
                                  }
                                  ,
                                  o.filter.ID = function(e) {
                                    var t = e.replace(rt, it);
                                    return function(e) {
                                      return e.getAttribute("id") === t
                                    }
                                  }
                                ) : (delete o.find.ID,
                                  o.filter.ID = function(e) {
                                    var t = e.replace(rt, it);
                                    return function(e) {
                                      var n = typeof e.getAttributeNode !== j && e.getAttributeNode("id");
                                      return n && n.value === t
                                    }
                                  }
                                ),
                                o.find.TAG = r.getElementsByTagName ? function(e, n) {
                                  return typeof n.getElementsByTagName !== j ? n.getElementsByTagName(e) : t
                                }
                                : function(e, t) {
                                  var n, r = [], i = 0, o = t.getElementsByTagName(e);
                                  if ("*" === e) {
                                    while (n = o[i++]) {
                                      1 === n.nodeType && r.push(n)
                                    }
                                    return r
                                  }
                                  return o
                                }
                                ,
                                o.find.CLASS = r.getElementsByClassName && function(e, n) {
                                  return typeof n.getElementsByClassName !== j && h ? n.getElementsByClassName(e) : t
                                }
                                ,
                                m = [],
                                g = [],
                                (r.qsa = K.test(n.querySelectorAll)) && (ut(function(e) {
                                  e.innerHTML = "<select><option selected=''></option></select>",
                                  e.querySelectorAll("[selected]").length || g.push("\\[" + P + "*(?:value|" + B + ")"),
                                  e.querySelectorAll(":checked").length || g.push(":checked")
                                }),
                                ut(function(e) {
                                  var t = n.createElement("input");
                                  t.setAttribute("type", "hidden"),
                                  e.appendChild(t).setAttribute("t", ""),
                                  e.querySelectorAll("[t^='']").length && g.push("[*^$]=" + P + "*(?:''|\"\")"),
                                  e.querySelectorAll(":enabled").length || g.push(":enabled", ":disabled"),
                                  e.querySelectorAll("*,:x"),
                                  g.push(",.*:")
                                })),
                                (r.matchesSelector = K.test(y = d.webkitMatchesSelector || d.mozMatchesSelector || d.oMatchesSelector || d.msMatchesSelector)) && ut(function(e) {
                                  r.disconnectedMatch = y.call(e, "div"),
                                  y.call(e, "[s!='']:x"),
                                  m.push("!=", I)
                                }),
                                g = g.length && RegExp(g.join("|")),
                                m = m.length && RegExp(m.join("|")),
                                v = K.test(d.contains) || d.compareDocumentPosition ? function(e, t) {
                                  var n = 9 === e.nodeType ? e.documentElement : e
                                  , r = t && t.parentNode;
                                  return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)))
                                }
                                : function(e, t) {
                                  if (t) {
                                    while (t = t.parentNode) {
                                      if (t === e) {
                                        return !0
                                      }
                                    }
                                  }
                                  return !1
                                }
                                ,
                                A = d.compareDocumentPosition ? function(e, t) {
                                  if (e === t) {
                                    return S = !0,
                                    0
                                  }
                                  var i = t.compareDocumentPosition && e.compareDocumentPosition && e.compareDocumentPosition(t);
                                  return i ? 1 & i || !r.sortDetached && t.compareDocumentPosition(e) === i ? e === n || v(w, e) ? -1 : t === n || v(w, t) ? 1 : c ? F.call(c, e) - F.call(c, t) : 0 : 4 & i ? -1 : 1 : e.compareDocumentPosition ? -1 : 1
                                }
                                : function(e, t) {
                                  var r, i = 0, o = e.parentNode, a = t.parentNode, s = [e], l = [t];
                                  if (e === t) {
                                    return S = !0,
                                    0
                                  }
                                  if (!o || !a) {
                                    return e === n ? -1 : t === n ? 1 : o ? -1 : a ? 1 : c ? F.call(c, e) - F.call(c, t) : 0
                                  }
                                  if (o === a) {
                                    return pt(e, t)
                                  }
                                  r = e;
                                  while (r = r.parentNode) {
                                    s.unshift(r)
                                  }
                                  r = t;
                                  while (r = r.parentNode) {
                                    l.unshift(r)
                                  }
                                  while (s[i] === l[i]) {
                                    i++
                                  }
                                  return i ? pt(s[i], l[i]) : s[i] === w ? -1 : l[i] === w ? 1 : 0
                                }
                                ,
                                n) : f
                              }
                              ,
                              at.matches = function(e, t) {
                                return at(e, null, null, t)
                              }
                              ,
                              at.matchesSelector = function(e, t) {
                                if ((e.ownerDocument || e) !== f && p(e),
                                t = t.replace(Y, "='$1']"),
                                !(!r.matchesSelector || !h || m && m.test(t) || g && g.test(t))) {
                                  try {
                                    var n = y.call(e, t);
                                    if (n || r.disconnectedMatch || e.document && 11 !== e.document.nodeType) {
                                      return n
                                    }
                                  } catch (i) {}
                                }
                                return at(t, f, null, [e]).length > 0
                              }
                              ,
                              at.contains = function(e, t) {
                                return (e.ownerDocument || e) !== f && p(e),
                                v(e, t)
                              }
                              ,
                              at.attr = function(e, n) {
                                (e.ownerDocument || e) !== f && p(e);
                                var i = o.attrHandle[n.toLowerCase()]
                                , a = i && L.call(o.attrHandle, n.toLowerCase()) ? i(e, n, !h) : t;
                                return a === t ? r.attributes || !h ? e.getAttribute(n) : (a = e.getAttributeNode(n)) && a.specified ? a.value : null : a
                              }
                              ,
                              at.error = function(e) {
                                throw Error("Syntax error, unrecognized expression: " + e)
                              }
                              ,
                              at.uniqueSort = function(e) {
                                var t, n = [], i = 0, o = 0;
                                if (S = !r.detectDuplicates,
                                  c = !r.sortStable && e.slice(0),
                                  e.sort(A),
                                  S) {
                                    while (t = e[o++]) {
                                      t === e[o] && (i = n.push(o))
                                    }
                                    while (i--) {
                                      e.splice(n[i], 1)
                                    }
                                  }
                                  return e
                                }
                                ,
                                a = at.getText = function(e) {
                                  var t, n = "", r = 0, i = e.nodeType;
                                  if (i) {
                                    if (1 === i || 9 === i || 11 === i) {
                                      if ("string" == typeof e.textContent) {
                                        return e.textContent
                                      }
                                      for (e = e.firstChild; e; e = e.nextSibling) {
                                        n += a(e)
                                      }
                                    } else {
                                      if (3 === i || 4 === i) {
                                        return e.nodeValue
                                      }
                                    }
                                  } else {
                                    for (; t = e[r]; r++) {
                                      n += a(t)
                                    }
                                  }
                                  return n
                                }
                                ,
                                o = at.selectors = {
                                  cacheLength: 50,
                                  createPseudo: lt,
                                  match: Q,
                                  attrHandle: {},
                                  find: {},
                                  relative: {
                                    ">": {
                                      dir: "parentNode",
                                      first: !0
                                    },
                                    " ": {
                                      dir: "parentNode"
                                    },
                                    "+": {
                                      dir: "previousSibling",
                                      first: !0
                                    },
                                    "~": {
                                      dir: "previousSibling"
                                    }
                                  },
                                  preFilter: {
                                    ATTR: function(e) {
                                      return e[1] = e[1].replace(rt, it),
                                      e[3] = (e[4] || e[5] || "").replace(rt, it),
                                      "~=" === e[2] && (e[3] = " " + e[3] + " "),
                                      e.slice(0, 4)
                                    },
                                    CHILD: function(e) {
                                      return e[1] = e[1].toLowerCase(),
                                      "nth" === e[1].slice(0, 3) ? (e[3] || at.error(e[0]),
                                      e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])),
                                      e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && at.error(e[0]),
                                      e
                                    },
                                    PSEUDO: function(e) {
                                      var n, r = !e[5] && e[2];
                                      return Q.CHILD.test(e[0]) ? null : (e[3] && e[4] !== t ? e[2] = e[4] : r && J.test(r) && (n = mt(r, !0)) && (n = r.indexOf(")", r.length - n) - r.length) && (e[0] = e[0].slice(0, n),
                                      e[2] = r.slice(0, n)),
                                      e.slice(0, 3))
                                    }
                                  },
                                  filter: {
                                    TAG: function(e) {
                                      var t = e.replace(rt, it).toLowerCase();
                                      return "*" === e ? function() {
                                        return !0
                                      }
                                      : function(e) {
                                        return e.nodeName && e.nodeName.toLowerCase() === t
                                      }
                                    },
                                    CLASS: function(e) {
                                      var t = N[e + " "];
                                      return t || (t = RegExp("(^|" + P + ")" + e + "(" + P + "|$)")) && N(e, function(e) {
                                        return t.test("string" == typeof e.className && e.className || typeof e.getAttribute !== j && e.getAttribute("class") || "")
                                      })
                                    },
                                    ATTR: function(e, t, n) {
                                      return function(r) {
                                        var i = at.attr(r, e);
                                        return null == i ? "!=" === t : t ? (i += "",
                                        "=" === t ? i === n : "!=" === t ? i !== n : "^=" === t ? n && 0 === i.indexOf(n) : "*=" === t ? n && i.indexOf(n) > -1 : "$=" === t ? n && i.slice(-n.length) === n : "~=" === t ? (" " + i + " ").indexOf(n) > -1 : "|=" === t ? i === n || i.slice(0, n.length + 1) === n + "-" : !1) : !0
                                      }
                                    },
                                    CHILD: function(e, t, n, r, i) {
                                      var o = "nth" !== e.slice(0, 3)
                                      , a = "last" !== e.slice(-4)
                                      , s = "of-type" === t;
                                      return 1 === r && 0 === i ? function(e) {
                                        return !!e.parentNode
                                      }
                                      : function(t, n, l) {
                                        var u, c, p, f, d, h, g = o !== a ? "nextSibling" : "previousSibling", m = t.parentNode, y = s && t.nodeName.toLowerCase(), v = !l && !s;
                                        if (m) {
                                          if (o) {
                                            while (g) {
                                              p = t;
                                              while (p = p[g]) {
                                                if (s ? p.nodeName.toLowerCase() === y : 1 === p.nodeType) {
                                                  return !1
                                                }
                                              }
                                              h = g = "only" === e && !h && "nextSibling"
                                            }
                                            return !0
                                          }
                                          if (h = [a ? m.firstChild : m.lastChild],
                                            a && v) {
                                              c = m[b] || (m[b] = {}),
                                              u = c[e] || [],
                                              d = u[0] === T && u[1],
                                              f = u[0] === T && u[2],
                                              p = d && m.childNodes[d];
                                              while (p = ++d && p && p[g] || (f = d = 0) || h.pop()) {
                                                if (1 === p.nodeType && ++f && p === t) {
                                                  c[e] = [T, d, f];
                                                  break
                                                }
                                              }
                                            } else {
                                              if (v && (u = (t[b] || (t[b] = {}))[e]) && u[0] === T) {
                                                f = u[1]
                                              } else {
                                                while (p = ++d && p && p[g] || (f = d = 0) || h.pop()) {
                                                  if ((s ? p.nodeName.toLowerCase() === y : 1 === p.nodeType) && ++f && (v && ((p[b] || (p[b] = {}))[e] = [T, f]),
                                                  p === t)) {
                                                    break
                                                  }
                                                }
                                              }
                                            }
                                            return f -= i,
                                            f === r || 0 === f % r && f / r >= 0
                                          }
                                        }
                                      },
                                      PSEUDO: function(e, t) {
                                        var n, r = o.pseudos[e] || o.setFilters[e.toLowerCase()] || at.error("unsupported pseudo: " + e);
                                        return r[b] ? r(t) : r.length > 1 ? (n = [e, e, "", t],
                                        o.setFilters.hasOwnProperty(e.toLowerCase()) ? lt(function(e, n) {
                                          var i, o = r(e, t), a = o.length;
                                          while (a--) {
                                            i = F.call(e, o[a]),
                                            e[i] = !(n[i] = o[a])
                                          }
                                        }) : function(e) {
                                          return r(e, 0, n)
                                        }
                                      ) : r
                                    }
                                  },
                                  pseudos: {
                                    not: lt(function(e) {
                                      var t = []
                                      , n = []
                                      , r = l(e.replace(z, "$1"));
                                      return r[b] ? lt(function(e, t, n, i) {
                                        var o, a = r(e, null, i, []), s = e.length;
                                        while (s--) {
                                          (o = a[s]) && (e[s] = !(t[s] = o))
                                        }
                                      }) : function(e, i, o) {
                                        return t[0] = e,
                                        r(t, null, o, n),
                                        !n.pop()
                                      }
                                    }),
                                    has: lt(function(e) {
                                      return function(t) {
                                        return at(e, t).length > 0
                                      }
                                    }),
                                    contains: lt(function(e) {
                                      return function(t) {
                                        return (t.textContent || t.innerText || a(t)).indexOf(e) > -1
                                      }
                                    }),
                                    lang: lt(function(e) {
                                      return G.test(e || "") || at.error("unsupported lang: " + e),
                                      e = e.replace(rt, it).toLowerCase(),
                                      function(t) {
                                        var n;
                                        do {
                                          if (n = h ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) {
                                            return n = n.toLowerCase(),
                                            n === e || 0 === n.indexOf(e + "-")
                                          }
                                        } while ((t = t.parentNode) && 1 === t.nodeType);return !1
                                      }
                                    }),
                                    target: function(t) {
                                      var n = e.location && e.location.hash;
                                      return n && n.slice(1) === t.id
                                    },
                                    root: function(e) {
                                      return e === d
                                    },
                                    focus: function(e) {
                                      return e === f.activeElement && (!f.hasFocus || f.hasFocus()) && !!(e.type || e.href || ~e.tabIndex)
                                    },
                                    enabled: function(e) {
                                      return e.disabled === !1
                                    },
                                    disabled: function(e) {
                                      return e.disabled === !0
                                    },
                                    checked: function(e) {
                                      var t = e.nodeName.toLowerCase();
                                      return "input" === t && !!e.checked || "option" === t && !!e.selected
                                    },
                                    selected: function(e) {
                                      return e.parentNode && e.parentNode.selectedIndex,
                                      e.selected === !0
                                    },
                                    empty: function(e) {
                                      for (e = e.firstChild; e; e = e.nextSibling) {
                                        if (e.nodeName > "@" || 3 === e.nodeType || 4 === e.nodeType) {
                                          return !1
                                        }
                                      }
                                      return !0
                                    },
                                    parent: function(e) {
                                      return !o.pseudos.empty(e)
                                    },
                                    header: function(e) {
                                      return tt.test(e.nodeName)
                                    },
                                    input: function(e) {
                                      return et.test(e.nodeName)
                                    },
                                    button: function(e) {
                                      var t = e.nodeName.toLowerCase();
                                      return "input" === t && "button" === e.type || "button" === t
                                    },
                                    text: function(e) {
                                      var t;
                                      return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || t.toLowerCase() === e.type)
                                    },
                                    first: ht(function() {
                                      return [0]
                                    }),
                                    last: ht(function(e, t) {
                                      return [t - 1]
                                    }),
                                    eq: ht(function(e, t, n) {
                                      return [0 > n ? n + t : n]
                                    }),
                                    even: ht(function(e, t) {
                                      var n = 0;
                                      for (; t > n; n += 2) {
                                        e.push(n)
                                      }
                                      return e
                                    }),
                                    odd: ht(function(e, t) {
                                      var n = 1;
                                      for (; t > n; n += 2) {
                                        e.push(n)
                                      }
                                      return e
                                    }),
                                    lt: ht(function(e, t, n) {
                                      var r = 0 > n ? n + t : n;
                                      for (; --r >= 0; ) {
                                        e.push(r)
                                      }
                                      return e
                                    }),
                                    gt: ht(function(e, t, n) {
                                      var r = 0 > n ? n + t : n;
                                      for (; t > ++r; ) {
                                        e.push(r)
                                      }
                                      return e
                                    })
                                  }
                                },
                                o.pseudos.nth = o.pseudos.eq;
                                for (n in {
                                  radio: !0,
                                  checkbox: !0,
                                  file: !0,
                                  password: !0,
                                  image: !0
                                }) {
                                  o.pseudos[n] = ft(n)
                                }
                                for (n in {
                                  submit: !0,
                                  reset: !0
                                }) {
                                  o.pseudos[n] = dt(n)
                                }
                                function gt() {}
                                gt.prototype = o.filters = o.pseudos,
                                o.setFilters = new gt;
                                function mt(e, t) {
                                  var n, r, i, a, s, l, u, c = k[e + " "];
                                  if (c) {
                                    return t ? 0 : c.slice(0)
                                  }
                                  s = e,
                                  l = [],
                                  u = o.preFilter;
                                  while (s) {
                                    (!n || (r = X.exec(s))) && (r && (s = s.slice(r[0].length) || s),
                                    l.push(i = [])),
                                    n = !1,
                                    (r = U.exec(s)) && (n = r.shift(),
                                    i.push({
                                      value: n,
                                      type: r[0].replace(z, " ")
                                    }),
                                    s = s.slice(n.length));
                                    for (a in o.filter) {
                                      !(r = Q[a].exec(s)) || u[a] && !(r = u[a](r)) || (n = r.shift(),
                                      i.push({
                                        value: n,
                                        type: a,
                                        matches: r
                                      }),
                                      s = s.slice(n.length))
                                    }
                                    if (!n) {
                                      break
                                    }
                                  }
                                  return t ? s.length : s ? at.error(e) : k(e, l).slice(0)
                                }
                                function yt(e) {
                                  var t = 0
                                  , n = e.length
                                  , r = "";
                                  for (; n > t; t++) {
                                    r += e[t].value
                                  }
                                  return r
                                }
                                function vt(e, t, n) {
                                  var r = t.dir
                                  , o = n && "parentNode" === r
                                  , a = C++;
                                  return t.first ? function(t, n, i) {
                                    while (t = t[r]) {
                                      if (1 === t.nodeType || o) {
                                        return e(t, n, i)
                                      }
                                    }
                                  }
                                  : function(t, n, s) {
                                    var l, u, c, p = T + " " + a;
                                    if (s) {
                                      while (t = t[r]) {
                                        if ((1 === t.nodeType || o) && e(t, n, s)) {
                                          return !0
                                        }
                                      }
                                    } else {
                                      while (t = t[r]) {
                                        if (1 === t.nodeType || o) {
                                          if (c = t[b] || (t[b] = {}),
                                          (u = c[r]) && u[0] === p) {
                                            if ((l = u[1]) === !0 || l === i) {
                                              return l === !0
                                            }
                                          } else {
                                            if (u = c[r] = [p],
                                              u[1] = e(t, n, s) || i,
                                              u[1] === !0) {
                                                return !0
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  function bt(e) {
                                    return e.length > 1 ? function(t, n, r) {
                                      var i = e.length;
                                      while (i--) {
                                        if (!e[i](t, n, r)) {
                                          return !1
                                        }
                                      }
                                      return !0
                                    }
                                    : e[0]
                                  }
                                  function xt(e, t, n, r, i) {
                                    var o, a = [], s = 0, l = e.length, u = null != t;
                                    for (; l > s; s++) {
                                      (o = e[s]) && (!n || n(o, r, i)) && (a.push(o),
                                      u && t.push(s))
                                    }
                                    return a
                                  }
                                  function wt(e, t, n, r, i, o) {
                                    return r && !r[b] && (r = wt(r)),
                                    i && !i[b] && (i = wt(i, o)),
                                    lt(function(o, a, s, l) {
                                      var u, c, p, f = [], d = [], h = a.length, g = o || Nt(t || "*", s.nodeType ? [s] : s, []), m = !e || !o && t ? g : xt(g, f, e, s, l), y = n ? i || (o ? e : h || r) ? [] : a : m;
                                      if (n && n(m, y, s, l),
                                      r) {
                                        u = xt(y, d),
                                        r(u, [], s, l),
                                        c = u.length;
                                        while (c--) {
                                          (p = u[c]) && (y[d[c]] = !(m[d[c]] = p))
                                        }
                                      }
                                      if (o) {
                                        if (i || e) {
                                          if (i) {
                                            u = [],
                                            c = y.length;
                                            while (c--) {
                                              (p = y[c]) && u.push(m[c] = p)
                                            }
                                            i(null, y = [], u, l)
                                          }
                                          c = y.length;
                                          while (c--) {
                                            (p = y[c]) && (u = i ? F.call(o, p) : f[c]) > -1 && (o[u] = !(a[u] = p))
                                          }
                                        }
                                      } else {
                                        y = xt(y === a ? y.splice(h, y.length) : y),
                                        i ? i(null, a, y, l) : M.apply(a, y)
                                      }
                                    })
                                  }
                                  function Tt(e) {
                                    var t, n, r, i = e.length, a = o.relative[e[0].type], s = a || o.relative[" "], l = a ? 1 : 0, c = vt(function(e) {
                                      return e === t
                                    }, s, !0), p = vt(function(e) {
                                      return F.call(t, e) > -1
                                    }, s, !0), f = [function(e, n, r) {
                                      return !a && (r || n !== u) || ((t = n).nodeType ? c(e, n, r) : p(e, n, r))
                                    }
                                  ];
                                  for (; i > l; l++) {
                                    if (n = o.relative[e[l].type]) {
                                      f = [vt(bt(f), n)]
                                    } else {
                                      if (n = o.filter[e[l].type].apply(null, e[l].matches),
                                      n[b]) {
                                        for (r = ++l; i > r; r++) {
                                          if (o.relative[e[r].type]) {
                                            break
                                          }
                                        }
                                        return wt(l > 1 && bt(f), l > 1 && yt(e.slice(0, l - 1).concat({
                                          value: " " === e[l - 2].type ? "*" : ""
                                        })).replace(z, "$1"), n, r > l && Tt(e.slice(l, r)), i > r && Tt(e = e.slice(r)), i > r && yt(e))
                                      }
                                      f.push(n)
                                    }
                                  }
                                  return bt(f)
                                }
                                function Ct(e, t) {
                                  var n = 0
                                  , r = t.length > 0
                                  , a = e.length > 0
                                  , s = function(s, l, c, p, d) {
                                    var h, g, m, y = [], v = 0, b = "0", x = s && [], w = null != d, C = u, N = s || a && o.find.TAG("*", d && l.parentNode || l), k = T += null == C ? 1 : Math.random() || 0.1;
                                    for (w && (u = l !== f && l,
                                      i = n); null != (h = N[b]); b++) {
                                        if (a && h) {
                                          g = 0;
                                          while (m = e[g++]) {
                                            if (m(h, l, c)) {
                                              p.push(h);
                                              break
                                            }
                                          }
                                          w && (T = k,
                                            i = ++n)
                                          }
                                          r && ((h = !m && h) && v--,
                                          s && x.push(h))
                                        }
                                        if (v += b,
                                          r && b !== v) {
                                            g = 0;
                                            while (m = t[g++]) {
                                              m(x, y, l, c)
                                            }
                                            if (s) {
                                              if (v > 0) {
                                                while (b--) {
                                                  x[b] || y[b] || (y[b] = q.call(p))
                                                }
                                              }
                                              y = xt(y)
                                            }
                                            M.apply(p, y),
                                            w && !s && y.length > 0 && v + t.length > 1 && at.uniqueSort(p)
                                          }
                                          return w && (T = k,
                                            u = C),
                                            x
                                          };
                                          return r ? lt(s) : s
                                        }
                                        l = at.compile = function(e, t) {
                                          var n, r = [], i = [], o = E[e + " "];
                                          if (!o) {
                                            t || (t = mt(e)),
                                            n = t.length;
                                            while (n--) {
                                              o = Tt(t[n]),
                                              o[b] ? r.push(o) : i.push(o)
                                            }
                                            o = E(e, Ct(i, r))
                                          }
                                          return o
                                        }
                                        ;
                                        function Nt(e, t, n) {
                                          var r = 0
                                          , i = t.length;
                                          for (; i > r; r++) {
                                            at(e, t[r], n)
                                          }
                                          return n
                                        }
                                        function kt(e, t, n, i) {
                                          var a, s, u, c, p, f = mt(e);
                                          if (!i && 1 === f.length) {
                                            if (s = f[0] = f[0].slice(0),
                                            s.length > 2 && "ID" === (u = s[0]).type && r.getById && 9 === t.nodeType && h && o.relative[s[1].type]) {
                                              if (t = (o.find.ID(u.matches[0].replace(rt, it), t) || [])[0],
                                              !t) {
                                                return n
                                              }
                                              e = e.slice(s.shift().value.length)
                                            }
                                            a = Q.needsContext.test(e) ? 0 : s.length;
                                            while (a--) {
                                              if (u = s[a],
                                                o.relative[c = u.type]) {
                                                  break
                                                }
                                                if ((p = o.find[c]) && (i = p(u.matches[0].replace(rt, it), V.test(s[0].type) && t.parentNode || t))) {
                                                  if (s.splice(a, 1),
                                                  e = i.length && yt(s),
                                                  !e) {
                                                    return M.apply(n, i),
                                                    n
                                                  }
                                                  break
                                                }
                                              }
                                            }
                                            return l(e, f)(i, t, !h, n, V.test(e)),
                                            n
                                          }
                                          r.sortStable = b.split("").sort(A).join("") === b,
                                          r.detectDuplicates = S,
                                          p(),
                                          r.sortDetached = ut(function(e) {
                                            return 1 & e.compareDocumentPosition(f.createElement("div"))
                                          }),
                                          ut(function(e) {
                                            return e.innerHTML = "<a href='#'></a>",
                                            "#" === e.firstChild.getAttribute("href")
                                          }) || ct("type|href|height|width", function(e, n, r) {
                                            return r ? t : e.getAttribute(n, "type" === n.toLowerCase() ? 1 : 2)
                                          }),
                                          r.attributes && ut(function(e) {
                                            return e.innerHTML = "<input/>",
                                            e.firstChild.setAttribute("value", ""),
                                            "" === e.firstChild.getAttribute("value")
                                          }) || ct("value", function(e, n, r) {
                                            return r || "input" !== e.nodeName.toLowerCase() ? t : e.defaultValue
                                          }),
                                          ut(function(e) {
                                            return null == e.getAttribute("disabled")
                                          }) || ct(B, function(e, n, r) {
                                            var i;
                                            return r ? t : (i = e.getAttributeNode(n)) && i.specified ? i.value : e[n] === !0 ? n.toLowerCase() : null
                                          }),
                                          x.find = at,
                                          x.expr = at.selectors,
                                          x.expr[":"] = x.expr.pseudos,
                                          x.unique = at.uniqueSort,
                                          x.text = at.getText,
                                          x.isXMLDoc = at.isXML,
                                          x.contains = at.contains
                                        }(e);
                                        var O = {};
                                        function F(e) {
                                          var t = O[e] = {};
                                          return x.each(e.match(T) || [], function(e, n) {
                                            t[n] = !0
                                          }),
                                          t
                                        }
                                        x.Callbacks = function(e) {
                                          e = "string" == typeof e ? O[e] || F(e) : x.extend({}, e);
                                          var n, r, i, o, a, s, l = [], u = !e.once && [], c = function(t) {
                                            for (r = e.memory && t,
                                              i = !0,
                                              a = s || 0,
                                              s = 0,
                                              o = l.length,
                                              n = !0; l && o > a; a++) {
                                                if (l[a].apply(t[0], t[1]) === !1 && e.stopOnFalse) {
                                                  r = !1;
                                                  break
                                                }
                                              }
                                              n = !1,
                                              l && (u ? u.length && c(u.shift()) : r ? l = [] : p.disable())
                                            }, p = {
                                              add: function() {
                                                if (l) {
                                                  var t = l.length;
                                                  (function i(t) {
                                                    x.each(t, function(t, n) {
                                                      var r = x.type(n);
                                                      "function" === r ? e.unique && p.has(n) || l.push(n) : n && n.length && "string" !== r && i(n)
                                                    })
                                                  }
                                                )(arguments),
                                                n ? o = l.length : r && (s = t,
                                                  c(r))
                                                }
                                                return this
                                              },
                                              remove: function() {
                                                return l && x.each(arguments, function(e, t) {
                                                  var r;
                                                  while ((r = x.inArray(t, l, r)) > -1) {
                                                    l.splice(r, 1),
                                                    n && (o >= r && o--,
                                                      a >= r && a--)
                                                    }
                                                  }),
                                                  this
                                                },
                                                has: function(e) {
                                                  return e ? x.inArray(e, l) > -1 : !(!l || !l.length)
                                                },
                                                empty: function() {
                                                  return l = [],
                                                  o = 0,
                                                  this
                                                },
                                                disable: function() {
                                                  return l = u = r = t,
                                                  this
                                                },
                                                disabled: function() {
                                                  return !l
                                                },
                                                lock: function() {
                                                  return u = t,
                                                  r || p.disable(),
                                                  this
                                                },
                                                locked: function() {
                                                  return !u
                                                },
                                                fireWith: function(e, t) {
                                                  return !l || i && !u || (t = t || [],
                                                    t = [e, t.slice ? t.slice() : t],
                                                    n ? u.push(t) : c(t)),
                                                    this
                                                  },
                                                  fire: function() {
                                                    return p.fireWith(this, arguments),
                                                    this
                                                  },
                                                  fired: function() {
                                                    return !!i
                                                  }
                                                };
                                                return p
                                              }
                                              ,
                                              x.extend({
                                                Deferred: function(e) {
                                                  var t = [["resolve", "done", x.Callbacks("once memory"), "resolved"], ["reject", "fail", x.Callbacks("once memory"), "rejected"], ["notify", "progress", x.Callbacks("memory")]]
                                                  , n = "pending"
                                                  , r = {
                                                    state: function() {
                                                      return n
                                                    },
                                                    always: function() {
                                                      return i.done(arguments).fail(arguments),
                                                      this
                                                    },
                                                    then: function() {
                                                      var e = arguments;
                                                      return x.Deferred(function(n) {
                                                        x.each(t, function(t, o) {
                                                          var a = o[0]
                                                          , s = x.isFunction(e[t]) && e[t];
                                                          i[o[1]](function() {
                                                            var e = s && s.apply(this, arguments);
                                                            e && x.isFunction(e.promise) ? e.promise().done(n.resolve).fail(n.reject).progress(n.notify) : n[a + "With"](this === r ? n.promise() : this, s ? [e] : arguments)
                                                          })
                                                        }),
                                                        e = null
                                                      }).promise()
                                                    },
                                                    promise: function(e) {
                                                      return null != e ? x.extend(e, r) : r
                                                    }
                                                  }
                                                  , i = {};
                                                  return r.pipe = r.then,
                                                  x.each(t, function(e, o) {
                                                    var a = o[2]
                                                    , s = o[3];
                                                    r[o[1]] = a.add,
                                                    s && a.add(function() {
                                                      n = s
                                                    }, t[1 ^ e][2].disable, t[2][2].lock),
                                                    i[o[0]] = function() {
                                                      return i[o[0] + "With"](this === i ? r : this, arguments),
                                                      this
                                                    }
                                                    ,
                                                    i[o[0] + "With"] = a.fireWith
                                                  }),
                                                  r.promise(i),
                                                  e && e.call(i, i),
                                                  i
                                                },
                                                when: function(e) {
                                                  var t = 0, n = g.call(arguments), r = n.length, i = 1 !== r || e && x.isFunction(e.promise) ? r : 0, o = 1 === i ? e : x.Deferred(), a = function(e, t, n) {
                                                    return function(r) {
                                                      t[e] = this,
                                                      n[e] = arguments.length > 1 ? g.call(arguments) : r,
                                                      n === s ? o.notifyWith(t, n) : --i || o.resolveWith(t, n)
                                                    }
                                                  }, s, l, u;
                                                  if (r > 1) {
                                                    for (s = Array(r),
                                                    l = Array(r),
                                                    u = Array(r); r > t; t++) {
                                                      n[t] && x.isFunction(n[t].promise) ? n[t].promise().done(a(t, u, n)).fail(o.reject).progress(a(t, l, s)) : --i
                                                    }
                                                  }
                                                  return i || o.resolveWith(u, n),
                                                  o.promise()
                                                }
                                              }),
                                              x.support = function(t) {
                                                var n, r, o, s, l, u, c, p, f, d = a.createElement("div");
                                                if (d.setAttribute("className", "t"),
                                                d.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",
                                                n = d.getElementsByTagName("*") || [],
                                                r = d.getElementsByTagName("a")[0],
                                                !r || !r.style || !n.length) {
                                                  return t
                                                }
                                                s = a.createElement("select"),
                                                u = s.appendChild(a.createElement("option")),
                                                o = d.getElementsByTagName("input")[0],
                                                r.style.cssText = "top:1px;float:left;opacity:.5",
                                                t.getSetAttribute = "t" !== d.className,
                                                t.leadingWhitespace = 3 === d.firstChild.nodeType,
                                                t.tbody = !d.getElementsByTagName("tbody").length,
                                                t.htmlSerialize = !!d.getElementsByTagName("link").length,
                                                t.style = /top/.test(r.getAttribute("style")),
                                                t.hrefNormalized = "/a" === r.getAttribute("href"),
                                                t.opacity = /^0.5/.test(r.style.opacity),
                                                t.cssFloat = !!r.style.cssFloat,
                                                t.checkOn = !!o.value,
                                                t.optSelected = u.selected,
                                                t.enctype = !!a.createElement("form").enctype,
                                                t.html5Clone = "<:nav></:nav>" !== a.createElement("nav").cloneNode(!0).outerHTML,
                                                t.inlineBlockNeedsLayout = !1,
                                                t.shrinkWrapBlocks = !1,
                                                t.pixelPosition = !1,
                                                t.deleteExpando = !0,
                                                t.noCloneEvent = !0,
                                                t.reliableMarginRight = !0,
                                                t.boxSizingReliable = !0,
                                                o.checked = !0,
                                                t.noCloneChecked = o.cloneNode(!0).checked,
                                                s.disabled = !0,
                                                t.optDisabled = !u.disabled;
                                                try {
                                                  delete d.test
                                                } catch (h) {
                                                  t.deleteExpando = !1
                                                }
                                                o = a.createElement("input"),
                                                o.setAttribute("value", ""),
                                                t.input = "" === o.getAttribute("value"),
                                                o.value = "t",
                                                o.setAttribute("type", "radio"),
                                                t.radioValue = "t" === o.value,
                                                o.setAttribute("checked", "t"),
                                                o.setAttribute("name", "t"),
                                                l = a.createDocumentFragment(),
                                                l.appendChild(o),
                                                t.appendChecked = o.checked,
                                                t.checkClone = l.cloneNode(!0).cloneNode(!0).lastChild.checked,
                                                d.attachEvent && (d.attachEvent("onclick", function() {
                                                  t.noCloneEvent = !1
                                                }),
                                                d.cloneNode(!0).click());
                                                for (f in {
                                                  submit: !0,
                                                  change: !0,
                                                  focusin: !0
                                                }) {
                                                  d.setAttribute(c = "on" + f, "t"),
                                                  t[f + "Bubbles"] = c in e || d.attributes[c].expando === !1
                                                }
                                                d.style.backgroundClip = "content-box",
                                                d.cloneNode(!0).style.backgroundClip = "",
                                                t.clearCloneStyle = "content-box" === d.style.backgroundClip;
                                                for (f in x(t)) {
                                                  break
                                                }
                                                return t.ownLast = "0" !== f,
                                                x(function() {
                                                  var n, r, o, s = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;", l = a.getElementsByTagName("body")[0];
                                                  l && (n = a.createElement("div"),
                                                  n.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",
                                                  l.appendChild(n).appendChild(d),
                                                  d.innerHTML = "<table><tr><td></td><td>t</td></tr></table>",
                                                  o = d.getElementsByTagName("td"),
                                                  o[0].style.cssText = "padding:0;margin:0;border:0;display:none",
                                                  p = 0 === o[0].offsetHeight,
                                                  o[0].style.display = "",
                                                  o[1].style.display = "none",
                                                  t.reliableHiddenOffsets = p && 0 === o[0].offsetHeight,
                                                  d.innerHTML = "",
                                                  d.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",
                                                  x.swap(l, null != l.style.zoom ? {
                                                    zoom: 1
                                                  } : {}, function() {
                                                    t.boxSizing = 4 === d.offsetWidth
                                                  }),
                                                  e.getComputedStyle && (t.pixelPosition = "1%" !== (e.getComputedStyle(d, null) || {}).top,
                                                  t.boxSizingReliable = "4px" === (e.getComputedStyle(d, null) || {
                                                    width: "4px"
                                                  }).width,
                                                  r = d.appendChild(a.createElement("div")),
                                                  r.style.cssText = d.style.cssText = s,
                                                  r.style.marginRight = r.style.width = "0",
                                                  d.style.width = "1px",
                                                  t.reliableMarginRight = !parseFloat((e.getComputedStyle(r, null) || {}).marginRight)),
                                                  typeof d.style.zoom !== i && (d.innerHTML = "",
                                                  d.style.cssText = s + "width:1px;padding:1px;display:inline;zoom:1",
                                                  t.inlineBlockNeedsLayout = 3 === d.offsetWidth,
                                                  d.style.display = "block",
                                                  d.innerHTML = "<div></div>",
                                                  d.firstChild.style.width = "5px",
                                                  t.shrinkWrapBlocks = 3 !== d.offsetWidth,
                                                  t.inlineBlockNeedsLayout && (l.style.zoom = 1)),
                                                  l.removeChild(n),
                                                  n = d = o = r = null)
                                                }),
                                                n = s = l = u = r = o = null,
                                                t
                                              }({});
                                              var B = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/
                                              , P = /([A-Z])/g;
                                              function R(e, n, r, i) {
                                                if (x.acceptData(e)) {
                                                  var o, a, s = x.expando, l = e.nodeType, u = l ? x.cache : e, c = l ? e[s] : e[s] && s;
                                                  if (c && u[c] && (i || u[c].data) || r !== t || "string" != typeof n) {
                                                    return c || (c = l ? e[s] = p.pop() || x.guid++ : s),
                                                    u[c] || (u[c] = l ? {} : {
                                                      toJSON: x.noop
                                                    }),
                                                    ("object" == typeof n || "function" == typeof n) && (i ? u[c] = x.extend(u[c], n) : u[c].data = x.extend(u[c].data, n)),
                                                    a = u[c],
                                                    i || (a.data || (a.data = {}),
                                                    a = a.data),
                                                    r !== t && (a[x.camelCase(n)] = r),
                                                    "string" == typeof n ? (o = a[n],
                                                      null == o && (o = a[x.camelCase(n)])) : o = a,
                                                      o
                                                    }
                                                  }
                                                }
                                                function W(e, t, n) {
                                                  if (x.acceptData(e)) {
                                                    var r, i, o = e.nodeType, a = o ? x.cache : e, s = o ? e[x.expando] : x.expando;
                                                    if (a[s]) {
                                                      if (t && (r = n ? a[s] : a[s].data)) {
                                                        x.isArray(t) ? t = t.concat(x.map(t, x.camelCase)) : t in r ? t = [t] : (t = x.camelCase(t),
                                                        t = t in r ? [t] : t.split(" ")),
                                                        i = t.length;
                                                        while (i--) {
                                                          delete r[t[i]]
                                                        }
                                                        if (n ? !I(r) : !x.isEmptyObject(r)) {
                                                          return
                                                        }
                                                      }
                                                      (n || (delete a[s].data,
                                                        I(a[s]))) && (o ? x.cleanData([e], !0) : x.support.deleteExpando || a != a.window ? delete a[s] : a[s] = null)
                                                      }
                                                    }
                                                  }
                                                  x.extend({
                                                    cache: {},
                                                    noData: {
                                                      applet: !0,
                                                      embed: !0,
                                                      object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
                                                    },
                                                    hasData: function(e) {
                                                      return e = e.nodeType ? x.cache[e[x.expando]] : e[x.expando],
                                                      !!e && !I(e)
                                                    },
                                                    data: function(e, t, n) {
                                                      return R(e, t, n)
                                                    },
                                                    removeData: function(e, t) {
                                                      return W(e, t)
                                                    },
                                                    _data: function(e, t, n) {
                                                      return R(e, t, n, !0)
                                                    },
                                                    _removeData: function(e, t) {
                                                      return W(e, t, !0)
                                                    },
                                                    acceptData: function(e) {
                                                      if (e.nodeType && 1 !== e.nodeType && 9 !== e.nodeType) {
                                                        return !1
                                                      }
                                                      var t = e.nodeName && x.noData[e.nodeName.toLowerCase()];
                                                      return !t || t !== !0 && e.getAttribute("classid") === t
                                                    }
                                                  }),
                                                  x.fn.extend({
                                                    data: function(e, n) {
                                                      var r, i, o = null, a = 0, s = this[0];
                                                      if (e === t) {
                                                        if (this.length && (o = x.data(s),
                                                        1 === s.nodeType && !x._data(s, "parsedAttrs"))) {
                                                          for (r = s.attributes; r.length > a; a++) {
                                                            i = r[a].name,
                                                            0 === i.indexOf("data-") && (i = x.camelCase(i.slice(5)),
                                                            $(s, i, o[i]))
                                                          }
                                                          x._data(s, "parsedAttrs", !0)
                                                        }
                                                        return o
                                                      }
                                                      return "object" == typeof e ? this.each(function() {
                                                        x.data(this, e)
                                                      }) : arguments.length > 1 ? this.each(function() {
                                                        x.data(this, e, n)
                                                      }) : s ? $(s, e, x.data(s, e)) : null
                                                    },
                                                    removeData: function(e) {
                                                      return this.each(function() {
                                                        x.removeData(this, e)
                                                      })
                                                    }
                                                  });
                                                  function $(e, n, r) {
                                                    if (r === t && 1 === e.nodeType) {
                                                      var i = "data-" + n.replace(P, "-$1").toLowerCase();
                                                      if (r = e.getAttribute(i),
                                                      "string" == typeof r) {
                                                        try {
                                                          r = "true" === r ? !0 : "false" === r ? !1 : "null" === r ? null : +r + "" === r ? +r : B.test(r) ? x.parseJSON(r) : r
                                                        } catch (o) {}
                                                        x.data(e, n, r)
                                                      } else {
                                                        r = t
                                                      }
                                                    }
                                                    return r
                                                  }
                                                  function I(e) {
                                                    var t;
                                                    for (t in e) {
                                                      if (("data" !== t || !x.isEmptyObject(e[t])) && "toJSON" !== t) {
                                                        return !1
                                                      }
                                                    }
                                                    return !0
                                                  }
                                                  x.extend({
                                                    queue: function(e, n, r) {
                                                      var i;
                                                      return e ? (n = (n || "fx") + "queue",
                                                      i = x._data(e, n),
                                                      r && (!i || x.isArray(r) ? i = x._data(e, n, x.makeArray(r)) : i.push(r)),
                                                      i || []) : t
                                                    },
                                                    dequeue: function(e, t) {
                                                      t = t || "fx";
                                                      var n = x.queue(e, t)
                                                      , r = n.length
                                                      , i = n.shift()
                                                      , o = x._queueHooks(e, t)
                                                      , a = function() {
                                                        x.dequeue(e, t)
                                                      };
                                                      "inprogress" === i && (i = n.shift(),
                                                      r--),
                                                      i && ("fx" === t && n.unshift("inprogress"),
                                                      delete o.stop,
                                                      i.call(e, a, o)),
                                                      !r && o && o.empty.fire()
                                                    },
                                                    _queueHooks: function(e, t) {
                                                      var n = t + "queueHooks";
                                                      return x._data(e, n) || x._data(e, n, {
                                                        empty: x.Callbacks("once memory").add(function() {
                                                          x._removeData(e, t + "queue"),
                                                          x._removeData(e, n)
                                                        })
                                                      })
                                                    }
                                                  }),
                                                  x.fn.extend({
                                                    queue: function(e, n) {
                                                      var r = 2;
                                                      return "string" != typeof e && (n = e,
                                                        e = "fx",
                                                        r--),
                                                        r > arguments.length ? x.queue(this[0], e) : n === t ? this : this.each(function() {
                                                          var t = x.queue(this, e, n);
                                                          x._queueHooks(this, e),
                                                          "fx" === e && "inprogress" !== t[0] && x.dequeue(this, e)
                                                        })
                                                      },
                                                      dequeue: function(e) {
                                                        return this.each(function() {
                                                          x.dequeue(this, e)
                                                        })
                                                      },
                                                      delay: function(e, t) {
                                                        return e = x.fx ? x.fx.speeds[e] || e : e,
                                                        t = t || "fx",
                                                        this.queue(t, function(t, n) {
                                                          var r = setTimeout(t, e);
                                                          n.stop = function() {
                                                            clearTimeout(r)
                                                          }
                                                        })
                                                      },
                                                      clearQueue: function(e) {
                                                        return this.queue(e || "fx", [])
                                                      },
                                                      promise: function(e, n) {
                                                        var r, i = 1, o = x.Deferred(), a = this, s = this.length, l = function() {
                                                          --i || o.resolveWith(a, [a])
                                                        };
                                                        "string" != typeof e && (n = e,
                                                          e = t),
                                                          e = e || "fx";
                                                          while (s--) {
                                                            r = x._data(a[s], e + "queueHooks"),
                                                            r && r.empty && (i++,
                                                              r.empty.add(l))
                                                            }
                                                            return l(),
                                                            o.promise(n)
                                                          }
                                                        });
                                                        var z, X, U = /[\t\r\n\f]/g, V = /\r/g, Y = /^(?:input|select|textarea|button|object)$/i, J = /^(?:a|area)$/i, G = /^(?:checked|selected)$/i, Q = x.support.getSetAttribute, K = x.support.input;
                                                        x.fn.extend({
                                                          attr: function(e, t) {
                                                            return x.access(this, x.attr, e, t, arguments.length > 1)
                                                          },
                                                          removeAttr: function(e) {
                                                            return this.each(function() {
                                                              x.removeAttr(this, e)
                                                            })
                                                          },
                                                          prop: function(e, t) {
                                                            return x.access(this, x.prop, e, t, arguments.length > 1)
                                                          },
                                                          removeProp: function(e) {
                                                            return e = x.propFix[e] || e,
                                                            this.each(function() {
                                                              try {
                                                                this[e] = t,
                                                                delete this[e]
                                                              } catch (n) {}
                                                            })
                                                          },
                                                          addClass: function(e) {
                                                            var t, n, r, i, o, a = 0, s = this.length, l = "string" == typeof e && e;
                                                            if (x.isFunction(e)) {
                                                              return this.each(function(t) {
                                                                x(this).addClass(e.call(this, t, this.className))
                                                              })
                                                            }
                                                            if (l) {
                                                              for (t = (e || "").match(T) || []; s > a; a++) {
                                                                if (n = this[a],
                                                                  r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(U, " ") : " ")) {
                                                                    o = 0;
                                                                    while (i = t[o++]) {
                                                                      0 > r.indexOf(" " + i + " ") && (r += i + " ")
                                                                    }
                                                                    n.className = x.trim(r)
                                                                  }
                                                                }
                                                              }
                                                              return this
                                                            },
                                                            removeClass: function(e) {
                                                              var t, n, r, i, o, a = 0, s = this.length, l = 0 === arguments.length || "string" == typeof e && e;
                                                              if (x.isFunction(e)) {
                                                                return this.each(function(t) {
                                                                  x(this).removeClass(e.call(this, t, this.className))
                                                                })
                                                              }
                                                              if (l) {
                                                                for (t = (e || "").match(T) || []; s > a; a++) {
                                                                  if (n = this[a],
                                                                    r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(U, " ") : "")) {
                                                                      o = 0;
                                                                      while (i = t[o++]) {
                                                                        while (r.indexOf(" " + i + " ") >= 0) {
                                                                          r = r.replace(" " + i + " ", " ")
                                                                        }
                                                                      }
                                                                      n.className = e ? x.trim(r) : ""
                                                                    }
                                                                  }
                                                                }
                                                                return this
                                                              },
                                                              toggleClass: function(e, t) {
                                                                var n = typeof e;
                                                                return "boolean" == typeof t && "string" === n ? t ? this.addClass(e) : this.removeClass(e) : x.isFunction(e) ? this.each(function(n) {
                                                                  x(this).toggleClass(e.call(this, n, this.className, t), t)
                                                                }) : this.each(function() {
                                                                  if ("string" === n) {
                                                                    var t, r = 0, o = x(this), a = e.match(T) || [];
                                                                    while (t = a[r++]) {
                                                                      o.hasClass(t) ? o.removeClass(t) : o.addClass(t)
                                                                    }
                                                                  } else {
                                                                    (n === i || "boolean" === n) && (this.className && x._data(this, "__className__", this.className),
                                                                    this.className = this.className || e === !1 ? "" : x._data(this, "__className__") || "")
                                                                  }
                                                                })
                                                              },
                                                              hasClass: function(e) {
                                                                var t = " " + e + " "
                                                                , n = 0
                                                                , r = this.length;
                                                                for (; r > n; n++) {
                                                                  if (1 === this[n].nodeType && (" " + this[n].className + " ").replace(U, " ").indexOf(t) >= 0) {
                                                                    return !0
                                                                  }
                                                                }
                                                                return !1
                                                              },
                                                              val: function(e) {
                                                                var n, r, i, o = this[0];
                                                                if (arguments.length) {
                                                                  return i = x.isFunction(e),
                                                                  this.each(function(n) {
                                                                    var o;
                                                                    1 === this.nodeType && (o = i ? e.call(this, n, x(this).val()) : e,
                                                                    null == o ? o = "" : "number" == typeof o ? o += "" : x.isArray(o) && (o = x.map(o, function(e) {
                                                                      return null == e ? "" : e + ""
                                                                    })),
                                                                    r = x.valHooks[this.type] || x.valHooks[this.nodeName.toLowerCase()],
                                                                    r && "set"in r && r.set(this, o, "value") !== t || (this.value = o))
                                                                  })
                                                                }
                                                                if (o) {
                                                                  return r = x.valHooks[o.type] || x.valHooks[o.nodeName.toLowerCase()],
                                                                  r && "get"in r && (n = r.get(o, "value")) !== t ? n : (n = o.value,
                                                                    "string" == typeof n ? n.replace(V, "") : null == n ? "" : n)
                                                                  }
                                                                }
                                                              }),
                                                              x.extend({
                                                                valHooks: {
                                                                  option: {
                                                                    get: function(e) {
                                                                      var t = x.find.attr(e, "value");
                                                                      return null != t ? t : e.text
                                                                    }
                                                                  },
                                                                  select: {
                                                                    get: function(e) {
                                                                      var t, n, r = e.options, i = e.selectedIndex, o = "select-one" === e.type || 0 > i, a = o ? null : [], s = o ? i + 1 : r.length, l = 0 > i ? s : o ? i : 0;
                                                                      for (; s > l; l++) {
                                                                        if (n = r[l],
                                                                          !(!n.selected && l !== i || (x.support.optDisabled ? n.disabled : null !== n.getAttribute("disabled")) || n.parentNode.disabled && x.nodeName(n.parentNode, "optgroup"))) {
                                                                            if (t = x(n).val(),
                                                                            o) {
                                                                              return t
                                                                            }
                                                                            a.push(t)
                                                                          }
                                                                        }
                                                                        return a
                                                                      },
                                                                      set: function(e, t) {
                                                                        var n, r, i = e.options, o = x.makeArray(t), a = i.length;
                                                                        while (a--) {
                                                                          r = i[a],
                                                                          (r.selected = x.inArray(x(r).val(), o) >= 0) && (n = !0)
                                                                        }
                                                                        return n || (e.selectedIndex = -1),
                                                                        o
                                                                      }
                                                                    }
                                                                  },
                                                                  attr: function(e, n, r) {
                                                                    var o, a, s = e.nodeType;
                                                                    if (e && 3 !== s && 8 !== s && 2 !== s) {
                                                                      return typeof e.getAttribute === i ? x.prop(e, n, r) : (1 === s && x.isXMLDoc(e) || (n = n.toLowerCase(),
                                                                      o = x.attrHooks[n] || (x.expr.match.bool.test(n) ? X : z)),
                                                                      r === t ? o && "get"in o && null !== (a = o.get(e, n)) ? a : (a = x.find.attr(e, n),
                                                                      null == a ? t : a) : null !== r ? o && "set"in o && (a = o.set(e, r, n)) !== t ? a : (e.setAttribute(n, r + ""),
                                                                      r) : (x.removeAttr(e, n),
                                                                      t))
                                                                    }
                                                                  },
                                                                  removeAttr: function(e, t) {
                                                                    var n, r, i = 0, o = t && t.match(T);
                                                                    if (o && 1 === e.nodeType) {
                                                                      while (n = o[i++]) {
                                                                        r = x.propFix[n] || n,
                                                                        x.expr.match.bool.test(n) ? K && Q || !G.test(n) ? e[r] = !1 : e[x.camelCase("default-" + n)] = e[r] = !1 : x.attr(e, n, ""),
                                                                        e.removeAttribute(Q ? n : r)
                                                                      }
                                                                    }
                                                                  },
                                                                  attrHooks: {
                                                                    type: {
                                                                      set: function(e, t) {
                                                                        if (!x.support.radioValue && "radio" === t && x.nodeName(e, "input")) {
                                                                          var n = e.value;
                                                                          return e.setAttribute("type", t),
                                                                          n && (e.value = n),
                                                                          t
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  propFix: {
                                                                    "for": "htmlFor",
                                                                    "class": "className"
                                                                  },
                                                                  prop: function(e, n, r) {
                                                                    var i, o, a, s = e.nodeType;
                                                                    if (e && 3 !== s && 8 !== s && 2 !== s) {
                                                                      return a = 1 !== s || !x.isXMLDoc(e),
                                                                      a && (n = x.propFix[n] || n,
                                                                        o = x.propHooks[n]),
                                                                        r !== t ? o && "set"in o && (i = o.set(e, r, n)) !== t ? i : e[n] = r : o && "get"in o && null !== (i = o.get(e, n)) ? i : e[n]
                                                                      }
                                                                    },
                                                                    propHooks: {
                                                                      tabIndex: {
                                                                        get: function(e) {
                                                                          var t = x.find.attr(e, "tabindex");
                                                                          return t ? parseInt(t, 10) : Y.test(e.nodeName) || J.test(e.nodeName) && e.href ? 0 : -1
                                                                        }
                                                                      }
                                                                    }
                                                                  }),
                                                                  X = {
                                                                    set: function(e, t, n) {
                                                                      return t === !1 ? x.removeAttr(e, n) : K && Q || !G.test(n) ? e.setAttribute(!Q && x.propFix[n] || n, n) : e[x.camelCase("default-" + n)] = e[n] = !0,
                                                                      n
                                                                    }
                                                                  },
                                                                  x.each(x.expr.match.bool.source.match(/\w+/g), function(e, n) {
                                                                    var r = x.expr.attrHandle[n] || x.find.attr;
                                                                    x.expr.attrHandle[n] = K && Q || !G.test(n) ? function(e, n, i) {
                                                                      var o = x.expr.attrHandle[n]
                                                                      , a = i ? t : (x.expr.attrHandle[n] = t) != r(e, n, i) ? n.toLowerCase() : null;
                                                                      return x.expr.attrHandle[n] = o,
                                                                      a
                                                                    }
                                                                    : function(e, n, r) {
                                                                      return r ? t : e[x.camelCase("default-" + n)] ? n.toLowerCase() : null
                                                                    }
                                                                  }),
                                                                  K && Q || (x.attrHooks.value = {
                                                                    set: function(e, n, r) {
                                                                      return x.nodeName(e, "input") ? (e.defaultValue = n,
                                                                        t) : z && z.set(e, n, r)
                                                                      }
                                                                    }),
                                                                    Q || (z = {
                                                                      set: function(e, n, r) {
                                                                        var i = e.getAttributeNode(r);
                                                                        return i || e.setAttributeNode(i = e.ownerDocument.createAttribute(r)),
                                                                        i.value = n += "",
                                                                        "value" === r || n === e.getAttribute(r) ? n : t
                                                                      }
                                                                    },
                                                                    x.expr.attrHandle.id = x.expr.attrHandle.name = x.expr.attrHandle.coords = function(e, n, r) {
                                                                      var i;
                                                                      return r ? t : (i = e.getAttributeNode(n)) && "" !== i.value ? i.value : null
                                                                    }
                                                                    ,
                                                                    x.valHooks.button = {
                                                                      get: function(e, n) {
                                                                        var r = e.getAttributeNode(n);
                                                                        return r && r.specified ? r.value : t
                                                                      },
                                                                      set: z.set
                                                                    },
                                                                    x.attrHooks.contenteditable = {
                                                                      set: function(e, t, n) {
                                                                        z.set(e, "" === t ? !1 : t, n)
                                                                      }
                                                                    },
                                                                    x.each(["width", "height"], function(e, n) {
                                                                      x.attrHooks[n] = {
                                                                        set: function(e, r) {
                                                                          return "" === r ? (e.setAttribute(n, "auto"),
                                                                          r) : t
                                                                        }
                                                                      }
                                                                    })),
                                                                    x.support.hrefNormalized || x.each(["href", "src"], function(e, t) {
                                                                      x.propHooks[t] = {
                                                                        get: function(e) {
                                                                          return e.getAttribute(t, 4)
                                                                        }
                                                                      }
                                                                    }),
                                                                    x.support.style || (x.attrHooks.style = {
                                                                      get: function(e) {
                                                                        return e.style.cssText || t
                                                                      },
                                                                      set: function(e, t) {
                                                                        return e.style.cssText = t + ""
                                                                      }
                                                                    }),
                                                                    x.support.optSelected || (x.propHooks.selected = {
                                                                      get: function(e) {
                                                                        var t = e.parentNode;
                                                                        return t && (t.selectedIndex,
                                                                          t.parentNode && t.parentNode.selectedIndex),
                                                                          null
                                                                        }
                                                                      }),
                                                                      x.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
                                                                        x.propFix[this.toLowerCase()] = this
                                                                      }),
                                                                      x.support.enctype || (x.propFix.enctype = "encoding"),
                                                                      x.each(["radio", "checkbox"], function() {
                                                                        x.valHooks[this] = {
                                                                          set: function(e, n) {
                                                                            return x.isArray(n) ? e.checked = x.inArray(x(e).val(), n) >= 0 : t
                                                                          }
                                                                        },
                                                                        x.support.checkOn || (x.valHooks[this].get = function(e) {
                                                                          return null === e.getAttribute("value") ? "on" : e.value
                                                                        }
                                                                      )
                                                                    });
                                                                    var Z = /^(?:input|select|textarea)$/i
                                                                    , et = /^key/
                                                                    , tt = /^(?:mouse|contextmenu)|click/
                                                                    , nt = /^(?:focusinfocus|focusoutblur)$/
                                                                    , rt = /^([^.]*)(?:\.(.+)|)$/;
                                                                    function it() {
                                                                      return !0
                                                                    }
                                                                    function ot() {
                                                                      return !1
                                                                    }
                                                                    function at() {
                                                                      try {
                                                                        return a.activeElement
                                                                      } catch (e) {}
                                                                    }
                                                                    x.event = {
                                                                      global: {},
                                                                      add: function(e, n, r, o, a) {
                                                                        var s, l, u, c, p, f, d, h, g, m, y, v = x._data(e);
                                                                        if (v) {
                                                                          r.handler && (c = r,
                                                                            r = c.handler,
                                                                            a = c.selector),
                                                                            r.guid || (r.guid = x.guid++),
                                                                            (l = v.events) || (l = v.events = {}),
                                                                            (f = v.handle) || (f = v.handle = function(e) {
                                                                              return typeof x === i || e && x.event.triggered === e.type ? t : x.event.dispatch.apply(f.elem, arguments)
                                                                            }
                                                                            ,
                                                                            f.elem = e),
                                                                            n = (n || "").match(T) || [""],
                                                                            u = n.length;
                                                                            while (u--) {
                                                                              s = rt.exec(n[u]) || [],
                                                                              g = y = s[1],
                                                                              m = (s[2] || "").split(".").sort(),
                                                                              g && (p = x.event.special[g] || {},
                                                                                g = (a ? p.delegateType : p.bindType) || g,
                                                                                p = x.event.special[g] || {},
                                                                                d = x.extend({
                                                                                  type: g,
                                                                                  origType: y,
                                                                                  data: o,
                                                                                  handler: r,
                                                                                  guid: r.guid,
                                                                                  selector: a,
                                                                                  needsContext: a && x.expr.match.needsContext.test(a),
                                                                                  namespace: m.join(".")
                                                                                }, c),
                                                                                (h = l[g]) || (h = l[g] = [],
                                                                                  h.delegateCount = 0,
                                                                                  p.setup && p.setup.call(e, o, m, f) !== !1 || (e.addEventListener ? e.addEventListener(g, f, !1) : e.attachEvent && e.attachEvent("on" + g, f))),
                                                                                  p.add && (p.add.call(e, d),
                                                                                  d.handler.guid || (d.handler.guid = r.guid)),
                                                                                  a ? h.splice(h.delegateCount++, 0, d) : h.push(d),
                                                                                  x.event.global[g] = !0)
                                                                                }
                                                                                e = null
                                                                              }
                                                                            },
                                                                            remove: function(e, t, n, r, i) {
                                                                              var o, a, s, l, u, c, p, f, d, h, g, m = x.hasData(e) && x._data(e);
                                                                              if (m && (c = m.events)) {
                                                                                t = (t || "").match(T) || [""],
                                                                                u = t.length;
                                                                                while (u--) {
                                                                                  if (s = rt.exec(t[u]) || [],
                                                                                  d = g = s[1],
                                                                                  h = (s[2] || "").split(".").sort(),
                                                                                  d) {
                                                                                    p = x.event.special[d] || {},
                                                                                    d = (r ? p.delegateType : p.bindType) || d,
                                                                                    f = c[d] || [],
                                                                                    s = s[2] && RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"),
                                                                                    l = o = f.length;
                                                                                    while (o--) {
                                                                                      a = f[o],
                                                                                      !i && g !== a.origType || n && n.guid !== a.guid || s && !s.test(a.namespace) || r && r !== a.selector && ("**" !== r || !a.selector) || (f.splice(o, 1),
                                                                                      a.selector && f.delegateCount--,
                                                                                      p.remove && p.remove.call(e, a))
                                                                                    }
                                                                                    l && !f.length && (p.teardown && p.teardown.call(e, h, m.handle) !== !1 || x.removeEvent(e, d, m.handle),
                                                                                    delete c[d])
                                                                                  } else {
                                                                                    for (d in c) {
                                                                                      x.event.remove(e, d + t[u], n, r, !0)
                                                                                    }
                                                                                  }
                                                                                }
                                                                                x.isEmptyObject(c) && (delete m.handle,
                                                                                  x._removeData(e, "events"))
                                                                                }
                                                                              },
                                                                              trigger: function(n, r, i, o) {
                                                                                var s, l, u, c, p, f, d, h = [i || a], g = v.call(n, "type") ? n.type : n, m = v.call(n, "namespace") ? n.namespace.split(".") : [];
                                                                                if (u = f = i = i || a,
                                                                                  3 !== i.nodeType && 8 !== i.nodeType && !nt.test(g + x.event.triggered) && (g.indexOf(".") >= 0 && (m = g.split("."),
                                                                                  g = m.shift(),
                                                                                  m.sort()),
                                                                                  l = 0 > g.indexOf(":") && "on" + g,
                                                                                  n = n[x.expando] ? n : new x.Event(g,"object" == typeof n && n),
                                                                                  n.isTrigger = o ? 2 : 3,
                                                                                  n.namespace = m.join("."),
                                                                                  n.namespace_re = n.namespace ? RegExp("(^|\\.)" + m.join("\\.(?:.*\\.|)") + "(\\.|$)") : null,
                                                                                  n.result = t,
                                                                                  n.target || (n.target = i),
                                                                                  r = null == r ? [n] : x.makeArray(r, [n]),
                                                                                  p = x.event.special[g] || {},
                                                                                  o || !p.trigger || p.trigger.apply(i, r) !== !1)) {
                                                                                    if (!o && !p.noBubble && !x.isWindow(i)) {
                                                                                      for (c = p.delegateType || g,
                                                                                        nt.test(c + g) || (u = u.parentNode); u; u = u.parentNode) {
                                                                                          h.push(u),
                                                                                          f = u
                                                                                        }
                                                                                        f === (i.ownerDocument || a) && h.push(f.defaultView || f.parentWindow || e)
                                                                                      }
                                                                                      d = 0;
                                                                                      while ((u = h[d++]) && !n.isPropagationStopped()) {
                                                                                        n.type = d > 1 ? c : p.bindType || g,
                                                                                        s = (x._data(u, "events") || {})[n.type] && x._data(u, "handle"),
                                                                                        s && s.apply(u, r),
                                                                                        s = l && u[l],
                                                                                        s && x.acceptData(u) && s.apply && s.apply(u, r) === !1 && n.preventDefault()
                                                                                      }
                                                                                      if (n.type = g,
                                                                                        !o && !n.isDefaultPrevented() && (!p._default || p._default.apply(h.pop(), r) === !1) && x.acceptData(i) && l && i[g] && !x.isWindow(i)) {
                                                                                          f = i[l],
                                                                                          f && (i[l] = null),
                                                                                          x.event.triggered = g;
                                                                                          try {
                                                                                            i[g]()
                                                                                          } catch (y) {}
                                                                                          x.event.triggered = t,
                                                                                          f && (i[l] = f)
                                                                                        }
                                                                                        return n.result
                                                                                      }
                                                                                    },
                                                                                    dispatch: function(e) {
                                                                                      e = x.event.fix(e);
                                                                                      var n, r, i, o, a, s = [], l = g.call(arguments), u = (x._data(this, "events") || {})[e.type] || [], c = x.event.special[e.type] || {};
                                                                                      if (l[0] = e,
                                                                                        e.delegateTarget = this,
                                                                                        !c.preDispatch || c.preDispatch.call(this, e) !== !1) {
                                                                                          s = x.event.handlers.call(this, e, u),
                                                                                          n = 0;
                                                                                          while ((o = s[n++]) && !e.isPropagationStopped()) {
                                                                                            e.currentTarget = o.elem,
                                                                                            a = 0;
                                                                                            while ((i = o.handlers[a++]) && !e.isImmediatePropagationStopped()) {
                                                                                              (!e.namespace_re || e.namespace_re.test(i.namespace)) && (e.handleObj = i,
                                                                                                e.data = i.data,
                                                                                                r = ((x.event.special[i.origType] || {}).handle || i.handler).apply(o.elem, l),
                                                                                                r !== t && (e.result = r) === !1 && (e.preventDefault(),
                                                                                                e.stopPropagation()))
                                                                                              }
                                                                                            }
                                                                                            return c.postDispatch && c.postDispatch.call(this, e),
                                                                                            e.result
                                                                                          }
                                                                                        },
                                                                                        handlers: function(e, n) {
                                                                                          var r, i, o, a, s = [], l = n.delegateCount, u = e.target;
                                                                                          if (l && u.nodeType && (!e.button || "click" !== e.type)) {
                                                                                            for (; u != this; u = u.parentNode || this) {
                                                                                              if (1 === u.nodeType && (u.disabled !== !0 || "click" !== e.type)) {
                                                                                                for (o = [],
                                                                                                  a = 0; l > a; a++) {
                                                                                                    i = n[a],
                                                                                                    r = i.selector + " ",
                                                                                                    o[r] === t && (o[r] = i.needsContext ? x(r, this).index(u) >= 0 : x.find(r, this, null, [u]).length),
                                                                                                    o[r] && o.push(i)
                                                                                                  }
                                                                                                  o.length && s.push({
                                                                                                    elem: u,
                                                                                                    handlers: o
                                                                                                  })
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            return n.length > l && s.push({
                                                                                              elem: this,
                                                                                              handlers: n.slice(l)
                                                                                            }),
                                                                                            s
                                                                                          },
                                                                                          fix: function(e) {
                                                                                            if (e[x.expando]) {
                                                                                              return e
                                                                                            }
                                                                                            var t, n, r, i = e.type, o = e, s = this.fixHooks[i];
                                                                                            s || (this.fixHooks[i] = s = tt.test(i) ? this.mouseHooks : et.test(i) ? this.keyHooks : {}),
                                                                                            r = s.props ? this.props.concat(s.props) : this.props,
                                                                                            e = new x.Event(o),
                                                                                            t = r.length;
                                                                                            while (t--) {
                                                                                              n = r[t],
                                                                                              e[n] = o[n]
                                                                                            }
                                                                                            return e.target || (e.target = o.srcElement || a),
                                                                                            3 === e.target.nodeType && (e.target = e.target.parentNode),
                                                                                            e.metaKey = !!e.metaKey,
                                                                                            s.filter ? s.filter(e, o) : e
                                                                                          },
                                                                                          props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
                                                                                          fixHooks: {},
                                                                                          keyHooks: {
                                                                                            props: "char charCode key keyCode".split(" "),
                                                                                            filter: function(e, t) {
                                                                                              return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode),
                                                                                              e
                                                                                            }
                                                                                          },
                                                                                          mouseHooks: {
                                                                                            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                                                                                            filter: function(e, n) {
                                                                                              var r, i, o, s = n.button, l = n.fromElement;
                                                                                              return null == e.pageX && null != n.clientX && (i = e.target.ownerDocument || a,
                                                                                                o = i.documentElement,
                                                                                                r = i.body,
                                                                                                e.pageX = n.clientX + (o && o.scrollLeft || r && r.scrollLeft || 0) - (o && o.clientLeft || r && r.clientLeft || 0),
                                                                                                e.pageY = n.clientY + (o && o.scrollTop || r && r.scrollTop || 0) - (o && o.clientTop || r && r.clientTop || 0)),
                                                                                                !e.relatedTarget && l && (e.relatedTarget = l === e.target ? n.toElement : l),
                                                                                                e.which || s === t || (e.which = 1 & s ? 1 : 2 & s ? 3 : 4 & s ? 2 : 0),
                                                                                                e
                                                                                              }
                                                                                            },
                                                                                            special: {
                                                                                              load: {
                                                                                                noBubble: !0
                                                                                              },
                                                                                              focus: {
                                                                                                trigger: function() {
                                                                                                  if (this !== at() && this.focus) {
                                                                                                    try {
                                                                                                      return this.focus(),
                                                                                                      !1
                                                                                                    } catch (e) {}
                                                                                                  }
                                                                                                },
                                                                                                delegateType: "focusin"
                                                                                              },
                                                                                              blur: {
                                                                                                trigger: function() {
                                                                                                  return this === at() && this.blur ? (this.blur(),
                                                                                                  !1) : t
                                                                                                },
                                                                                                delegateType: "focusout"
                                                                                              },
                                                                                              click: {
                                                                                                trigger: function() {
                                                                                                  return x.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(),
                                                                                                  !1) : t
                                                                                                },
                                                                                                _default: function(e) {
                                                                                                  return x.nodeName(e.target, "a")
                                                                                                }
                                                                                              },
                                                                                              beforeunload: {
                                                                                                postDispatch: function(e) {
                                                                                                  e.result !== t && (e.originalEvent.returnValue = e.result)
                                                                                                }
                                                                                              }
                                                                                            },
                                                                                            simulate: function(e, t, n, r) {
                                                                                              var i = x.extend(new x.Event, n, {
                                                                                                type: e,
                                                                                                isSimulated: !0,
                                                                                                originalEvent: {}
                                                                                              });
                                                                                              r ? x.event.trigger(i, null, t) : x.event.dispatch.call(t, i),
                                                                                              i.isDefaultPrevented() && n.preventDefault()
                                                                                            }
                                                                                          },
                                                                                          x.removeEvent = a.removeEventListener ? function(e, t, n) {
                                                                                            e.removeEventListener && e.removeEventListener(t, n, !1)
                                                                                          }
                                                                                          : function(e, t, n) {
                                                                                            var r = "on" + t;
                                                                                            e.detachEvent && (typeof e[r] === i && (e[r] = null),
                                                                                            e.detachEvent(r, n))
                                                                                          }
                                                                                          ,
                                                                                          x.Event = function(e, n) {
                                                                                            return this instanceof x.Event ? (e && e.type ? (this.originalEvent = e,
                                                                                              this.type = e.type,
                                                                                              this.isDefaultPrevented = e.defaultPrevented || e.returnValue === !1 || e.getPreventDefault && e.getPreventDefault() ? it : ot) : this.type = e,
                                                                                              n && x.extend(this, n),
                                                                                              this.timeStamp = e && e.timeStamp || x.now(),
                                                                                              this[x.expando] = !0,
                                                                                              t) : new x.Event(e,n)
                                                                                            }
                                                                                            ,
                                                                                            x.Event.prototype = {
                                                                                              isDefaultPrevented: ot,
                                                                                              isPropagationStopped: ot,
                                                                                              isImmediatePropagationStopped: ot,
                                                                                              preventDefault: function() {
                                                                                                var e = this.originalEvent;
                                                                                                this.isDefaultPrevented = it,
                                                                                                e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1)
                                                                                              },
                                                                                              stopPropagation: function() {
                                                                                                var e = this.originalEvent;
                                                                                                this.isPropagationStopped = it,
                                                                                                e && (e.stopPropagation && e.stopPropagation(),
                                                                                                e.cancelBubble = !0)
                                                                                              },
                                                                                              stopImmediatePropagation: function() {
                                                                                                this.isImmediatePropagationStopped = it,
                                                                                                this.stopPropagation()
                                                                                              }
                                                                                            },
                                                                                            x.each({
                                                                                              mouseenter: "mouseover",
                                                                                              mouseleave: "mouseout"
                                                                                            }, function(e, t) {
                                                                                              x.event.special[e] = {
                                                                                                delegateType: t,
                                                                                                bindType: t,
                                                                                                handle: function(e) {
                                                                                                  var n, r = this, i = e.relatedTarget, o = e.handleObj;
                                                                                                  return (!i || i !== r && !x.contains(r, i)) && (e.type = o.origType,
                                                                                                    n = o.handler.apply(this, arguments),
                                                                                                    e.type = t),
                                                                                                    n
                                                                                                  }
                                                                                                }
                                                                                              }),
                                                                                              x.support.submitBubbles || (x.event.special.submit = {
                                                                                                setup: function() {
                                                                                                  return x.nodeName(this, "form") ? !1 : (x.event.add(this, "click._submit keypress._submit", function(e) {
                                                                                                    var n = e.target
                                                                                                    , r = x.nodeName(n, "input") || x.nodeName(n, "button") ? n.form : t;
                                                                                                    r && !x._data(r, "submitBubbles") && (x.event.add(r, "submit._submit", function(e) {
                                                                                                      e._submit_bubble = !0
                                                                                                    }),
                                                                                                    x._data(r, "submitBubbles", !0))
                                                                                                  }),
                                                                                                  t)
                                                                                                },
                                                                                                postDispatch: function(e) {
                                                                                                  e._submit_bubble && (delete e._submit_bubble,
                                                                                                    this.parentNode && !e.isTrigger && x.event.simulate("submit", this.parentNode, e, !0))
                                                                                                  },
                                                                                                  teardown: function() {
                                                                                                    return x.nodeName(this, "form") ? !1 : (x.event.remove(this, "._submit"),
                                                                                                    t)
                                                                                                  }
                                                                                                }),
                                                                                                x.support.changeBubbles || (x.event.special.change = {
                                                                                                  setup: function() {
                                                                                                    return Z.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (x.event.add(this, "propertychange._change", function(e) {
                                                                                                      "checked" === e.originalEvent.propertyName && (this._just_changed = !0)
                                                                                                    }),
                                                                                                    x.event.add(this, "click._change", function(e) {
                                                                                                      this._just_changed && !e.isTrigger && (this._just_changed = !1),
                                                                                                      x.event.simulate("change", this, e, !0)
                                                                                                    })),
                                                                                                    !1) : (x.event.add(this, "beforeactivate._change", function(e) {
                                                                                                      var t = e.target;
                                                                                                      Z.test(t.nodeName) && !x._data(t, "changeBubbles") && (x.event.add(t, "change._change", function(e) {
                                                                                                        !this.parentNode || e.isSimulated || e.isTrigger || x.event.simulate("change", this.parentNode, e, !0)
                                                                                                      }),
                                                                                                      x._data(t, "changeBubbles", !0))
                                                                                                    }),
                                                                                                    t)
                                                                                                  },
                                                                                                  handle: function(e) {
                                                                                                    var n = e.target;
                                                                                                    return this !== n || e.isSimulated || e.isTrigger || "radio" !== n.type && "checkbox" !== n.type ? e.handleObj.handler.apply(this, arguments) : t
                                                                                                  },
                                                                                                  teardown: function() {
                                                                                                    return x.event.remove(this, "._change"),
                                                                                                    !Z.test(this.nodeName)
                                                                                                  }
                                                                                                }),
                                                                                                x.support.focusinBubbles || x.each({
                                                                                                  focus: "focusin",
                                                                                                  blur: "focusout"
                                                                                                }, function(e, t) {
                                                                                                  var n = 0
                                                                                                  , r = function(e) {
                                                                                                    x.event.simulate(t, e.target, x.event.fix(e), !0)
                                                                                                  };
                                                                                                  x.event.special[t] = {
                                                                                                    setup: function() {
                                                                                                      0 === n++ && a.addEventListener(e, r, !0)
                                                                                                    },
                                                                                                    teardown: function() {
                                                                                                      0 === --n && a.removeEventListener(e, r, !0)
                                                                                                    }
                                                                                                  }
                                                                                                }),
                                                                                                x.fn.extend({
                                                                                                  on: function(e, n, r, i, o) {
                                                                                                    var a, s;
                                                                                                    if ("object" == typeof e) {
                                                                                                      "string" != typeof n && (r = r || n,
                                                                                                        n = t);
                                                                                                        for (a in e) {
                                                                                                          this.on(a, n, r, e[a], o)
                                                                                                        }
                                                                                                        return this
                                                                                                      }
                                                                                                      if (null == r && null == i ? (i = n,
                                                                                                        r = n = t) : null == i && ("string" == typeof n ? (i = r,
                                                                                                          r = t) : (i = r,
                                                                                                            r = n,
                                                                                                            n = t)),
                                                                                                            i === !1) {
                                                                                                              i = ot
                                                                                                            } else {
                                                                                                              if (!i) {
                                                                                                                return this
                                                                                                              }
                                                                                                            }
                                                                                                            return 1 === o && (s = i,
                                                                                                              i = function(e) {
                                                                                                                return x().off(e),
                                                                                                                s.apply(this, arguments)
                                                                                                              }
                                                                                                              ,
                                                                                                              i.guid = s.guid || (s.guid = x.guid++)),
                                                                                                              this.each(function() {
                                                                                                                x.event.add(this, e, i, r, n)
                                                                                                              })
                                                                                                            },
                                                                                                            one: function(e, t, n, r) {
                                                                                                              return this.on(e, t, n, r, 1)
                                                                                                            },
                                                                                                            off: function(e, n, r) {
                                                                                                              var i, o;
                                                                                                              if (e && e.preventDefault && e.handleObj) {
                                                                                                                return i = e.handleObj,
                                                                                                                x(e.delegateTarget).off(i.namespace ? i.origType + "." + i.namespace : i.origType, i.selector, i.handler),
                                                                                                                this
                                                                                                              }
                                                                                                              if ("object" == typeof e) {
                                                                                                                for (o in e) {
                                                                                                                  this.off(o, n, e[o])
                                                                                                                }
                                                                                                                return this
                                                                                                              }
                                                                                                              return (n === !1 || "function" == typeof n) && (r = n,
                                                                                                                n = t),
                                                                                                                r === !1 && (r = ot),
                                                                                                                this.each(function() {
                                                                                                                  x.event.remove(this, e, r, n)
                                                                                                                })
                                                                                                              },
                                                                                                              trigger: function(e, t) {
                                                                                                                return this.each(function() {
                                                                                                                  x.event.trigger(e, t, this)
                                                                                                                })
                                                                                                              },
                                                                                                              triggerHandler: function(e, n) {
                                                                                                                var r = this[0];
                                                                                                                return r ? x.event.trigger(e, n, r, !0) : t
                                                                                                              }
                                                                                                            });
                                                                                                            var st = /^.[^:#\[\.,]*$/
                                                                                                            , lt = /^(?:parents|prev(?:Until|All))/
                                                                                                            , ut = x.expr.match.needsContext
                                                                                                            , ct = {
                                                                                                              children: !0,
                                                                                                              contents: !0,
                                                                                                              next: !0,
                                                                                                              prev: !0
                                                                                                            };
                                                                                                            x.fn.extend({
                                                                                                              find: function(e) {
                                                                                                                var t, n = [], r = this, i = r.length;
                                                                                                                if ("string" != typeof e) {
                                                                                                                  return this.pushStack(x(e).filter(function() {
                                                                                                                    for (t = 0; i > t; t++) {
                                                                                                                      if (x.contains(r[t], this)) {
                                                                                                                        return !0
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }))
                                                                                                                }
                                                                                                                for (t = 0; i > t; t++) {
                                                                                                                  x.find(e, r[t], n)
                                                                                                                }
                                                                                                                return n = this.pushStack(i > 1 ? x.unique(n) : n),
                                                                                                                n.selector = this.selector ? this.selector + " " + e : e,
                                                                                                                n
                                                                                                              },
                                                                                                              has: function(e) {
                                                                                                                var t, n = x(e, this), r = n.length;
                                                                                                                return this.filter(function() {
                                                                                                                  for (t = 0; r > t; t++) {
                                                                                                                    if (x.contains(this, n[t])) {
                                                                                                                      return !0
                                                                                                                    }
                                                                                                                  }
                                                                                                                })
                                                                                                              },
                                                                                                              not: function(e) {
                                                                                                                return this.pushStack(ft(this, e || [], !0))
                                                                                                              },
                                                                                                              filter: function(e) {
                                                                                                                return this.pushStack(ft(this, e || [], !1))
                                                                                                              },
                                                                                                              is: function(e) {
                                                                                                                return !!ft(this, "string" == typeof e && ut.test(e) ? x(e) : e || [], !1).length
                                                                                                              },
                                                                                                              closest: function(e, t) {
                                                                                                                var n, r = 0, i = this.length, o = [], a = ut.test(e) || "string" != typeof e ? x(e, t || this.context) : 0;
                                                                                                                for (; i > r; r++) {
                                                                                                                  for (n = this[r]; n && n !== t; n = n.parentNode) {
                                                                                                                    if (11 > n.nodeType && (a ? a.index(n) > -1 : 1 === n.nodeType && x.find.matchesSelector(n, e))) {
                                                                                                                      n = o.push(n);
                                                                                                                      break
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                return this.pushStack(o.length > 1 ? x.unique(o) : o)
                                                                                                              },
                                                                                                              index: function(e) {
                                                                                                                return e ? "string" == typeof e ? x.inArray(this[0], x(e)) : x.inArray(e.jquery ? e[0] : e, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
                                                                                                              },
                                                                                                              add: function(e, t) {
                                                                                                                var n = "string" == typeof e ? x(e, t) : x.makeArray(e && e.nodeType ? [e] : e)
                                                                                                                , r = x.merge(this.get(), n);
                                                                                                                return this.pushStack(x.unique(r))
                                                                                                              },
                                                                                                              addBack: function(e) {
                                                                                                                return this.add(null == e ? this.prevObject : this.prevObject.filter(e))
                                                                                                              }
                                                                                                            });
                                                                                                            function pt(e, t) {
                                                                                                              do {
                                                                                                                e = e[t]
                                                                                                              } while (e && 1 !== e.nodeType);return e
                                                                                                            }
                                                                                                            x.each({
                                                                                                              parent: function(e) {
                                                                                                                var t = e.parentNode;
                                                                                                                return t && 11 !== t.nodeType ? t : null
                                                                                                              },
                                                                                                              parents: function(e) {
                                                                                                                return x.dir(e, "parentNode")
                                                                                                              },
                                                                                                              parentsUntil: function(e, t, n) {
                                                                                                                return x.dir(e, "parentNode", n)
                                                                                                              },
                                                                                                              next: function(e) {
                                                                                                                return pt(e, "nextSibling")
                                                                                                              },
                                                                                                              prev: function(e) {
                                                                                                                return pt(e, "previousSibling")
                                                                                                              },
                                                                                                              nextAll: function(e) {
                                                                                                                return x.dir(e, "nextSibling")
                                                                                                              },
                                                                                                              prevAll: function(e) {
                                                                                                                return x.dir(e, "previousSibling")
                                                                                                              },
                                                                                                              nextUntil: function(e, t, n) {
                                                                                                                return x.dir(e, "nextSibling", n)
                                                                                                              },
                                                                                                              prevUntil: function(e, t, n) {
                                                                                                                return x.dir(e, "previousSibling", n)
                                                                                                              },
                                                                                                              siblings: function(e) {
                                                                                                                return x.sibling((e.parentNode || {}).firstChild, e)
                                                                                                              },
                                                                                                              children: function(e) {
                                                                                                                return x.sibling(e.firstChild)
                                                                                                              },
                                                                                                              contents: function(e) {
                                                                                                                return x.nodeName(e, "iframe") ? e.contentDocument || e.contentWindow.document : x.merge([], e.childNodes)
                                                                                                              }
                                                                                                            }, function(e, t) {
                                                                                                              x.fn[e] = function(n, r) {
                                                                                                                var i = x.map(this, t, n);
                                                                                                                return "Until" !== e.slice(-5) && (r = n),
                                                                                                                r && "string" == typeof r && (i = x.filter(r, i)),
                                                                                                                this.length > 1 && (ct[e] || (i = x.unique(i)),
                                                                                                                lt.test(e) && (i = i.reverse())),
                                                                                                                this.pushStack(i)
                                                                                                              }
                                                                                                            }),
                                                                                                            x.extend({
                                                                                                              filter: function(e, t, n) {
                                                                                                                var r = t[0];
                                                                                                                return n && (e = ":not(" + e + ")"),
                                                                                                                1 === t.length && 1 === r.nodeType ? x.find.matchesSelector(r, e) ? [r] : [] : x.find.matches(e, x.grep(t, function(e) {
                                                                                                                  return 1 === e.nodeType
                                                                                                                }))
                                                                                                              },
                                                                                                              dir: function(e, n, r) {
                                                                                                                var i = []
                                                                                                                , o = e[n];
                                                                                                                while (o && 9 !== o.nodeType && (r === t || 1 !== o.nodeType || !x(o).is(r))) {
                                                                                                                  1 === o.nodeType && i.push(o),
                                                                                                                  o = o[n]
                                                                                                                }
                                                                                                                return i
                                                                                                              },
                                                                                                              sibling: function(e, t) {
                                                                                                                var n = [];
                                                                                                                for (; e; e = e.nextSibling) {
                                                                                                                  1 === e.nodeType && e !== t && n.push(e)
                                                                                                                }
                                                                                                                return n
                                                                                                              }
                                                                                                            });
                                                                                                            function ft(e, t, n) {
                                                                                                              if (x.isFunction(t)) {
                                                                                                                return x.grep(e, function(e, r) {
                                                                                                                  return !!t.call(e, r, e) !== n
                                                                                                                })
                                                                                                              }
                                                                                                              if (t.nodeType) {
                                                                                                                return x.grep(e, function(e) {
                                                                                                                  return e === t !== n
                                                                                                                })
                                                                                                              }
                                                                                                              if ("string" == typeof t) {
                                                                                                                if (st.test(t)) {
                                                                                                                  return x.filter(t, e, n)
                                                                                                                }
                                                                                                                t = x.filter(t, e)
                                                                                                              }
                                                                                                              return x.grep(e, function(e) {
                                                                                                                return x.inArray(e, t) >= 0 !== n
                                                                                                              })
                                                                                                            }
                                                                                                            function dt(e) {
                                                                                                              var t = ht.split("|")
                                                                                                              , n = e.createDocumentFragment();
                                                                                                              if (n.createElement) {
                                                                                                                while (t.length) {
                                                                                                                  n.createElement(t.pop())
                                                                                                                }
                                                                                                              }
                                                                                                              return n
                                                                                                            }
                                                                                                            var ht = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video"
                                                                                                            , gt = / jQuery\d+="(?:null|\d+)"/g
                                                                                                            , mt = RegExp("<(?:" + ht + ")[\\s/>]", "i")
                                                                                                            , yt = /^\s+/
                                                                                                            , vt = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi
                                                                                                            , bt = /<([\w:]+)/
                                                                                                            , xt = /<tbody/i
                                                                                                            , wt = /<|&#?\w+;/
                                                                                                            , Tt = /<(?:script|style|link)/i
                                                                                                            , Ct = /^(?:checkbox|radio)$/i
                                                                                                            , Nt = /checked\s*(?:[^=]|=\s*.checked.)/i
                                                                                                            , kt = /^$|\/(?:java|ecma)script/i
                                                                                                            , Et = /^true\/(.*)/
                                                                                                            , St = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g
                                                                                                            , At = {
                                                                                                              option: [1, "<select multiple='multiple'>", "</select>"],
                                                                                                              legend: [1, "<fieldset>", "</fieldset>"],
                                                                                                              area: [1, "<map>", "</map>"],
                                                                                                              param: [1, "<object>", "</object>"],
                                                                                                              thead: [1, "<table>", "</table>"],
                                                                                                              tr: [2, "<table><tbody>", "</tbody></table>"],
                                                                                                              col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
                                                                                                              td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                                                                                                              _default: x.support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
                                                                                                            }
                                                                                                            , jt = dt(a)
                                                                                                            , Dt = jt.appendChild(a.createElement("div"));
                                                                                                            At.optgroup = At.option,
                                                                                                            At.tbody = At.tfoot = At.colgroup = At.caption = At.thead,
                                                                                                            At.th = At.td,
                                                                                                            x.fn.extend({
                                                                                                              text: function(e) {
                                                                                                                return x.access(this, function(e) {
                                                                                                                  return e === t ? x.text(this) : this.empty().append((this[0] && this[0].ownerDocument || a).createTextNode(e))
                                                                                                                }, null, e, arguments.length)
                                                                                                              },
                                                                                                              append: function() {
                                                                                                                return this.domManip(arguments, function(e) {
                                                                                                                  if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                                                                                                                    var t = Lt(this, e);
                                                                                                                    t.appendChild(e)
                                                                                                                  }
                                                                                                                })
                                                                                                              },
                                                                                                              prepend: function() {
                                                                                                                return this.domManip(arguments, function(e) {
                                                                                                                  if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                                                                                                                    var t = Lt(this, e);
                                                                                                                    t.insertBefore(e, t.firstChild)
                                                                                                                  }
                                                                                                                })
                                                                                                              },
                                                                                                              before: function() {
                                                                                                                return this.domManip(arguments, function(e) {
                                                                                                                  this.parentNode && this.parentNode.insertBefore(e, this)
                                                                                                                })
                                                                                                              },
                                                                                                              after: function() {
                                                                                                                return this.domManip(arguments, function(e) {
                                                                                                                  this.parentNode && this.parentNode.insertBefore(e, this.nextSibling)
                                                                                                                })
                                                                                                              },
                                                                                                              remove: function(e, t) {
                                                                                                                var n, r = e ? x.filter(e, this) : this, i = 0;
                                                                                                                for (; null != (n = r[i]); i++) {
                                                                                                                  t || 1 !== n.nodeType || x.cleanData(Ft(n)),
                                                                                                                  n.parentNode && (t && x.contains(n.ownerDocument, n) && _t(Ft(n, "script")),
                                                                                                                  n.parentNode.removeChild(n))
                                                                                                                }
                                                                                                                return this
                                                                                                              },
                                                                                                              empty: function() {
                                                                                                                var e, t = 0;
                                                                                                                for (; null != (e = this[t]); t++) {
                                                                                                                  1 === e.nodeType && x.cleanData(Ft(e, !1));
                                                                                                                  while (e.firstChild) {
                                                                                                                    e.removeChild(e.firstChild)
                                                                                                                  }
                                                                                                                  e.options && x.nodeName(e, "select") && (e.options.length = 0)
                                                                                                                }
                                                                                                                return this
                                                                                                              },
                                                                                                              clone: function(e, t) {
                                                                                                                return e = null == e ? !1 : e,
                                                                                                                t = null == t ? e : t,
                                                                                                                this.map(function() {
                                                                                                                  return x.clone(this, e, t)
                                                                                                                })
                                                                                                              },
                                                                                                              html: function(e) {
                                                                                                                return x.access(this, function(e) {
                                                                                                                  var n = this[0] || {}
                                                                                                                  , r = 0
                                                                                                                  , i = this.length;
                                                                                                                  if (e === t) {
                                                                                                                    return 1 === n.nodeType ? n.innerHTML.replace(gt, "") : t
                                                                                                                  }
                                                                                                                  if (!("string" != typeof e || Tt.test(e) || !x.support.htmlSerialize && mt.test(e) || !x.support.leadingWhitespace && yt.test(e) || At[(bt.exec(e) || ["", ""])[1].toLowerCase()])) {
                                                                                                                    e = e.replace(vt, "<$1></$2>");
                                                                                                                    try {
                                                                                                                      for (; i > r; r++) {
                                                                                                                        n = this[r] || {},
                                                                                                                        1 === n.nodeType && (x.cleanData(Ft(n, !1)),
                                                                                                                        n.innerHTML = e)
                                                                                                                      }
                                                                                                                      n = 0
                                                                                                                    } catch (o) {}
                                                                                                                  }
                                                                                                                  n && this.empty().append(e)
                                                                                                                }, null, e, arguments.length)
                                                                                                              },
                                                                                                              replaceWith: function() {
                                                                                                                var e = x.map(this, function(e) {
                                                                                                                  return [e.nextSibling, e.parentNode]
                                                                                                                })
                                                                                                                , t = 0;
                                                                                                                return this.domManip(arguments, function(n) {
                                                                                                                  var r = e[t++]
                                                                                                                  , i = e[t++];
                                                                                                                  i && (r && r.parentNode !== i && (r = this.nextSibling),
                                                                                                                  x(this).remove(),
                                                                                                                  i.insertBefore(n, r))
                                                                                                                }, !0),
                                                                                                                t ? this : this.remove()
                                                                                                              },
                                                                                                              detach: function(e) {
                                                                                                                return this.remove(e, !0)
                                                                                                              },
                                                                                                              domManip: function(e, t, n) {
                                                                                                                e = d.apply([], e);
                                                                                                                var r, i, o, a, s, l, u = 0, c = this.length, p = this, f = c - 1, h = e[0], g = x.isFunction(h);
                                                                                                                if (g || !(1 >= c || "string" != typeof h || x.support.checkClone) && Nt.test(h)) {
                                                                                                                  return this.each(function(r) {
                                                                                                                    var i = p.eq(r);
                                                                                                                    g && (e[0] = h.call(this, r, i.html())),
                                                                                                                    i.domManip(e, t, n)
                                                                                                                  })
                                                                                                                }
                                                                                                                if (c && (l = x.buildFragment(e, this[0].ownerDocument, !1, !n && this),
                                                                                                                r = l.firstChild,
                                                                                                                1 === l.childNodes.length && (l = r),
                                                                                                                r)) {
                                                                                                                  for (a = x.map(Ft(l, "script"), Ht),
                                                                                                                  o = a.length; c > u; u++) {
                                                                                                                    i = l,
                                                                                                                    u !== f && (i = x.clone(i, !0, !0),
                                                                                                                    o && x.merge(a, Ft(i, "script"))),
                                                                                                                    t.call(this[u], i, u)
                                                                                                                  }
                                                                                                                  if (o) {
                                                                                                                    for (s = a[a.length - 1].ownerDocument,
                                                                                                                      x.map(a, qt),
                                                                                                                      u = 0; o > u; u++) {
                                                                                                                        i = a[u],
                                                                                                                        kt.test(i.type || "") && !x._data(i, "globalEval") && x.contains(s, i) && (i.src ? x._evalUrl(i.src) : x.globalEval((i.text || i.textContent || i.innerHTML || "").replace(St, "")))
                                                                                                                      }
                                                                                                                    }
                                                                                                                    l = r = null
                                                                                                                  }
                                                                                                                  return this
                                                                                                                }
                                                                                                              });
                                                                                                              function Lt(e, t) {
                                                                                                                return x.nodeName(e, "table") && x.nodeName(1 === t.nodeType ? t : t.firstChild, "tr") ? e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody")) : e
                                                                                                              }
                                                                                                              function Ht(e) {
                                                                                                                return e.type = (null !== x.find.attr(e, "type")) + "/" + e.type,
                                                                                                                e
                                                                                                              }
                                                                                                              function qt(e) {
                                                                                                                var t = Et.exec(e.type);
                                                                                                                return t ? e.type = t[1] : e.removeAttribute("type"),
                                                                                                                e
                                                                                                              }
                                                                                                              function _t(e, t) {
                                                                                                                var n, r = 0;
                                                                                                                for (; null != (n = e[r]); r++) {
                                                                                                                  x._data(n, "globalEval", !t || x._data(t[r], "globalEval"))
                                                                                                                }
                                                                                                              }
                                                                                                              function Mt(e, t) {
                                                                                                                if (1 === t.nodeType && x.hasData(e)) {
                                                                                                                  var n, r, i, o = x._data(e), a = x._data(t, o), s = o.events;
                                                                                                                  if (s) {
                                                                                                                    delete a.handle,
                                                                                                                    a.events = {};
                                                                                                                    for (n in s) {
                                                                                                                      for (r = 0,
                                                                                                                        i = s[n].length; i > r; r++) {
                                                                                                                          x.event.add(t, n, s[n][r])
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                    a.data && (a.data = x.extend({}, a.data))
                                                                                                                  }
                                                                                                                }
                                                                                                                function Ot(e, t) {
                                                                                                                  var n, r, i;
                                                                                                                  if (1 === t.nodeType) {
                                                                                                                    if (n = t.nodeName.toLowerCase(),
                                                                                                                    !x.support.noCloneEvent && t[x.expando]) {
                                                                                                                      i = x._data(t);
                                                                                                                      for (r in i.events) {
                                                                                                                        x.removeEvent(t, r, i.handle)
                                                                                                                      }
                                                                                                                      t.removeAttribute(x.expando)
                                                                                                                    }
                                                                                                                    "script" === n && t.text !== e.text ? (Ht(t).text = e.text,
                                                                                                                    qt(t)) : "object" === n ? (t.parentNode && (t.outerHTML = e.outerHTML),
                                                                                                                    x.support.html5Clone && e.innerHTML && !x.trim(t.innerHTML) && (t.innerHTML = e.innerHTML)) : "input" === n && Ct.test(e.type) ? (t.defaultChecked = t.checked = e.checked,
                                                                                                                      t.value !== e.value && (t.value = e.value)) : "option" === n ? t.defaultSelected = t.selected = e.defaultSelected : ("input" === n || "textarea" === n) && (t.defaultValue = e.defaultValue)
                                                                                                                    }
                                                                                                                  }
                                                                                                                  x.each({
                                                                                                                    appendTo: "append",
                                                                                                                    prependTo: "prepend",
                                                                                                                    insertBefore: "before",
                                                                                                                    insertAfter: "after",
                                                                                                                    replaceAll: "replaceWith"
                                                                                                                  }, function(e, t) {
                                                                                                                    x.fn[e] = function(e) {
                                                                                                                      var n, r = 0, i = [], o = x(e), a = o.length - 1;
                                                                                                                      for (; a >= r; r++) {
                                                                                                                        n = r === a ? this : this.clone(!0),
                                                                                                                        x(o[r])[t](n),
                                                                                                                        h.apply(i, n.get())
                                                                                                                      }
                                                                                                                      return this.pushStack(i)
                                                                                                                    }
                                                                                                                  });
                                                                                                                  function Ft(e, n) {
                                                                                                                    var r, o, a = 0, s = typeof e.getElementsByTagName !== i ? e.getElementsByTagName(n || "*") : typeof e.querySelectorAll !== i ? e.querySelectorAll(n || "*") : t;
                                                                                                                    if (!s) {
                                                                                                                      for (s = [],
                                                                                                                        r = e.childNodes || e; null != (o = r[a]); a++) {
                                                                                                                          !n || x.nodeName(o, n) ? s.push(o) : x.merge(s, Ft(o, n))
                                                                                                                        }
                                                                                                                      }
                                                                                                                      return n === t || n && x.nodeName(e, n) ? x.merge([e], s) : s
                                                                                                                    }
                                                                                                                    function Bt(e) {
                                                                                                                      Ct.test(e.type) && (e.defaultChecked = e.checked)
                                                                                                                    }
                                                                                                                    x.extend({
                                                                                                                      clone: function(e, t, n) {
                                                                                                                        var r, i, o, a, s, l = x.contains(e.ownerDocument, e);
                                                                                                                        if (x.support.html5Clone || x.isXMLDoc(e) || !mt.test("<" + e.nodeName + ">") ? o = e.cloneNode(!0) : (Dt.innerHTML = e.outerHTML,
                                                                                                                          Dt.removeChild(o = Dt.firstChild)),
                                                                                                                          !(x.support.noCloneEvent && x.support.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || x.isXMLDoc(e))) {
                                                                                                                            for (r = Ft(o),
                                                                                                                            s = Ft(e),
                                                                                                                            a = 0; null != (i = s[a]); ++a) {
                                                                                                                              r[a] && Ot(i, r[a])
                                                                                                                            }
                                                                                                                          }
                                                                                                                          if (t) {
                                                                                                                            if (n) {
                                                                                                                              for (s = s || Ft(e),
                                                                                                                              r = r || Ft(o),
                                                                                                                              a = 0; null != (i = s[a]); a++) {
                                                                                                                                Mt(i, r[a])
                                                                                                                              }
                                                                                                                            } else {
                                                                                                                              Mt(e, o)
                                                                                                                            }
                                                                                                                          }
                                                                                                                          return r = Ft(o, "script"),
                                                                                                                          r.length > 0 && _t(r, !l && Ft(e, "script")),
                                                                                                                          r = s = i = null,
                                                                                                                          o
                                                                                                                        },
                                                                                                                        buildFragment: function(e, t, n, r) {
                                                                                                                          var i, o, a, s, l, u, c, p = e.length, f = dt(t), d = [], h = 0;
                                                                                                                          for (; p > h; h++) {
                                                                                                                            if (o = e[h],
                                                                                                                              o || 0 === o) {
                                                                                                                                if ("object" === x.type(o)) {
                                                                                                                                  x.merge(d, o.nodeType ? [o] : o)
                                                                                                                                } else {
                                                                                                                                  if (wt.test(o)) {
                                                                                                                                    s = s || f.appendChild(t.createElement("div")),
                                                                                                                                    l = (bt.exec(o) || ["", ""])[1].toLowerCase(),
                                                                                                                                    c = At[l] || At._default,
                                                                                                                                    s.innerHTML = c[1] + o.replace(vt, "<$1></$2>") + c[2],
                                                                                                                                    i = c[0];
                                                                                                                                    while (i--) {
                                                                                                                                      s = s.lastChild
                                                                                                                                    }
                                                                                                                                    if (!x.support.leadingWhitespace && yt.test(o) && d.push(t.createTextNode(yt.exec(o)[0])),
                                                                                                                                    !x.support.tbody) {
                                                                                                                                      o = "table" !== l || xt.test(o) ? "<table>" !== c[1] || xt.test(o) ? 0 : s : s.firstChild,
                                                                                                                                      i = o && o.childNodes.length;
                                                                                                                                      while (i--) {
                                                                                                                                        x.nodeName(u = o.childNodes[i], "tbody") && !u.childNodes.length && o.removeChild(u)
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    x.merge(d, s.childNodes),
                                                                                                                                    s.textContent = "";
                                                                                                                                    while (s.firstChild) {
                                                                                                                                      s.removeChild(s.firstChild)
                                                                                                                                    }
                                                                                                                                    s = f.lastChild
                                                                                                                                  } else {
                                                                                                                                    d.push(t.createTextNode(o))
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                            s && f.removeChild(s),
                                                                                                                            x.support.appendChecked || x.grep(Ft(d, "input"), Bt),
                                                                                                                            h = 0;
                                                                                                                            while (o = d[h++]) {
                                                                                                                              if ((!r || -1 === x.inArray(o, r)) && (a = x.contains(o.ownerDocument, o),
                                                                                                                              s = Ft(f.appendChild(o), "script"),
                                                                                                                              a && _t(s),
                                                                                                                              n)) {
                                                                                                                                i = 0;
                                                                                                                                while (o = s[i++]) {
                                                                                                                                  kt.test(o.type || "") && n.push(o)
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                            return s = null,
                                                                                                                            f
                                                                                                                          },
                                                                                                                          cleanData: function(e, t) {
                                                                                                                            var n, r, o, a, s = 0, l = x.expando, u = x.cache, c = x.support.deleteExpando, f = x.event.special;
                                                                                                                            for (; null != (n = e[s]); s++) {
                                                                                                                              if ((t || x.acceptData(n)) && (o = n[l],
                                                                                                                                a = o && u[o])) {
                                                                                                                                  if (a.events) {
                                                                                                                                    for (r in a.events) {
                                                                                                                                      f[r] ? x.event.remove(n, r) : x.removeEvent(n, r, a.handle)
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                  u[o] && (delete u[o],
                                                                                                                                    c ? delete n[l] : typeof n.removeAttribute !== i ? n.removeAttribute(l) : n[l] = null,
                                                                                                                                    p.push(o))
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              },
                                                                                                                              _evalUrl: function(e) {
                                                                                                                                return x.ajax({
                                                                                                                                  url: e,
                                                                                                                                  type: "GET",
                                                                                                                                  dataType: "script",
                                                                                                                                  async: !1,
                                                                                                                                  global: !1,
                                                                                                                                  "throws": !0
                                                                                                                                })
                                                                                                                              }
                                                                                                                            }),
                                                                                                                            x.fn.extend({
                                                                                                                              wrapAll: function(e) {
                                                                                                                                if (x.isFunction(e)) {
                                                                                                                                  return this.each(function(t) {
                                                                                                                                    x(this).wrapAll(e.call(this, t))
                                                                                                                                  })
                                                                                                                                }
                                                                                                                                if (this[0]) {
                                                                                                                                  var t = x(e, this[0].ownerDocument).eq(0).clone(!0);
                                                                                                                                  this[0].parentNode && t.insertBefore(this[0]),
                                                                                                                                  t.map(function() {
                                                                                                                                    var e = this;
                                                                                                                                    while (e.firstChild && 1 === e.firstChild.nodeType) {
                                                                                                                                      e = e.firstChild
                                                                                                                                    }
                                                                                                                                    return e
                                                                                                                                  }).append(this)
                                                                                                                                }
                                                                                                                                return this
                                                                                                                              },
                                                                                                                              wrapInner: function(e) {
                                                                                                                                return x.isFunction(e) ? this.each(function(t) {
                                                                                                                                  x(this).wrapInner(e.call(this, t))
                                                                                                                                }) : this.each(function() {
                                                                                                                                  var t = x(this)
                                                                                                                                  , n = t.contents();
                                                                                                                                  n.length ? n.wrapAll(e) : t.append(e)
                                                                                                                                })
                                                                                                                              },
                                                                                                                              wrap: function(e) {
                                                                                                                                var t = x.isFunction(e);
                                                                                                                                return this.each(function(n) {
                                                                                                                                  x(this).wrapAll(t ? e.call(this, n) : e)
                                                                                                                                })
                                                                                                                              },
                                                                                                                              unwrap: function() {
                                                                                                                                return this.parent().each(function() {
                                                                                                                                  x.nodeName(this, "body") || x(this).replaceWith(this.childNodes)
                                                                                                                                }).end()
                                                                                                                              }
                                                                                                                            });
                                                                                                                            var Pt, Rt, Wt, $t = /alpha\([^)]*\)/i, It = /opacity\s*=\s*([^)]*)/, zt = /^(top|right|bottom|left)$/, Xt = /^(none|table(?!-c[ea]).+)/, Ut = /^margin/, Vt = RegExp("^(" + w + ")(.*)$", "i"), Yt = RegExp("^(" + w + ")(?!px)[a-z%]+$", "i"), Jt = RegExp("^([+-])=(" + w + ")", "i"), Gt = {
                                                                                                                              BODY: "block"
                                                                                                                            }, Qt = {
                                                                                                                              position: "absolute",
                                                                                                                              visibility: "hidden",
                                                                                                                              display: "block"
                                                                                                                            }, Kt = {
                                                                                                                              letterSpacing: 0,
                                                                                                                              fontWeight: 400
                                                                                                                            }, Zt = ["Top", "Right", "Bottom", "Left"], en = ["Webkit", "O", "Moz", "ms"];
                                                                                                                            function tn(e, t) {
                                                                                                                              if (t in e) {
                                                                                                                                return t
                                                                                                                              }
                                                                                                                              var n = t.charAt(0).toUpperCase() + t.slice(1)
                                                                                                                              , r = t
                                                                                                                              , i = en.length;
                                                                                                                              while (i--) {
                                                                                                                                if (t = en[i] + n,
                                                                                                                                  t in e) {
                                                                                                                                    return t
                                                                                                                                  }
                                                                                                                                }
                                                                                                                                return r
                                                                                                                              }
                                                                                                                              function nn(e, t) {
                                                                                                                                return e = t || e,
                                                                                                                                "none" === x.css(e, "display") || !x.contains(e.ownerDocument, e)
                                                                                                                              }
                                                                                                                              function rn(e, t) {
                                                                                                                                var n, r, i, o = [], a = 0, s = e.length;
                                                                                                                                for (; s > a; a++) {
                                                                                                                                  r = e[a],
                                                                                                                                  r.style && (o[a] = x._data(r, "olddisplay"),
                                                                                                                                  n = r.style.display,
                                                                                                                                  t ? (o[a] || "none" !== n || (r.style.display = ""),
                                                                                                                                  "" === r.style.display && nn(r) && (o[a] = x._data(r, "olddisplay", ln(r.nodeName)))) : o[a] || (i = nn(r),
                                                                                                                                  (n && "none" !== n || !i) && x._data(r, "olddisplay", i ? n : x.css(r, "display"))))
                                                                                                                                }
                                                                                                                                for (a = 0; s > a; a++) {
                                                                                                                                  r = e[a],
                                                                                                                                  r.style && (t && "none" !== r.style.display && "" !== r.style.display || (r.style.display = t ? o[a] || "" : "none"))
                                                                                                                                }
                                                                                                                                return e
                                                                                                                              }
                                                                                                                              x.fn.extend({
                                                                                                                                css: function(e, n) {
                                                                                                                                  return x.access(this, function(e, n, r) {
                                                                                                                                    var i, o, a = {}, s = 0;
                                                                                                                                    if (x.isArray(n)) {
                                                                                                                                      for (o = Rt(e),
                                                                                                                                      i = n.length; i > s; s++) {
                                                                                                                                        a[n[s]] = x.css(e, n[s], !1, o)
                                                                                                                                      }
                                                                                                                                      return a
                                                                                                                                    }
                                                                                                                                    return r !== t ? x.style(e, n, r) : x.css(e, n)
                                                                                                                                  }, e, n, arguments.length > 1)
                                                                                                                                },
                                                                                                                                show: function() {
                                                                                                                                  return rn(this, !0)
                                                                                                                                },
                                                                                                                                hide: function() {
                                                                                                                                  return rn(this)
                                                                                                                                },
                                                                                                                                toggle: function(e) {
                                                                                                                                  return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
                                                                                                                                    nn(this) ? x(this).show() : x(this).hide()
                                                                                                                                  })
                                                                                                                                }
                                                                                                                              }),
                                                                                                                              x.extend({
                                                                                                                                cssHooks: {
                                                                                                                                  opacity: {
                                                                                                                                    get: function(e, t) {
                                                                                                                                      if (t) {
                                                                                                                                        var n = Wt(e, "opacity");
                                                                                                                                        return "" === n ? "1" : n
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                },
                                                                                                                                cssNumber: {
                                                                                                                                  columnCount: !0,
                                                                                                                                  fillOpacity: !0,
                                                                                                                                  fontWeight: !0,
                                                                                                                                  lineHeight: !0,
                                                                                                                                  opacity: !0,
                                                                                                                                  order: !0,
                                                                                                                                  orphans: !0,
                                                                                                                                  widows: !0,
                                                                                                                                  zIndex: !0,
                                                                                                                                  zoom: !0
                                                                                                                                },
                                                                                                                                cssProps: {
                                                                                                                                  "float": x.support.cssFloat ? "cssFloat" : "styleFloat"
                                                                                                                                },
                                                                                                                                style: function(e, n, r, i) {
                                                                                                                                  if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                                                                                                                                    var o, a, s, l = x.camelCase(n), u = e.style;
                                                                                                                                    if (n = x.cssProps[l] || (x.cssProps[l] = tn(u, l)),
                                                                                                                                    s = x.cssHooks[n] || x.cssHooks[l],
                                                                                                                                    r === t) {
                                                                                                                                      return s && "get"in s && (o = s.get(e, !1, i)) !== t ? o : u[n]
                                                                                                                                    }
                                                                                                                                    if (a = typeof r,
                                                                                                                                      "string" === a && (o = Jt.exec(r)) && (r = (o[1] + 1) * o[2] + parseFloat(x.css(e, n)),
                                                                                                                                      a = "number"),
                                                                                                                                      !(null == r || "number" === a && isNaN(r) || ("number" !== a || x.cssNumber[l] || (r += "px"),
                                                                                                                                      x.support.clearCloneStyle || "" !== r || 0 !== n.indexOf("background") || (u[n] = "inherit"),
                                                                                                                                      s && "set"in s && (r = s.set(e, r, i)) === t))) {
                                                                                                                                        try {
                                                                                                                                          u[n] = r
                                                                                                                                        } catch (c) {}
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  },
                                                                                                                                  css: function(e, n, r, i) {
                                                                                                                                    var o, a, s, l = x.camelCase(n);
                                                                                                                                    return n = x.cssProps[l] || (x.cssProps[l] = tn(e.style, l)),
                                                                                                                                    s = x.cssHooks[n] || x.cssHooks[l],
                                                                                                                                    s && "get"in s && (a = s.get(e, !0, r)),
                                                                                                                                    a === t && (a = Wt(e, n, i)),
                                                                                                                                    "normal" === a && n in Kt && (a = Kt[n]),
                                                                                                                                    "" === r || r ? (o = parseFloat(a),
                                                                                                                                    r === !0 || x.isNumeric(o) ? o || 0 : a) : a
                                                                                                                                  }
                                                                                                                                }),
                                                                                                                                e.getComputedStyle ? (Rt = function(t) {
                                                                                                                                  return e.getComputedStyle(t, null)
                                                                                                                                }
                                                                                                                                ,
                                                                                                                                Wt = function(e, n, r) {
                                                                                                                                  var i, o, a, s = r || Rt(e), l = s ? s.getPropertyValue(n) || s[n] : t, u = e.style;
                                                                                                                                  return s && ("" !== l || x.contains(e.ownerDocument, e) || (l = x.style(e, n)),
                                                                                                                                  Yt.test(l) && Ut.test(n) && (i = u.width,
                                                                                                                                    o = u.minWidth,
                                                                                                                                    a = u.maxWidth,
                                                                                                                                    u.minWidth = u.maxWidth = u.width = l,
                                                                                                                                    l = s.width,
                                                                                                                                    u.width = i,
                                                                                                                                    u.minWidth = o,
                                                                                                                                    u.maxWidth = a)),
                                                                                                                                    l
                                                                                                                                  }
                                                                                                                                ) : a.documentElement.currentStyle && (Rt = function(e) {
                                                                                                                                  return e.currentStyle
                                                                                                                                }
                                                                                                                                ,
                                                                                                                                Wt = function(e, n, r) {
                                                                                                                                  var i, o, a, s = r || Rt(e), l = s ? s[n] : t, u = e.style;
                                                                                                                                  return null == l && u && u[n] && (l = u[n]),
                                                                                                                                  Yt.test(l) && !zt.test(n) && (i = u.left,
                                                                                                                                    o = e.runtimeStyle,
                                                                                                                                    a = o && o.left,
                                                                                                                                    a && (o.left = e.currentStyle.left),
                                                                                                                                    u.left = "fontSize" === n ? "1em" : l,
                                                                                                                                    l = u.pixelLeft + "px",
                                                                                                                                    u.left = i,
                                                                                                                                    a && (o.left = a)),
                                                                                                                                    "" === l ? "auto" : l
                                                                                                                                  }
                                                                                                                                );
                                                                                                                                function on(e, t, n) {
                                                                                                                                  var r = Vt.exec(t);
                                                                                                                                  return r ? Math.max(0, r[1] - (n || 0)) + (r[2] || "px") : t
                                                                                                                                }
                                                                                                                                function an(e, t, n, r, i) {
                                                                                                                                  var o = n === (r ? "border" : "content") ? 4 : "width" === t ? 1 : 0
                                                                                                                                  , a = 0;
                                                                                                                                  for (; 4 > o; o += 2) {
                                                                                                                                    "margin" === n && (a += x.css(e, n + Zt[o], !0, i)),
                                                                                                                                    r ? ("content" === n && (a -= x.css(e, "padding" + Zt[o], !0, i)),
                                                                                                                                    "margin" !== n && (a -= x.css(e, "border" + Zt[o] + "Width", !0, i))) : (a += x.css(e, "padding" + Zt[o], !0, i),
                                                                                                                                    "padding" !== n && (a += x.css(e, "border" + Zt[o] + "Width", !0, i)))
                                                                                                                                  }
                                                                                                                                  return a
                                                                                                                                }
                                                                                                                                function sn(e, t, n) {
                                                                                                                                  var r = !0
                                                                                                                                  , i = "width" === t ? e.offsetWidth : e.offsetHeight
                                                                                                                                  , o = Rt(e)
                                                                                                                                  , a = x.support.boxSizing && "border-box" === x.css(e, "boxSizing", !1, o);
                                                                                                                                  if (0 >= i || null == i) {
                                                                                                                                    if (i = Wt(e, t, o),
                                                                                                                                    (0 > i || null == i) && (i = e.style[t]),
                                                                                                                                    Yt.test(i)) {
                                                                                                                                      return i
                                                                                                                                    }
                                                                                                                                    r = a && (x.support.boxSizingReliable || i === e.style[t]),
                                                                                                                                    i = parseFloat(i) || 0
                                                                                                                                  }
                                                                                                                                  return i + an(e, t, n || (a ? "border" : "content"), r, o) + "px"
                                                                                                                                }
                                                                                                                                function ln(e) {
                                                                                                                                  var t = a
                                                                                                                                  , n = Gt[e];
                                                                                                                                  return n || (n = un(e, t),
                                                                                                                                  "none" !== n && n || (Pt = (Pt || x("<iframe frameborder='0' width='0' height='0'/>").css("cssText", "display:block !important")).appendTo(t.documentElement),
                                                                                                                                  t = (Pt[0].contentWindow || Pt[0].contentDocument).document,
                                                                                                                                  t.write("<!doctype html><html><body>"),
                                                                                                                                  t.close(),
                                                                                                                                  n = un(e, t),
                                                                                                                                  Pt.detach()),
                                                                                                                                  Gt[e] = n),
                                                                                                                                  n
                                                                                                                                }
                                                                                                                                function un(e, t) {
                                                                                                                                  var n = x(t.createElement(e)).appendTo(t.body)
                                                                                                                                  , r = x.css(n[0], "display");
                                                                                                                                  return n.remove(),
                                                                                                                                  r
                                                                                                                                }
                                                                                                                                x.each(["height", "width"], function(e, n) {
                                                                                                                                  x.cssHooks[n] = {
                                                                                                                                    get: function(e, r, i) {
                                                                                                                                      return r ? 0 === e.offsetWidth && Xt.test(x.css(e, "display")) ? x.swap(e, Qt, function() {
                                                                                                                                        return sn(e, n, i)
                                                                                                                                      }) : sn(e, n, i) : t
                                                                                                                                    },
                                                                                                                                    set: function(e, t, r) {
                                                                                                                                      var i = r && Rt(e);
                                                                                                                                      return on(e, t, r ? an(e, n, r, x.support.boxSizing && "border-box" === x.css(e, "boxSizing", !1, i), i) : 0)
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }),
                                                                                                                                x.support.opacity || (x.cssHooks.opacity = {
                                                                                                                                  get: function(e, t) {
                                                                                                                                    return It.test((t && e.currentStyle ? e.currentStyle.filter : e.style.filter) || "") ? 0.01 * parseFloat(RegExp.$1) + "" : t ? "1" : ""
                                                                                                                                  },
                                                                                                                                  set: function(e, t) {
                                                                                                                                    var n = e.style
                                                                                                                                    , r = e.currentStyle
                                                                                                                                    , i = x.isNumeric(t) ? "alpha(opacity=" + 100 * t + ")" : ""
                                                                                                                                    , o = r && r.filter || n.filter || "";
                                                                                                                                    n.zoom = 1,
                                                                                                                                    (t >= 1 || "" === t) && "" === x.trim(o.replace($t, "")) && n.removeAttribute && (n.removeAttribute("filter"),
                                                                                                                                    "" === t || r && !r.filter) || (n.filter = $t.test(o) ? o.replace($t, i) : o + " " + i)
                                                                                                                                  }
                                                                                                                                }),
                                                                                                                                x(function() {
                                                                                                                                  x.support.reliableMarginRight || (x.cssHooks.marginRight = {
                                                                                                                                    get: function(e, n) {
                                                                                                                                      return n ? x.swap(e, {
                                                                                                                                        display: "inline-block"
                                                                                                                                      }, Wt, [e, "marginRight"]) : t
                                                                                                                                    }
                                                                                                                                  }),
                                                                                                                                  !x.support.pixelPosition && x.fn.position && x.each(["top", "left"], function(e, n) {
                                                                                                                                    x.cssHooks[n] = {
                                                                                                                                      get: function(e, r) {
                                                                                                                                        return r ? (r = Wt(e, n),
                                                                                                                                        Yt.test(r) ? x(e).position()[n] + "px" : r) : t
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  })
                                                                                                                                }),
                                                                                                                                x.expr && x.expr.filters && (x.expr.filters.hidden = function(e) {
                                                                                                                                  return 0 >= e.offsetWidth && 0 >= e.offsetHeight || !x.support.reliableHiddenOffsets && "none" === (e.style && e.style.display || x.css(e, "display"))
                                                                                                                                }
                                                                                                                                ,
                                                                                                                                x.expr.filters.visible = function(e) {
                                                                                                                                  return !x.expr.filters.hidden(e)
                                                                                                                                }
                                                                                                                              ),
                                                                                                                              x.each({
                                                                                                                                margin: "",
                                                                                                                                padding: "",
                                                                                                                                border: "Width"
                                                                                                                              }, function(e, t) {
                                                                                                                                x.cssHooks[e + t] = {
                                                                                                                                  expand: function(n) {
                                                                                                                                    var r = 0
                                                                                                                                    , i = {}
                                                                                                                                    , o = "string" == typeof n ? n.split(" ") : [n];
                                                                                                                                    for (; 4 > r; r++) {
                                                                                                                                      i[e + Zt[r] + t] = o[r] || o[r - 2] || o[0]
                                                                                                                                    }
                                                                                                                                    return i
                                                                                                                                  }
                                                                                                                                },
                                                                                                                                Ut.test(e) || (x.cssHooks[e + t].set = on)
                                                                                                                              });
                                                                                                                              var cn = /%20/g
                                                                                                                              , pn = /\[\]$/
                                                                                                                              , fn = /\r?\n/g
                                                                                                                              , dn = /^(?:submit|button|image|reset|file)$/i
                                                                                                                              , hn = /^(?:input|select|textarea|keygen)/i;
                                                                                                                              x.fn.extend({
                                                                                                                                serialize: function() {
                                                                                                                                  return x.param(this.serializeArray())
                                                                                                                                },
                                                                                                                                serializeArray: function() {
                                                                                                                                  return this.map(function() {
                                                                                                                                    var e = x.prop(this, "elements");
                                                                                                                                    return e ? x.makeArray(e) : this
                                                                                                                                  }).filter(function() {
                                                                                                                                    var e = this.type;
                                                                                                                                    return this.name && !x(this).is(":disabled") && hn.test(this.nodeName) && !dn.test(e) && (this.checked || !Ct.test(e))
                                                                                                                                  }).map(function(e, t) {
                                                                                                                                    var n = x(this).val();
                                                                                                                                    return null == n ? null : x.isArray(n) ? x.map(n, function(e) {
                                                                                                                                      return {
                                                                                                                                        name: t.name,
                                                                                                                                        value: e.replace(fn, "\r\n")
                                                                                                                                      }
                                                                                                                                    }) : {
                                                                                                                                      name: t.name,
                                                                                                                                      value: n.replace(fn, "\r\n")
                                                                                                                                    }
                                                                                                                                  }).get()
                                                                                                                                }
                                                                                                                              }),
                                                                                                                              x.param = function(e, n) {
                                                                                                                                var r, i = [], o = function(e, t) {
                                                                                                                                  t = x.isFunction(t) ? t() : null == t ? "" : t,
                                                                                                                                  i[i.length] = encodeURIComponent(e) + "=" + encodeURIComponent(t)
                                                                                                                                };
                                                                                                                                if (n === t && (n = x.ajaxSettings && x.ajaxSettings.traditional),
                                                                                                                                x.isArray(e) || e.jquery && !x.isPlainObject(e)) {
                                                                                                                                  x.each(e, function() {
                                                                                                                                    o(this.name, this.value)
                                                                                                                                  })
                                                                                                                                } else {
                                                                                                                                  for (r in e) {
                                                                                                                                    gn(r, e[r], n, o)
                                                                                                                                  }
                                                                                                                                }
                                                                                                                                return i.join("&").replace(cn, "+")
                                                                                                                              }
                                                                                                                              ;
                                                                                                                              function gn(e, t, n, r) {
                                                                                                                                var i;
                                                                                                                                if (x.isArray(t)) {
                                                                                                                                  x.each(t, function(t, i) {
                                                                                                                                    n || pn.test(e) ? r(e, i) : gn(e + "[" + ("object" == typeof i ? t : "") + "]", i, n, r)
                                                                                                                                  })
                                                                                                                                } else {
                                                                                                                                  if (n || "object" !== x.type(t)) {
                                                                                                                                    r(e, t)
                                                                                                                                  } else {
                                                                                                                                    for (i in t) {
                                                                                                                                      gn(e + "[" + i + "]", t[i], n, r)
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                              x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(e, t) {
                                                                                                                                x.fn[t] = function(e, n) {
                                                                                                                                  return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t)
                                                                                                                                }
                                                                                                                              }),
                                                                                                                              x.fn.extend({
                                                                                                                                hover: function(e, t) {
                                                                                                                                  return this.mouseenter(e).mouseleave(t || e)
                                                                                                                                },
                                                                                                                                bind: function(e, t, n) {
                                                                                                                                  return this.on(e, null, t, n)
                                                                                                                                },
                                                                                                                                unbind: function(e, t) {
                                                                                                                                  return this.off(e, null, t)
                                                                                                                                },
                                                                                                                                delegate: function(e, t, n, r) {
                                                                                                                                  return this.on(t, e, n, r)
                                                                                                                                },
                                                                                                                                undelegate: function(e, t, n) {
                                                                                                                                  return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n)
                                                                                                                                }
                                                                                                                              });
                                                                                                                              var mn, yn, vn = x.now(), bn = /\?/, xn = /#.*$/, wn = /([?&])_=[^&]*/, Tn = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, Cn = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Nn = /^(?:GET|HEAD)$/, kn = /^\/\//, En = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, Sn = x.fn.load, An = {}, jn = {}, Dn = "*/".concat("*");
                                                                                                                              try {
                                                                                                                                yn = o.href
                                                                                                                              } catch (Ln) {
                                                                                                                                yn = a.createElement("a"),
                                                                                                                                yn.href = "",
                                                                                                                                yn = yn.href
                                                                                                                              }
                                                                                                                              mn = En.exec(yn.toLowerCase()) || [];
                                                                                                                              function Hn(e) {
                                                                                                                                return function(t, n) {
                                                                                                                                  "string" != typeof t && (n = t,
                                                                                                                                    t = "*");
                                                                                                                                    var r, i = 0, o = t.toLowerCase().match(T) || [];
                                                                                                                                    if (x.isFunction(n)) {
                                                                                                                                      while (r = o[i++]) {
                                                                                                                                        "+" === r[0] ? (r = r.slice(1) || "*",
                                                                                                                                        (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n)
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                                function qn(e, n, r, i) {
                                                                                                                                  var o = {}
                                                                                                                                  , a = e === jn;
                                                                                                                                  function s(l) {
                                                                                                                                    var u;
                                                                                                                                    return o[l] = !0,
                                                                                                                                    x.each(e[l] || [], function(e, l) {
                                                                                                                                      var c = l(n, r, i);
                                                                                                                                      return "string" != typeof c || a || o[c] ? a ? !(u = c) : t : (n.dataTypes.unshift(c),
                                                                                                                                      s(c),
                                                                                                                                      !1)
                                                                                                                                    }),
                                                                                                                                    u
                                                                                                                                  }
                                                                                                                                  return s(n.dataTypes[0]) || !o["*"] && s("*")
                                                                                                                                }
                                                                                                                                function _n(e, n) {
                                                                                                                                  var r, i, o = x.ajaxSettings.flatOptions || {};
                                                                                                                                  for (i in n) {
                                                                                                                                    n[i] !== t && ((o[i] ? e : r || (r = {}))[i] = n[i])
                                                                                                                                  }
                                                                                                                                  return r && x.extend(!0, e, r),
                                                                                                                                  e
                                                                                                                                }
                                                                                                                                x.fn.load = function(e, n, r) {
                                                                                                                                  if ("string" != typeof e && Sn) {
                                                                                                                                    return Sn.apply(this, arguments)
                                                                                                                                  }
                                                                                                                                  var i, o, a, s = this, l = e.indexOf(" ");
                                                                                                                                  return l >= 0 && (i = e.slice(l, e.length),
                                                                                                                                  e = e.slice(0, l)),
                                                                                                                                  x.isFunction(n) ? (r = n,
                                                                                                                                    n = t) : n && "object" == typeof n && (a = "POST"),
                                                                                                                                    s.length > 0 && x.ajax({
                                                                                                                                      url: e,
                                                                                                                                      type: a,
                                                                                                                                      dataType: "html",
                                                                                                                                      data: n
                                                                                                                                    }).done(function(e) {
                                                                                                                                      o = arguments,
                                                                                                                                      s.html(i ? x("<div>").append(x.parseHTML(e)).find(i) : e)
                                                                                                                                    }).complete(r && function(e, t) {
                                                                                                                                      s.each(r, o || [e.responseText, t, e])
                                                                                                                                    }
                                                                                                                                  ),
                                                                                                                                  this
                                                                                                                                }
                                                                                                                                ,
                                                                                                                                x.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(e, t) {
                                                                                                                                  x.fn[t] = function(e) {
                                                                                                                                    return this.on(t, e)
                                                                                                                                  }
                                                                                                                                }),
                                                                                                                                x.extend({
                                                                                                                                  active: 0,
                                                                                                                                  lastModified: {},
                                                                                                                                  etag: {},
                                                                                                                                  ajaxSettings: {
                                                                                                                                    url: yn,
                                                                                                                                    type: "GET",
                                                                                                                                    isLocal: Cn.test(mn[1]),
                                                                                                                                    global: !0,
                                                                                                                                    processData: !0,
                                                                                                                                    async: !0,
                                                                                                                                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                                                                                                                                    accepts: {
                                                                                                                                      "*": Dn,
                                                                                                                                      text: "text/plain",
                                                                                                                                      html: "text/html",
                                                                                                                                      xml: "application/xml, text/xml",
                                                                                                                                      json: "application/json, text/javascript"
                                                                                                                                    },
                                                                                                                                    contents: {
                                                                                                                                      xml: /xml/,
                                                                                                                                      html: /html/,
                                                                                                                                      json: /json/
                                                                                                                                    },
                                                                                                                                    responseFields: {
                                                                                                                                      xml: "responseXML",
                                                                                                                                      text: "responseText",
                                                                                                                                      json: "responseJSON"
                                                                                                                                    },
                                                                                                                                    converters: {
                                                                                                                                      "* text": String,
                                                                                                                                      "text html": !0,
                                                                                                                                      "text json": x.parseJSON,
                                                                                                                                      "text xml": x.parseXML
                                                                                                                                    },
                                                                                                                                    flatOptions: {
                                                                                                                                      url: !0,
                                                                                                                                      context: !0
                                                                                                                                    }
                                                                                                                                  },
                                                                                                                                  ajaxSetup: function(e, t) {
                                                                                                                                    return t ? _n(_n(e, x.ajaxSettings), t) : _n(x.ajaxSettings, e)
                                                                                                                                  },
                                                                                                                                  ajaxPrefilter: Hn(An),
                                                                                                                                  ajaxTransport: Hn(jn),
                                                                                                                                  ajax: function(e, n) {
                                                                                                                                    "object" == typeof e && (n = e,
                                                                                                                                      e = t),
                                                                                                                                      n = n || {};
                                                                                                                                      var r, i, o, a, s, l, u, c, p = x.ajaxSetup({}, n), f = p.context || p, d = p.context && (f.nodeType || f.jquery) ? x(f) : x.event, h = x.Deferred(), g = x.Callbacks("once memory"), m = p.statusCode || {}, y = {}, v = {}, b = 0, w = "canceled", C = {
                                                                                                                                        readyState: 0,
                                                                                                                                        getResponseHeader: function(e) {
                                                                                                                                          var t;
                                                                                                                                          if (2 === b) {
                                                                                                                                            if (!c) {
                                                                                                                                              c = {};
                                                                                                                                              while (t = Tn.exec(a)) {
                                                                                                                                                c[t[1].toLowerCase()] = t[2]
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                            t = c[e.toLowerCase()]
                                                                                                                                          }
                                                                                                                                          return null == t ? null : t
                                                                                                                                        },
                                                                                                                                        getAllResponseHeaders: function() {
                                                                                                                                          return 2 === b ? a : null
                                                                                                                                        },
                                                                                                                                        setRequestHeader: function(e, t) {
                                                                                                                                          var n = e.toLowerCase();
                                                                                                                                          return b || (e = v[n] = v[n] || e,
                                                                                                                                            y[e] = t),
                                                                                                                                            this
                                                                                                                                          },
                                                                                                                                          overrideMimeType: function(e) {
                                                                                                                                            return b || (p.mimeType = e),
                                                                                                                                            this
                                                                                                                                          },
                                                                                                                                          statusCode: function(e) {
                                                                                                                                            var t;
                                                                                                                                            if (e) {
                                                                                                                                              if (2 > b) {
                                                                                                                                                for (t in e) {
                                                                                                                                                  m[t] = [m[t], e[t]]
                                                                                                                                                }
                                                                                                                                              } else {
                                                                                                                                                C.always(e[C.status])
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                            return this
                                                                                                                                          },
                                                                                                                                          abort: function(e) {
                                                                                                                                            var t = e || w;
                                                                                                                                            return u && u.abort(t),
                                                                                                                                            k(0, t),
                                                                                                                                            this
                                                                                                                                          }
                                                                                                                                        };
                                                                                                                                        if (h.promise(C).complete = g.add,
                                                                                                                                        C.success = C.done,
                                                                                                                                        C.error = C.fail,
                                                                                                                                        p.url = ((e || p.url || yn) + "").replace(xn, "").replace(kn, mn[1] + "//"),
                                                                                                                                        p.type = n.method || n.type || p.method || p.type,
                                                                                                                                        p.dataTypes = x.trim(p.dataType || "*").toLowerCase().match(T) || [""],
                                                                                                                                        null == p.crossDomain && (r = En.exec(p.url.toLowerCase()),
                                                                                                                                        p.crossDomain = !(!r || r[1] === mn[1] && r[2] === mn[2] && (r[3] || ("http:" === r[1] ? "80" : "443")) === (mn[3] || ("http:" === mn[1] ? "80" : "443")))),
                                                                                                                                        p.data && p.processData && "string" != typeof p.data && (p.data = x.param(p.data, p.traditional)),
                                                                                                                                        qn(An, p, n, C),
                                                                                                                                        2 === b) {
                                                                                                                                          return C
                                                                                                                                        }
                                                                                                                                        l = p.global,
                                                                                                                                        l && 0 === x.active++ && x.event.trigger("ajaxStart"),
                                                                                                                                        p.type = p.type.toUpperCase(),
                                                                                                                                        p.hasContent = !Nn.test(p.type),
                                                                                                                                        o = p.url,
                                                                                                                                        p.hasContent || (p.data && (o = p.url += (bn.test(o) ? "&" : "?") + p.data,
                                                                                                                                        delete p.data),
                                                                                                                                        p.cache === !1 && (p.url = wn.test(o) ? o.replace(wn, "$1_=" + vn++) : o + (bn.test(o) ? "&" : "?") + "_=" + vn++)),
                                                                                                                                        p.ifModified && (x.lastModified[o] && C.setRequestHeader("If-Modified-Since", x.lastModified[o]),
                                                                                                                                        x.etag[o] && C.setRequestHeader("If-None-Match", x.etag[o])),
                                                                                                                                        (p.data && p.hasContent && p.contentType !== !1 || n.contentType) && C.setRequestHeader("Content-Type", p.contentType),
                                                                                                                                        C.setRequestHeader("Accept", p.dataTypes[0] && p.accepts[p.dataTypes[0]] ? p.accepts[p.dataTypes[0]] + ("*" !== p.dataTypes[0] ? ", " + Dn + "; q=0.01" : "") : p.accepts["*"]);
                                                                                                                                        for (i in p.headers) {
                                                                                                                                          C.setRequestHeader(i, p.headers[i])
                                                                                                                                        }
                                                                                                                                        if (p.beforeSend && (p.beforeSend.call(f, C, p) === !1 || 2 === b)) {
                                                                                                                                          return C.abort()
                                                                                                                                        }
                                                                                                                                        w = "abort";
                                                                                                                                        for (i in {
                                                                                                                                          success: 1,
                                                                                                                                          error: 1,
                                                                                                                                          complete: 1
                                                                                                                                        }) {
                                                                                                                                          C[i](p[i])
                                                                                                                                        }
                                                                                                                                        if (u = qn(jn, p, n, C)) {
                                                                                                                                          C.readyState = 1,
                                                                                                                                          l && d.trigger("ajaxSend", [C, p]),
                                                                                                                                          p.async && p.timeout > 0 && (s = setTimeout(function() {
                                                                                                                                            C.abort("timeout")
                                                                                                                                          }, p.timeout));
                                                                                                                                          try {
                                                                                                                                            b = 1,
                                                                                                                                            u.send(y, k)
                                                                                                                                          } catch (N) {
                                                                                                                                            if (!(2 > b)) {
                                                                                                                                              throw N
                                                                                                                                            }
                                                                                                                                            k(-1, N)
                                                                                                                                          }
                                                                                                                                        } else {
                                                                                                                                          k(-1, "No Transport")
                                                                                                                                        }
                                                                                                                                        function k(e, n, r, i) {
                                                                                                                                          var c, y, v, w, T, N = n;
                                                                                                                                          2 !== b && (b = 2,
                                                                                                                                            s && clearTimeout(s),
                                                                                                                                            u = t,
                                                                                                                                            a = i || "",
                                                                                                                                            C.readyState = e > 0 ? 4 : 0,
                                                                                                                                            c = e >= 200 && 300 > e || 304 === e,
                                                                                                                                            r && (w = Mn(p, C, r)),
                                                                                                                                            w = On(p, w, C, c),
                                                                                                                                            c ? (p.ifModified && (T = C.getResponseHeader("Last-Modified"),
                                                                                                                                            T && (x.lastModified[o] = T),
                                                                                                                                            T = C.getResponseHeader("etag"),
                                                                                                                                            T && (x.etag[o] = T)),
                                                                                                                                            204 === e || "HEAD" === p.type ? N = "nocontent" : 304 === e ? N = "notmodified" : (N = w.state,
                                                                                                                                              y = w.data,
                                                                                                                                              v = w.error,
                                                                                                                                              c = !v)) : (v = N,
                                                                                                                                                (e || !N) && (N = "error",
                                                                                                                                                0 > e && (e = 0))),
                                                                                                                                                C.status = e,
                                                                                                                                                C.statusText = (n || N) + "",
                                                                                                                                                c ? h.resolveWith(f, [y, N, C]) : h.rejectWith(f, [C, N, v]),
                                                                                                                                                C.statusCode(m),
                                                                                                                                                m = t,
                                                                                                                                                l && d.trigger(c ? "ajaxSuccess" : "ajaxError", [C, p, c ? y : v]),
                                                                                                                                                g.fireWith(f, [C, N]),
                                                                                                                                                l && (d.trigger("ajaxComplete", [C, p]),
                                                                                                                                                --x.active || x.event.trigger("ajaxStop")))
                                                                                                                                              }
                                                                                                                                              return C
                                                                                                                                            },
                                                                                                                                            getJSON: function(e, t, n) {
                                                                                                                                              return x.get(e, t, n, "json")
                                                                                                                                            },
                                                                                                                                            getScript: function(e, n) {
                                                                                                                                              return x.get(e, t, n, "script")
                                                                                                                                            }
                                                                                                                                          }),
                                                                                                                                          x.each(["get", "post"], function(e, n) {
                                                                                                                                            x[n] = function(e, r, i, o) {
                                                                                                                                              return x.isFunction(r) && (o = o || i,
                                                                                                                                                i = r,
                                                                                                                                                r = t),
                                                                                                                                                x.ajax({
                                                                                                                                                  url: e,
                                                                                                                                                  type: n,
                                                                                                                                                  dataType: o,
                                                                                                                                                  data: r,
                                                                                                                                                  success: i
                                                                                                                                                })
                                                                                                                                              }
                                                                                                                                            });
                                                                                                                                            function Mn(e, n, r) {
                                                                                                                                              var i, o, a, s, l = e.contents, u = e.dataTypes;
                                                                                                                                              while ("*" === u[0]) {
                                                                                                                                                u.shift(),
                                                                                                                                                o === t && (o = e.mimeType || n.getResponseHeader("Content-Type"))
                                                                                                                                              }
                                                                                                                                              if (o) {
                                                                                                                                                for (s in l) {
                                                                                                                                                  if (l[s] && l[s].test(o)) {
                                                                                                                                                    u.unshift(s);
                                                                                                                                                    break
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              if (u[0]in r) {
                                                                                                                                                a = u[0]
                                                                                                                                              } else {
                                                                                                                                                for (s in r) {
                                                                                                                                                  if (!u[0] || e.converters[s + " " + u[0]]) {
                                                                                                                                                    a = s;
                                                                                                                                                    break
                                                                                                                                                  }
                                                                                                                                                  i || (i = s)
                                                                                                                                                }
                                                                                                                                                a = a || i
                                                                                                                                              }
                                                                                                                                              return a ? (a !== u[0] && u.unshift(a),
                                                                                                                                              r[a]) : t
                                                                                                                                            }
                                                                                                                                            function On(e, t, n, r) {
                                                                                                                                              var i, o, a, s, l, u = {}, c = e.dataTypes.slice();
                                                                                                                                              if (c[1]) {
                                                                                                                                                for (a in e.converters) {
                                                                                                                                                  u[a.toLowerCase()] = e.converters[a]
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              o = c.shift();
                                                                                                                                              while (o) {
                                                                                                                                                if (e.responseFields[o] && (n[e.responseFields[o]] = t),
                                                                                                                                                !l && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)),
                                                                                                                                                l = o,
                                                                                                                                                o = c.shift()) {
                                                                                                                                                  if ("*" === o) {
                                                                                                                                                    o = l
                                                                                                                                                  } else {
                                                                                                                                                    if ("*" !== l && l !== o) {
                                                                                                                                                      if (a = u[l + " " + o] || u["* " + o],
                                                                                                                                                      !a) {
                                                                                                                                                        for (i in u) {
                                                                                                                                                          if (s = i.split(" "),
                                                                                                                                                          s[1] === o && (a = u[l + " " + s[0]] || u["* " + s[0]])) {
                                                                                                                                                            a === !0 ? a = u[i] : u[i] !== !0 && (o = s[0],
                                                                                                                                                              c.unshift(s[1]));
                                                                                                                                                              break
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        if (a !== !0) {
                                                                                                                                                          if (a && e["throws"]) {
                                                                                                                                                            t = a(t)
                                                                                                                                                          } else {
                                                                                                                                                            try {
                                                                                                                                                              t = a(t)
                                                                                                                                                            } catch (p) {
                                                                                                                                                              return {
                                                                                                                                                                state: "parsererror",
                                                                                                                                                                error: a ? p : "No conversion from " + l + " to " + o
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                                return {
                                                                                                                                                  state: "success",
                                                                                                                                                  data: t
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              x.ajaxSetup({
                                                                                                                                                accepts: {
                                                                                                                                                  script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
                                                                                                                                                },
                                                                                                                                                contents: {
                                                                                                                                                  script: /(?:java|ecma)script/
                                                                                                                                                },
                                                                                                                                                converters: {
                                                                                                                                                  "text script": function(e) {
                                                                                                                                                    return x.globalEval(e),
                                                                                                                                                    e
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }),
                                                                                                                                              x.ajaxPrefilter("script", function(e) {
                                                                                                                                                e.cache === t && (e.cache = !1),
                                                                                                                                                e.crossDomain && (e.type = "GET",
                                                                                                                                                e.global = !1)
                                                                                                                                              }),
                                                                                                                                              x.ajaxTransport("script", function(e) {
                                                                                                                                                if (e.crossDomain) {
                                                                                                                                                  var n, r = a.head || x("head")[0] || a.documentElement;
                                                                                                                                                  return {
                                                                                                                                                    send: function(t, i) {
                                                                                                                                                      n = a.createElement("script"),
                                                                                                                                                      n.async = !0,
                                                                                                                                                      e.scriptCharset && (n.charset = e.scriptCharset),
                                                                                                                                                      n.src = e.url,
                                                                                                                                                      n.onload = n.onreadystatechange = function(e, t) {
                                                                                                                                                        (t || !n.readyState || /loaded|complete/.test(n.readyState)) && (n.onload = n.onreadystatechange = null,
                                                                                                                                                          n.parentNode && n.parentNode.removeChild(n),
                                                                                                                                                          n = null,
                                                                                                                                                          t || i(200, "success"))
                                                                                                                                                        }
                                                                                                                                                        ,
                                                                                                                                                        r.insertBefore(n, r.firstChild)
                                                                                                                                                      },
                                                                                                                                                      abort: function() {
                                                                                                                                                        n && n.onload(t, !0)
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                });
                                                                                                                                                var Fn = []
                                                                                                                                                , Bn = /(=)\?(?=&|$)|\?\?/;
                                                                                                                                                x.ajaxSetup({
                                                                                                                                                  jsonp: "callback",
                                                                                                                                                  jsonpCallback: function() {
                                                                                                                                                    var e = Fn.pop() || x.expando + "_" + vn++;
                                                                                                                                                    return this[e] = !0,
                                                                                                                                                    e
                                                                                                                                                  }
                                                                                                                                                }),
                                                                                                                                                x.ajaxPrefilter("json jsonp", function(n, r, i) {
                                                                                                                                                  var o, a, s, l = n.jsonp !== !1 && (Bn.test(n.url) ? "url" : "string" == typeof n.data && !(n.contentType || "").indexOf("application/x-www-form-urlencoded") && Bn.test(n.data) && "data");
                                                                                                                                                  return l || "jsonp" === n.dataTypes[0] ? (o = n.jsonpCallback = x.isFunction(n.jsonpCallback) ? n.jsonpCallback() : n.jsonpCallback,
                                                                                                                                                  l ? n[l] = n[l].replace(Bn, "$1" + o) : n.jsonp !== !1 && (n.url += (bn.test(n.url) ? "&" : "?") + n.jsonp + "=" + o),
                                                                                                                                                  n.converters["script json"] = function() {
                                                                                                                                                    return s || x.error(o + " was not called"),
                                                                                                                                                    s[0]
                                                                                                                                                  }
                                                                                                                                                  ,
                                                                                                                                                  n.dataTypes[0] = "json",
                                                                                                                                                  a = e[o],
                                                                                                                                                  e[o] = function() {
                                                                                                                                                    s = arguments
                                                                                                                                                  }
                                                                                                                                                  ,
                                                                                                                                                  i.always(function() {
                                                                                                                                                    e[o] = a,
                                                                                                                                                    n[o] && (n.jsonpCallback = r.jsonpCallback,
                                                                                                                                                      Fn.push(o)),
                                                                                                                                                      s && x.isFunction(a) && a(s[0]),
                                                                                                                                                      s = a = t
                                                                                                                                                    }),
                                                                                                                                                    "script") : t
                                                                                                                                                  });
                                                                                                                                                  var Pn, Rn, Wn = 0, $n = e.ActiveXObject && function() {
                                                                                                                                                    var e;
                                                                                                                                                    for (e in Pn) {
                                                                                                                                                      Pn[e](t, !0)
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  ;
                                                                                                                                                  function In() {
                                                                                                                                                    try {
                                                                                                                                                      return new e.XMLHttpRequest
                                                                                                                                                    } catch (t) {}
                                                                                                                                                  }
                                                                                                                                                  function zn() {
                                                                                                                                                    try {
                                                                                                                                                      return new e.ActiveXObject("Microsoft.XMLHTTP")
                                                                                                                                                    } catch (t) {}
                                                                                                                                                  }
                                                                                                                                                  x.ajaxSettings.xhr = e.ActiveXObject ? function() {
                                                                                                                                                    return !this.isLocal && In() || zn()
                                                                                                                                                  }
                                                                                                                                                  : In,
                                                                                                                                                  Rn = x.ajaxSettings.xhr(),
                                                                                                                                                  x.support.cors = !!Rn && "withCredentials"in Rn,
                                                                                                                                                  Rn = x.support.ajax = !!Rn,
                                                                                                                                                  Rn && x.ajaxTransport(function(n) {
                                                                                                                                                    if (!n.crossDomain || x.support.cors) {
                                                                                                                                                      var r;
                                                                                                                                                      return {
                                                                                                                                                        send: function(i, o) {
                                                                                                                                                          var a, s, l = n.xhr();
                                                                                                                                                          if (n.username ? l.open(n.type, n.url, n.async, n.username, n.password) : l.open(n.type, n.url, n.async),
                                                                                                                                                          n.xhrFields) {
                                                                                                                                                            for (s in n.xhrFields) {
                                                                                                                                                              l[s] = n.xhrFields[s]
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          n.mimeType && l.overrideMimeType && l.overrideMimeType(n.mimeType),
                                                                                                                                                          n.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest");
                                                                                                                                                          try {
                                                                                                                                                            for (s in i) {
                                                                                                                                                              l.setRequestHeader(s, i[s])
                                                                                                                                                            }
                                                                                                                                                          } catch (u) {}
                                                                                                                                                          l.send(n.hasContent && n.data || null),
                                                                                                                                                          r = function(e, i) {
                                                                                                                                                            var s, u, c, p;
                                                                                                                                                            try {
                                                                                                                                                              if (r && (i || 4 === l.readyState)) {
                                                                                                                                                                if (r = t,
                                                                                                                                                                  a && (l.onreadystatechange = x.noop,
                                                                                                                                                                    $n && delete Pn[a]),
                                                                                                                                                                    i) {
                                                                                                                                                                      4 !== l.readyState && l.abort()
                                                                                                                                                                    } else {
                                                                                                                                                                      p = {},
                                                                                                                                                                      s = l.status,
                                                                                                                                                                      u = l.getAllResponseHeaders(),
                                                                                                                                                                      "string" == typeof l.responseText && (p.text = l.responseText);
                                                                                                                                                                      try {
                                                                                                                                                                        c = l.statusText
                                                                                                                                                                      } catch (f) {
                                                                                                                                                                        c = ""
                                                                                                                                                                      }
                                                                                                                                                                      s || !n.isLocal || n.crossDomain ? 1223 === s && (s = 204) : s = p.text ? 200 : 404
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                } catch (d) {
                                                                                                                                                                  i || o(-1, d)
                                                                                                                                                                }
                                                                                                                                                                p && o(s, c, p, u)
                                                                                                                                                              }
                                                                                                                                                              ,
                                                                                                                                                              n.async ? 4 === l.readyState ? setTimeout(r) : (a = ++Wn,
                                                                                                                                                                $n && (Pn || (Pn = {},
                                                                                                                                                                  x(e).unload($n)),
                                                                                                                                                                  Pn[a] = r),
                                                                                                                                                                  l.onreadystatechange = r) : r()
                                                                                                                                                                },
                                                                                                                                                                abort: function() {
                                                                                                                                                                  r && r(t, !0)
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          });
                                                                                                                                                          var Xn, Un, Vn = /^(?:toggle|show|hide)$/, Yn = RegExp("^(?:([+-])=|)(" + w + ")([a-z%]*)$", "i"), Jn = /queueHooks$/, Gn = [nr], Qn = {
                                                                                                                                                            "*": [function(e, t) {
                                                                                                                                                              var n = this.createTween(e, t)
                                                                                                                                                              , r = n.cur()
                                                                                                                                                              , i = Yn.exec(t)
                                                                                                                                                              , o = i && i[3] || (x.cssNumber[e] ? "" : "px")
                                                                                                                                                              , a = (x.cssNumber[e] || "px" !== o && +r) && Yn.exec(x.css(n.elem, e))
                                                                                                                                                              , s = 1
                                                                                                                                                              , l = 20;
                                                                                                                                                              if (a && a[3] !== o) {
                                                                                                                                                                o = o || a[3],
                                                                                                                                                                i = i || [],
                                                                                                                                                                a = +r || 1;
                                                                                                                                                                do {
                                                                                                                                                                  s = s || ".5",
                                                                                                                                                                  a /= s,
                                                                                                                                                                  x.style(n.elem, e, a + o)
                                                                                                                                                                } while (s !== (s = n.cur() / r) && 1 !== s && --l)
                                                                                                                                                              }
                                                                                                                                                              return i && (a = n.start = +a || +r || 0,
                                                                                                                                                                n.unit = o,
                                                                                                                                                                n.end = i[1] ? a + (i[1] + 1) * i[2] : +i[2]),
                                                                                                                                                                n
                                                                                                                                                              }
                                                                                                                                                            ]
                                                                                                                                                          };
                                                                                                                                                          function Kn() {
                                                                                                                                                            return setTimeout(function() {
                                                                                                                                                              Xn = t
                                                                                                                                                            }),
                                                                                                                                                            Xn = x.now()
                                                                                                                                                          }
                                                                                                                                                          function Zn(e, t, n) {
                                                                                                                                                            var r, i = (Qn[t] || []).concat(Qn["*"]), o = 0, a = i.length;
                                                                                                                                                            for (; a > o; o++) {
                                                                                                                                                              if (r = i[o].call(n, t, e)) {
                                                                                                                                                                return r
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          function er(e, t, n) {
                                                                                                                                                            var r, i, o = 0, a = Gn.length, s = x.Deferred().always(function() {
                                                                                                                                                              delete l.elem
                                                                                                                                                            }), l = function() {
                                                                                                                                                              if (i) {
                                                                                                                                                                return !1
                                                                                                                                                              }
                                                                                                                                                              var t = Xn || Kn()
                                                                                                                                                              , n = Math.max(0, u.startTime + u.duration - t)
                                                                                                                                                              , r = n / u.duration || 0
                                                                                                                                                              , o = 1 - r
                                                                                                                                                              , a = 0
                                                                                                                                                              , l = u.tweens.length;
                                                                                                                                                              for (; l > a; a++) {
                                                                                                                                                                u.tweens[a].run(o)
                                                                                                                                                              }
                                                                                                                                                              return s.notifyWith(e, [u, o, n]),
                                                                                                                                                              1 > o && l ? n : (s.resolveWith(e, [u]),
                                                                                                                                                              !1)
                                                                                                                                                            }, u = s.promise({
                                                                                                                                                              elem: e,
                                                                                                                                                              props: x.extend({}, t),
                                                                                                                                                              opts: x.extend(!0, {
                                                                                                                                                                specialEasing: {}
                                                                                                                                                              }, n),
                                                                                                                                                              originalProperties: t,
                                                                                                                                                              originalOptions: n,
                                                                                                                                                              startTime: Xn || Kn(),
                                                                                                                                                              duration: n.duration,
                                                                                                                                                              tweens: [],
                                                                                                                                                              createTween: function(t, n) {
                                                                                                                                                                var r = x.Tween(e, u.opts, t, n, u.opts.specialEasing[t] || u.opts.easing);
                                                                                                                                                                return u.tweens.push(r),
                                                                                                                                                                r
                                                                                                                                                              },
                                                                                                                                                              stop: function(t) {
                                                                                                                                                                var n = 0
                                                                                                                                                                , r = t ? u.tweens.length : 0;
                                                                                                                                                                if (i) {
                                                                                                                                                                  return this
                                                                                                                                                                }
                                                                                                                                                                for (i = !0; r > n; n++) {
                                                                                                                                                                  u.tweens[n].run(1)
                                                                                                                                                                }
                                                                                                                                                                return t ? s.resolveWith(e, [u, t]) : s.rejectWith(e, [u, t]),
                                                                                                                                                                this
                                                                                                                                                              }
                                                                                                                                                            }), c = u.props;
                                                                                                                                                            for (tr(c, u.opts.specialEasing); a > o; o++) {
                                                                                                                                                              if (r = Gn[o].call(u, e, c, u.opts)) {
                                                                                                                                                                return r
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                            return x.map(c, Zn, u),
                                                                                                                                                            x.isFunction(u.opts.start) && u.opts.start.call(e, u),
                                                                                                                                                            x.fx.timer(x.extend(l, {
                                                                                                                                                              elem: e,
                                                                                                                                                              anim: u,
                                                                                                                                                              queue: u.opts.queue
                                                                                                                                                            })),
                                                                                                                                                            u.progress(u.opts.progress).done(u.opts.done, u.opts.complete).fail(u.opts.fail).always(u.opts.always)
                                                                                                                                                          }
                                                                                                                                                          function tr(e, t) {
                                                                                                                                                            var n, r, i, o, a;
                                                                                                                                                            for (n in e) {
                                                                                                                                                              if (r = x.camelCase(n),
                                                                                                                                                              i = t[r],
                                                                                                                                                              o = e[n],
                                                                                                                                                              x.isArray(o) && (i = o[1],
                                                                                                                                                                o = e[n] = o[0]),
                                                                                                                                                                n !== r && (e[r] = o,
                                                                                                                                                                  delete e[n]),
                                                                                                                                                                  a = x.cssHooks[r],
                                                                                                                                                                  a && "expand"in a) {
                                                                                                                                                                    o = a.expand(o),
                                                                                                                                                                    delete e[r];
                                                                                                                                                                    for (n in o) {
                                                                                                                                                                      n in e || (e[n] = o[n],
                                                                                                                                                                        t[n] = i)
                                                                                                                                                                      }
                                                                                                                                                                    } else {
                                                                                                                                                                      t[r] = i
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                                x.Animation = x.extend(er, {
                                                                                                                                                                  tweener: function(e, t) {
                                                                                                                                                                    x.isFunction(e) ? (t = e,
                                                                                                                                                                      e = ["*"]) : e = e.split(" ");
                                                                                                                                                                      var n, r = 0, i = e.length;
                                                                                                                                                                      for (; i > r; r++) {
                                                                                                                                                                        n = e[r],
                                                                                                                                                                        Qn[n] = Qn[n] || [],
                                                                                                                                                                        Qn[n].unshift(t)
                                                                                                                                                                      }
                                                                                                                                                                    },
                                                                                                                                                                    prefilter: function(e, t) {
                                                                                                                                                                      t ? Gn.unshift(e) : Gn.push(e)
                                                                                                                                                                    }
                                                                                                                                                                  });
                                                                                                                                                                  function nr(e, t, n) {
                                                                                                                                                                    var r, i, o, a, s, l, u = this, c = {}, p = e.style, f = e.nodeType && nn(e), d = x._data(e, "fxshow");
                                                                                                                                                                    n.queue || (s = x._queueHooks(e, "fx"),
                                                                                                                                                                    null == s.unqueued && (s.unqueued = 0,
                                                                                                                                                                      l = s.empty.fire,
                                                                                                                                                                      s.empty.fire = function() {
                                                                                                                                                                        s.unqueued || l()
                                                                                                                                                                      }
                                                                                                                                                                    ),
                                                                                                                                                                    s.unqueued++,
                                                                                                                                                                    u.always(function() {
                                                                                                                                                                      u.always(function() {
                                                                                                                                                                        s.unqueued--,
                                                                                                                                                                        x.queue(e, "fx").length || s.empty.fire()
                                                                                                                                                                      })
                                                                                                                                                                    })),
                                                                                                                                                                    1 === e.nodeType && ("height"in t || "width"in t) && (n.overflow = [p.overflow, p.overflowX, p.overflowY],
                                                                                                                                                                      "inline" === x.css(e, "display") && "none" === x.css(e, "float") && (x.support.inlineBlockNeedsLayout && "inline" !== ln(e.nodeName) ? p.zoom = 1 : p.display = "inline-block")),
                                                                                                                                                                      n.overflow && (p.overflow = "hidden",
                                                                                                                                                                      x.support.shrinkWrapBlocks || u.always(function() {
                                                                                                                                                                        p.overflow = n.overflow[0],
                                                                                                                                                                        p.overflowX = n.overflow[1],
                                                                                                                                                                        p.overflowY = n.overflow[2]
                                                                                                                                                                      }));
                                                                                                                                                                      for (r in t) {
                                                                                                                                                                        if (i = t[r],
                                                                                                                                                                          Vn.exec(i)) {
                                                                                                                                                                            if (delete t[r],
                                                                                                                                                                              o = o || "toggle" === i,
                                                                                                                                                                              i === (f ? "hide" : "show")) {
                                                                                                                                                                                continue
                                                                                                                                                                              }
                                                                                                                                                                              c[r] = d && d[r] || x.style(e, r)
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                          if (!x.isEmptyObject(c)) {
                                                                                                                                                                            d ? "hidden"in d && (f = d.hidden) : d = x._data(e, "fxshow", {}),
                                                                                                                                                                            o && (d.hidden = !f),
                                                                                                                                                                            f ? x(e).show() : u.done(function() {
                                                                                                                                                                              x(e).hide()
                                                                                                                                                                            }),
                                                                                                                                                                            u.done(function() {
                                                                                                                                                                              var t;
                                                                                                                                                                              x._removeData(e, "fxshow");
                                                                                                                                                                              for (t in c) {
                                                                                                                                                                                x.style(e, t, c[t])
                                                                                                                                                                              }
                                                                                                                                                                            });
                                                                                                                                                                            for (r in c) {
                                                                                                                                                                              a = Zn(f ? d[r] : 0, r, u),
                                                                                                                                                                              r in d || (d[r] = a.start,
                                                                                                                                                                                f && (a.end = a.start,
                                                                                                                                                                                  a.start = "width" === r || "height" === r ? 1 : 0))
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                            function rr(e, t, n, r, i) {
                                                                                                                                                                              return new rr.prototype.init(e,t,n,r,i)
                                                                                                                                                                            }
                                                                                                                                                                            x.Tween = rr,
                                                                                                                                                                            rr.prototype = {
                                                                                                                                                                              constructor: rr,
                                                                                                                                                                              init: function(e, t, n, r, i, o) {
                                                                                                                                                                                this.elem = e,
                                                                                                                                                                                this.prop = n,
                                                                                                                                                                                this.easing = i || "swing",
                                                                                                                                                                                this.options = t,
                                                                                                                                                                                this.start = this.now = this.cur(),
                                                                                                                                                                                this.end = r,
                                                                                                                                                                                this.unit = o || (x.cssNumber[n] ? "" : "px")
                                                                                                                                                                              },
                                                                                                                                                                              cur: function() {
                                                                                                                                                                                var e = rr.propHooks[this.prop];
                                                                                                                                                                                return e && e.get ? e.get(this) : rr.propHooks._default.get(this)
                                                                                                                                                                              },
                                                                                                                                                                              run: function(e) {
                                                                                                                                                                                var t, n = rr.propHooks[this.prop];
                                                                                                                                                                                return this.pos = t = this.options.duration ? x.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : e,
                                                                                                                                                                                this.now = (this.end - this.start) * t + this.start,
                                                                                                                                                                                this.options.step && this.options.step.call(this.elem, this.now, this),
                                                                                                                                                                                n && n.set ? n.set(this) : rr.propHooks._default.set(this),
                                                                                                                                                                                this
                                                                                                                                                                              }
                                                                                                                                                                            },
                                                                                                                                                                            rr.prototype.init.prototype = rr.prototype,
                                                                                                                                                                            rr.propHooks = {
                                                                                                                                                                              _default: {
                                                                                                                                                                                get: function(e) {
                                                                                                                                                                                  var t;
                                                                                                                                                                                  return null == e.elem[e.prop] || e.elem.style && null != e.elem.style[e.prop] ? (t = x.css(e.elem, e.prop, ""),
                                                                                                                                                                                  t && "auto" !== t ? t : 0) : e.elem[e.prop]
                                                                                                                                                                                },
                                                                                                                                                                                set: function(e) {
                                                                                                                                                                                  x.fx.step[e.prop] ? x.fx.step[e.prop](e) : e.elem.style && (null != e.elem.style[x.cssProps[e.prop]] || x.cssHooks[e.prop]) ? x.style(e.elem, e.prop, e.now + e.unit) : e.elem[e.prop] = e.now
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            },
                                                                                                                                                                            rr.propHooks.scrollTop = rr.propHooks.scrollLeft = {
                                                                                                                                                                              set: function(e) {
                                                                                                                                                                                e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now)
                                                                                                                                                                              }
                                                                                                                                                                            },
                                                                                                                                                                            x.each(["toggle", "show", "hide"], function(e, t) {
                                                                                                                                                                              var n = x.fn[t];
                                                                                                                                                                              x.fn[t] = function(e, r, i) {
                                                                                                                                                                                return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(ir(t, !0), e, r, i)
                                                                                                                                                                              }
                                                                                                                                                                            }),
                                                                                                                                                                            x.fn.extend({
                                                                                                                                                                              fadeTo: function(e, t, n, r) {
                                                                                                                                                                                return this.filter(nn).css("opacity", 0).show().end().animate({
                                                                                                                                                                                  opacity: t
                                                                                                                                                                                }, e, n, r)
                                                                                                                                                                              },
                                                                                                                                                                              animate: function(e, t, n, r) {
                                                                                                                                                                                var i = x.isEmptyObject(e)
                                                                                                                                                                                , o = x.speed(t, n, r)
                                                                                                                                                                                , a = function() {
                                                                                                                                                                                  var t = er(this, x.extend({}, e), o);
                                                                                                                                                                                  (i || x._data(this, "finish")) && t.stop(!0)
                                                                                                                                                                                };
                                                                                                                                                                                return a.finish = a,
                                                                                                                                                                                i || o.queue === !1 ? this.each(a) : this.queue(o.queue, a)
                                                                                                                                                                              },
                                                                                                                                                                              stop: function(e, n, r) {
                                                                                                                                                                                var i = function(e) {
                                                                                                                                                                                  var t = e.stop;
                                                                                                                                                                                  delete e.stop,
                                                                                                                                                                                  t(r)
                                                                                                                                                                                };
                                                                                                                                                                                return "string" != typeof e && (r = n,
                                                                                                                                                                                  n = e,
                                                                                                                                                                                  e = t),
                                                                                                                                                                                  n && e !== !1 && this.queue(e || "fx", []),
                                                                                                                                                                                  this.each(function() {
                                                                                                                                                                                    var t = !0
                                                                                                                                                                                    , n = null != e && e + "queueHooks"
                                                                                                                                                                                    , o = x.timers
                                                                                                                                                                                    , a = x._data(this);
                                                                                                                                                                                    if (n) {
                                                                                                                                                                                      a[n] && a[n].stop && i(a[n])
                                                                                                                                                                                    } else {
                                                                                                                                                                                      for (n in a) {
                                                                                                                                                                                        a[n] && a[n].stop && Jn.test(n) && i(a[n])
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                    for (n = o.length; n--; ) {
                                                                                                                                                                                      o[n].elem !== this || null != e && o[n].queue !== e || (o[n].anim.stop(r),
                                                                                                                                                                                      t = !1,
                                                                                                                                                                                      o.splice(n, 1))
                                                                                                                                                                                    }
                                                                                                                                                                                    (t || !r) && x.dequeue(this, e)
                                                                                                                                                                                  })
                                                                                                                                                                                },
                                                                                                                                                                                finish: function(e) {
                                                                                                                                                                                  return e !== !1 && (e = e || "fx"),
                                                                                                                                                                                  this.each(function() {
                                                                                                                                                                                    var t, n = x._data(this), r = n[e + "queue"], i = n[e + "queueHooks"], o = x.timers, a = r ? r.length : 0;
                                                                                                                                                                                    for (n.finish = !0,
                                                                                                                                                                                      x.queue(this, e, []),
                                                                                                                                                                                      i && i.stop && i.stop.call(this, !0),
                                                                                                                                                                                      t = o.length; t--; ) {
                                                                                                                                                                                        o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0),
                                                                                                                                                                                        o.splice(t, 1))
                                                                                                                                                                                      }
                                                                                                                                                                                      for (t = 0; a > t; t++) {
                                                                                                                                                                                        r[t] && r[t].finish && r[t].finish.call(this)
                                                                                                                                                                                      }
                                                                                                                                                                                      delete n.finish
                                                                                                                                                                                    })
                                                                                                                                                                                  }
                                                                                                                                                                                });
                                                                                                                                                                                function ir(e, t) {
                                                                                                                                                                                  var n, r = {
                                                                                                                                                                                    height: e
                                                                                                                                                                                  }, i = 0;
                                                                                                                                                                                  for (t = t ? 1 : 0; 4 > i; i += 2 - t) {
                                                                                                                                                                                    n = Zt[i],
                                                                                                                                                                                    r["margin" + n] = r["padding" + n] = e
                                                                                                                                                                                  }
                                                                                                                                                                                  return t && (r.opacity = r.width = e),
                                                                                                                                                                                  r
                                                                                                                                                                                }
                                                                                                                                                                                x.each({
                                                                                                                                                                                  slideDown: ir("show"),
                                                                                                                                                                                  slideUp: ir("hide"),
                                                                                                                                                                                  slideToggle: ir("toggle"),
                                                                                                                                                                                  fadeIn: {
                                                                                                                                                                                    opacity: "show"
                                                                                                                                                                                  },
                                                                                                                                                                                  fadeOut: {
                                                                                                                                                                                    opacity: "hide"
                                                                                                                                                                                  },
                                                                                                                                                                                  fadeToggle: {
                                                                                                                                                                                    opacity: "toggle"
                                                                                                                                                                                  }
                                                                                                                                                                                }, function(e, t) {
                                                                                                                                                                                  x.fn[e] = function(e, n, r) {
                                                                                                                                                                                    return this.animate(t, e, n, r)
                                                                                                                                                                                  }
                                                                                                                                                                                }),
                                                                                                                                                                                x.speed = function(e, t, n) {
                                                                                                                                                                                  var r = e && "object" == typeof e ? x.extend({}, e) : {
                                                                                                                                                                                    complete: n || !n && t || x.isFunction(e) && e,
                                                                                                                                                                                    duration: e,
                                                                                                                                                                                    easing: n && t || t && !x.isFunction(t) && t
                                                                                                                                                                                  };
                                                                                                                                                                                  return r.duration = x.fx.off ? 0 : "number" == typeof r.duration ? r.duration : r.duration in x.fx.speeds ? x.fx.speeds[r.duration] : x.fx.speeds._default,
                                                                                                                                                                                  (null == r.queue || r.queue === !0) && (r.queue = "fx"),
                                                                                                                                                                                  r.old = r.complete,
                                                                                                                                                                                  r.complete = function() {
                                                                                                                                                                                    x.isFunction(r.old) && r.old.call(this),
                                                                                                                                                                                    r.queue && x.dequeue(this, r.queue)
                                                                                                                                                                                  }
                                                                                                                                                                                  ,
                                                                                                                                                                                  r
                                                                                                                                                                                }
                                                                                                                                                                                ,
                                                                                                                                                                                x.easing = {
                                                                                                                                                                                  linear: function(e) {
                                                                                                                                                                                    return e
                                                                                                                                                                                  },
                                                                                                                                                                                  swing: function(e) {
                                                                                                                                                                                    return 0.5 - Math.cos(e * Math.PI) / 2
                                                                                                                                                                                  }
                                                                                                                                                                                },
                                                                                                                                                                                x.timers = [],
                                                                                                                                                                                x.fx = rr.prototype.init,
                                                                                                                                                                                x.fx.tick = function() {
                                                                                                                                                                                  var e, n = x.timers, r = 0;
                                                                                                                                                                                  for (Xn = x.now(); n.length > r; r++) {
                                                                                                                                                                                    e = n[r],
                                                                                                                                                                                    e() || n[r] !== e || n.splice(r--, 1)
                                                                                                                                                                                  }
                                                                                                                                                                                  n.length || x.fx.stop(),
                                                                                                                                                                                  Xn = t
                                                                                                                                                                                }
                                                                                                                                                                                ,
                                                                                                                                                                                x.fx.timer = function(e) {
                                                                                                                                                                                  e() && x.timers.push(e) && x.fx.start()
                                                                                                                                                                                }
                                                                                                                                                                                ,
                                                                                                                                                                                x.fx.interval = 13,
                                                                                                                                                                                x.fx.start = function() {
                                                                                                                                                                                  Un || (Un = setInterval(x.fx.tick, x.fx.interval))
                                                                                                                                                                                }
                                                                                                                                                                                ,
                                                                                                                                                                                x.fx.stop = function() {
                                                                                                                                                                                  clearInterval(Un),
                                                                                                                                                                                  Un = null
                                                                                                                                                                                }
                                                                                                                                                                                ,
                                                                                                                                                                                x.fx.speeds = {
                                                                                                                                                                                  slow: 600,
                                                                                                                                                                                  fast: 200,
                                                                                                                                                                                  _default: 400
                                                                                                                                                                                },
                                                                                                                                                                                x.fx.step = {},
                                                                                                                                                                                x.expr && x.expr.filters && (x.expr.filters.animated = function(e) {
                                                                                                                                                                                  return x.grep(x.timers, function(t) {
                                                                                                                                                                                    return e === t.elem
                                                                                                                                                                                  }).length
                                                                                                                                                                                }
                                                                                                                                                                              ),
                                                                                                                                                                              x.fn.offset = function(e) {
                                                                                                                                                                                if (arguments.length) {
                                                                                                                                                                                  return e === t ? this : this.each(function(t) {
                                                                                                                                                                                    x.offset.setOffset(this, e, t)
                                                                                                                                                                                  })
                                                                                                                                                                                }
                                                                                                                                                                                var n, r, o = {
                                                                                                                                                                                  top: 0,
                                                                                                                                                                                  left: 0
                                                                                                                                                                                }, a = this[0], s = a && a.ownerDocument;
                                                                                                                                                                                if (s) {
                                                                                                                                                                                  return n = s.documentElement,
                                                                                                                                                                                  x.contains(n, a) ? (typeof a.getBoundingClientRect !== i && (o = a.getBoundingClientRect()),
                                                                                                                                                                                  r = or(s),
                                                                                                                                                                                  {
                                                                                                                                                                                    top: o.top + (r.pageYOffset || n.scrollTop) - (n.clientTop || 0),
                                                                                                                                                                                    left: o.left + (r.pageXOffset || n.scrollLeft) - (n.clientLeft || 0)
                                                                                                                                                                                  }) : o
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                              ,
                                                                                                                                                                              x.offset = {
                                                                                                                                                                                setOffset: function(e, t, n) {
                                                                                                                                                                                  var r = x.css(e, "position");
                                                                                                                                                                                  "static" === r && (e.style.position = "relative");
                                                                                                                                                                                  var i = x(e), o = i.offset(), a = x.css(e, "top"), s = x.css(e, "left"), l = ("absolute" === r || "fixed" === r) && x.inArray("auto", [a, s]) > -1, u = {}, c = {}, p, f;
                                                                                                                                                                                  l ? (c = i.position(),
                                                                                                                                                                                  p = c.top,
                                                                                                                                                                                  f = c.left) : (p = parseFloat(a) || 0,
                                                                                                                                                                                  f = parseFloat(s) || 0),
                                                                                                                                                                                  x.isFunction(t) && (t = t.call(e, n, o)),
                                                                                                                                                                                  null != t.top && (u.top = t.top - o.top + p),
                                                                                                                                                                                  null != t.left && (u.left = t.left - o.left + f),
                                                                                                                                                                                  "using"in t ? t.using.call(e, u) : i.css(u)
                                                                                                                                                                                }
                                                                                                                                                                              },
                                                                                                                                                                              x.fn.extend({
                                                                                                                                                                                position: function() {
                                                                                                                                                                                  if (this[0]) {
                                                                                                                                                                                    var e, t, n = {
                                                                                                                                                                                      top: 0,
                                                                                                                                                                                      left: 0
                                                                                                                                                                                    }, r = this[0];
                                                                                                                                                                                    return "fixed" === x.css(r, "position") ? t = r.getBoundingClientRect() : (e = this.offsetParent(),
                                                                                                                                                                                    t = this.offset(),
                                                                                                                                                                                    x.nodeName(e[0], "html") || (n = e.offset()),
                                                                                                                                                                                    n.top += x.css(e[0], "borderTopWidth", !0),
                                                                                                                                                                                    n.left += x.css(e[0], "borderLeftWidth", !0)),
                                                                                                                                                                                    {
                                                                                                                                                                                      top: t.top - n.top - x.css(r, "marginTop", !0),
                                                                                                                                                                                      left: t.left - n.left - x.css(r, "marginLeft", !0)
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                },
                                                                                                                                                                                offsetParent: function() {
                                                                                                                                                                                  return this.map(function() {
                                                                                                                                                                                    var e = this.offsetParent || s;
                                                                                                                                                                                    while (e && !x.nodeName(e, "html") && "static" === x.css(e, "position")) {
                                                                                                                                                                                      e = e.offsetParent
                                                                                                                                                                                    }
                                                                                                                                                                                    return e || s
                                                                                                                                                                                  })
                                                                                                                                                                                }
                                                                                                                                                                              }),
                                                                                                                                                                              x.each({
                                                                                                                                                                                scrollLeft: "pageXOffset",
                                                                                                                                                                                scrollTop: "pageYOffset"
                                                                                                                                                                              }, function(e, n) {
                                                                                                                                                                                var r = /Y/.test(n);
                                                                                                                                                                                x.fn[e] = function(i) {
                                                                                                                                                                                  return x.access(this, function(e, i, o) {
                                                                                                                                                                                    var a = or(e);
                                                                                                                                                                                    return o === t ? a ? n in a ? a[n] : a.document.documentElement[i] : e[i] : (a ? a.scrollTo(r ? x(a).scrollLeft() : o, r ? o : x(a).scrollTop()) : e[i] = o,
                                                                                                                                                                                    t)
                                                                                                                                                                                  }, e, i, arguments.length, null)
                                                                                                                                                                                }
                                                                                                                                                                              });
                                                                                                                                                                              function or(e) {
                                                                                                                                                                                return x.isWindow(e) ? e : 9 === e.nodeType ? e.defaultView || e.parentWindow : !1
                                                                                                                                                                              }
                                                                                                                                                                              x.each({
                                                                                                                                                                                Height: "height",
                                                                                                                                                                                Width: "width"
                                                                                                                                                                              }, function(e, n) {
                                                                                                                                                                                x.each({
                                                                                                                                                                                  padding: "inner" + e,
                                                                                                                                                                                  content: n,
                                                                                                                                                                                  "": "outer" + e
                                                                                                                                                                                }, function(r, i) {
                                                                                                                                                                                  x.fn[i] = function(i, o) {
                                                                                                                                                                                    var a = arguments.length && (r || "boolean" != typeof i)
                                                                                                                                                                                    , s = r || (i === !0 || o === !0 ? "margin" : "border");
                                                                                                                                                                                    return x.access(this, function(n, r, i) {
                                                                                                                                                                                      var o;
                                                                                                                                                                                      return x.isWindow(n) ? n.document.documentElement["client" + e] : 9 === n.nodeType ? (o = n.documentElement,
                                                                                                                                                                                        Math.max(n.body["scroll" + e], o["scroll" + e], n.body["offset" + e], o["offset" + e], o["client" + e])) : i === t ? x.css(n, r, s) : x.style(n, r, i, s)
                                                                                                                                                                                      }, n, a ? i : t, a, null)
                                                                                                                                                                                    }
                                                                                                                                                                                  })
                                                                                                                                                                                }),
                                                                                                                                                                                x.fn.size = function() {
                                                                                                                                                                                  return this.length
                                                                                                                                                                                }
                                                                                                                                                                                ,
                                                                                                                                                                                x.fn.andSelf = x.fn.addBack,
                                                                                                                                                                                "object" == typeof module && module && "object" == typeof module.exports ? module.exports = x : (e.jQuery = e.$ = x,
                                                                                                                                                                                  "function" == typeof define && define.amd && define("jquery", [], function() {
                                                                                                                                                                                    return x
                                                                                                                                                                                  }))
                                                                                                                                                                                }
                                                                                                                                                                              )(window);
                                                                                                                                                                              (function(global) {
                                                                                                                                                                                var module = global.noise = {};
                                                                                                                                                                                function Grad(x, y, z) {
                                                                                                                                                                                  this.x = x;
                                                                                                                                                                                  this.y = y;
                                                                                                                                                                                  this.z = z
                                                                                                                                                                                }
                                                                                                                                                                                Grad.prototype.dot2 = function(x, y) {
                                                                                                                                                                                  return this.x * x + this.y * y
                                                                                                                                                                                }
                                                                                                                                                                                ;
                                                                                                                                                                                Grad.prototype.dot3 = function(x, y, z) {
                                                                                                                                                                                  return this.x * x + this.y * y + this.z * z
                                                                                                                                                                                }
                                                                                                                                                                                ;
                                                                                                                                                                                var grad3 = [new Grad(1,1,0), new Grad(-1,1,0), new Grad(1,-1,0), new Grad(-1,-1,0), new Grad(1,0,1), new Grad(-1,0,1), new Grad(1,0,-1), new Grad(-1,0,-1), new Grad(0,1,1), new Grad(0,-1,1), new Grad(0,1,-1), new Grad(0,-1,-1)];
                                                                                                                                                                                var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];
                                                                                                                                                                                var perm = new Array(512);
                                                                                                                                                                                var gradP = new Array(512);
                                                                                                                                                                                module.seed = function(seed) {
                                                                                                                                                                                  if (seed > 0 && seed < 1) {
                                                                                                                                                                                    seed *= 65536
                                                                                                                                                                                  }
                                                                                                                                                                                  seed = Math.floor(seed);
                                                                                                                                                                                  if (seed < 256) {
                                                                                                                                                                                    seed |= seed << 8
                                                                                                                                                                                  }
                                                                                                                                                                                  for (var i = 0; i < 256; i++) {
                                                                                                                                                                                    var v;
                                                                                                                                                                                    if (i & 1) {
                                                                                                                                                                                      v = p[i] ^ (seed & 255)
                                                                                                                                                                                    } else {
                                                                                                                                                                                      v = p[i] ^ ((seed >> 8) & 255)
                                                                                                                                                                                    }
                                                                                                                                                                                    perm[i] = perm[i + 256] = v;
                                                                                                                                                                                    gradP[i] = gradP[i + 256] = grad3[v % 12]
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                                ;
                                                                                                                                                                                module.seed(0);
                                                                                                                                                                                var F2 = 0.5 * (Math.sqrt(3) - 1);
                                                                                                                                                                                var G2 = (3 - Math.sqrt(3)) / 6;
                                                                                                                                                                                var F3 = 1 / 3;
                                                                                                                                                                                var G3 = 1 / 6;
                                                                                                                                                                                module.simplex2 = function(xin, yin) {
                                                                                                                                                                                  var n0, n1, n2;
                                                                                                                                                                                  var s = (xin + yin) * F2;
                                                                                                                                                                                  var i = Math.floor(xin + s);
                                                                                                                                                                                  var j = Math.floor(yin + s);
                                                                                                                                                                                  var t = (i + j) * G2;
                                                                                                                                                                                  var x0 = xin - i + t;
                                                                                                                                                                                  var y0 = yin - j + t;
                                                                                                                                                                                  var i1, j1;
                                                                                                                                                                                  if (x0 > y0) {
                                                                                                                                                                                    i1 = 1;
                                                                                                                                                                                    j1 = 0
                                                                                                                                                                                  } else {
                                                                                                                                                                                    i1 = 0;
                                                                                                                                                                                    j1 = 1
                                                                                                                                                                                  }
                                                                                                                                                                                  var x1 = x0 - i1 + G2;
                                                                                                                                                                                  var y1 = y0 - j1 + G2;
                                                                                                                                                                                  var x2 = x0 - 1 + 2 * G2;
                                                                                                                                                                                  var y2 = y0 - 1 + 2 * G2;
                                                                                                                                                                                  i &= 255;
                                                                                                                                                                                  j &= 255;
                                                                                                                                                                                  var gi0 = gradP[i + perm[j]];
                                                                                                                                                                                  var gi1 = gradP[i + i1 + perm[j + j1]];
                                                                                                                                                                                  var gi2 = gradP[i + 1 + perm[j + 1]];
                                                                                                                                                                                  var t0 = 0.5 - x0 * x0 - y0 * y0;
                                                                                                                                                                                  if (t0 < 0) {
                                                                                                                                                                                    n0 = 0
                                                                                                                                                                                  } else {
                                                                                                                                                                                    t0 *= t0;
                                                                                                                                                                                    n0 = t0 * t0 * gi0.dot2(x0, y0)
                                                                                                                                                                                  }
                                                                                                                                                                                  var t1 = 0.5 - x1 * x1 - y1 * y1;
                                                                                                                                                                                  if (t1 < 0) {
                                                                                                                                                                                    n1 = 0
                                                                                                                                                                                  } else {
                                                                                                                                                                                    t1 *= t1;
                                                                                                                                                                                    n1 = t1 * t1 * gi1.dot2(x1, y1)
                                                                                                                                                                                  }
                                                                                                                                                                                  var t2 = 0.5 - x2 * x2 - y2 * y2;
                                                                                                                                                                                  if (t2 < 0) {
                                                                                                                                                                                    n2 = 0
                                                                                                                                                                                  } else {
                                                                                                                                                                                    t2 *= t2;
                                                                                                                                                                                    n2 = t2 * t2 * gi2.dot2(x2, y2)
                                                                                                                                                                                  }
                                                                                                                                                                                  return 70 * (n0 + n1 + n2)
                                                                                                                                                                                }
                                                                                                                                                                                ;
                                                                                                                                                                                module.simplex3 = function(xin, yin, zin) {
                                                                                                                                                                                  var n0, n1, n2, n3;
                                                                                                                                                                                  var s = (xin + yin + zin) * F3;
                                                                                                                                                                                  var i = Math.floor(xin + s);
                                                                                                                                                                                  var j = Math.floor(yin + s);
                                                                                                                                                                                  var k = Math.floor(zin + s);
                                                                                                                                                                                  var t = (i + j + k) * G3;
                                                                                                                                                                                  var x0 = xin - i + t;
                                                                                                                                                                                  var y0 = yin - j + t;
                                                                                                                                                                                  var z0 = zin - k + t;
                                                                                                                                                                                  var i1, j1, k1;
                                                                                                                                                                                  var i2, j2, k2;
                                                                                                                                                                                  if (x0 >= y0) {
                                                                                                                                                                                    if (y0 >= z0) {
                                                                                                                                                                                      i1 = 1;
                                                                                                                                                                                      j1 = 0;
                                                                                                                                                                                      k1 = 0;
                                                                                                                                                                                      i2 = 1;
                                                                                                                                                                                      j2 = 1;
                                                                                                                                                                                      k2 = 0
                                                                                                                                                                                    } else {
                                                                                                                                                                                      if (x0 >= z0) {
                                                                                                                                                                                        i1 = 1;
                                                                                                                                                                                        j1 = 0;
                                                                                                                                                                                        k1 = 0;
                                                                                                                                                                                        i2 = 1;
                                                                                                                                                                                        j2 = 0;
                                                                                                                                                                                        k2 = 1
                                                                                                                                                                                      } else {
                                                                                                                                                                                        i1 = 0;
                                                                                                                                                                                        j1 = 0;
                                                                                                                                                                                        k1 = 1;
                                                                                                                                                                                        i2 = 1;
                                                                                                                                                                                        j2 = 0;
                                                                                                                                                                                        k2 = 1
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  } else {
                                                                                                                                                                                    if (y0 < z0) {
                                                                                                                                                                                      i1 = 0;
                                                                                                                                                                                      j1 = 0;
                                                                                                                                                                                      k1 = 1;
                                                                                                                                                                                      i2 = 0;
                                                                                                                                                                                      j2 = 1;
                                                                                                                                                                                      k2 = 1
                                                                                                                                                                                    } else {
                                                                                                                                                                                      if (x0 < z0) {
                                                                                                                                                                                        i1 = 0;
                                                                                                                                                                                        j1 = 1;
                                                                                                                                                                                        k1 = 0;
                                                                                                                                                                                        i2 = 0;
                                                                                                                                                                                        j2 = 1;
                                                                                                                                                                                        k2 = 1
                                                                                                                                                                                      } else {
                                                                                                                                                                                        i1 = 0;
                                                                                                                                                                                        j1 = 1;
                                                                                                                                                                                        k1 = 0;
                                                                                                                                                                                        i2 = 1;
                                                                                                                                                                                        j2 = 1;
                                                                                                                                                                                        k2 = 0
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                  var x1 = x0 - i1 + G3;
                                                                                                                                                                                  var y1 = y0 - j1 + G3;
                                                                                                                                                                                  var z1 = z0 - k1 + G3;
                                                                                                                                                                                  var x2 = x0 - i2 + 2 * G3;
                                                                                                                                                                                  var y2 = y0 - j2 + 2 * G3;
                                                                                                                                                                                  var z2 = z0 - k2 + 2 * G3;
                                                                                                                                                                                  var x3 = x0 - 1 + 3 * G3;
                                                                                                                                                                                  var y3 = y0 - 1 + 3 * G3;
                                                                                                                                                                                  var z3 = z0 - 1 + 3 * G3;
                                                                                                                                                                                  i &= 255;
                                                                                                                                                                                  j &= 255;
                                                                                                                                                                                  k &= 255;
                                                                                                                                                                                  var gi0 = gradP[i + perm[j + perm[k]]];
                                                                                                                                                                                  var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];
                                                                                                                                                                                  var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];
                                                                                                                                                                                  var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];
                                                                                                                                                                                  var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
                                                                                                                                                                                  if (t0 < 0) {
                                                                                                                                                                                    n0 = 0
                                                                                                                                                                                  } else {
                                                                                                                                                                                    t0 *= t0;
                                                                                                                                                                                    n0 = t0 * t0 * gi0.dot3(x0, y0, z0)
                                                                                                                                                                                  }
                                                                                                                                                                                  var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
                                                                                                                                                                                  if (t1 < 0) {
                                                                                                                                                                                    n1 = 0
                                                                                                                                                                                  } else {
                                                                                                                                                                                    t1 *= t1;
                                                                                                                                                                                    n1 = t1 * t1 * gi1.dot3(x1, y1, z1)
                                                                                                                                                                                  }
                                                                                                                                                                                  var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
                                                                                                                                                                                  if (t2 < 0) {
                                                                                                                                                                                    n2 = 0
                                                                                                                                                                                  } else {
                                                                                                                                                                                    t2 *= t2;
                                                                                                                                                                                    n2 = t2 * t2 * gi2.dot3(x2, y2, z2)
                                                                                                                                                                                  }
                                                                                                                                                                                  var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
                                                                                                                                                                                  if (t3 < 0) {
                                                                                                                                                                                    n3 = 0
                                                                                                                                                                                  } else {
                                                                                                                                                                                    t3 *= t3;
                                                                                                                                                                                    n3 = t3 * t3 * gi3.dot3(x3, y3, z3)
                                                                                                                                                                                  }
                                                                                                                                                                                  return 32 * (n0 + n1 + n2 + n3)
                                                                                                                                                                                }
                                                                                                                                                                                ;
                                                                                                                                                                                function fade(t) {
                                                                                                                                                                                  return t * t * t * (t * (t * 6 - 15) + 10)
                                                                                                                                                                                }
                                                                                                                                                                                function lerp(a, b, t) {
                                                                                                                                                                                  return (1 - t) * a + t * b
                                                                                                                                                                                }
                                                                                                                                                                                module.perlin2 = function(x, y) {
                                                                                                                                                                                  var X = Math.floor(x)
                                                                                                                                                                                  , Y = Math.floor(y);
                                                                                                                                                                                  x = x - X;
                                                                                                                                                                                  y = y - Y;
                                                                                                                                                                                  X = X & 255;
                                                                                                                                                                                  Y = Y & 255;
                                                                                                                                                                                  var n00 = gradP[X + perm[Y]].dot2(x, y);
                                                                                                                                                                                  var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);
                                                                                                                                                                                  var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);
                                                                                                                                                                                  var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);
                                                                                                                                                                                  var u = fade(x);
                                                                                                                                                                                  return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y))
                                                                                                                                                                                }
                                                                                                                                                                                ;
                                                                                                                                                                                module.perlin3 = function(x, y, z) {
                                                                                                                                                                                  var X = Math.floor(x)
                                                                                                                                                                                  , Y = Math.floor(y)
                                                                                                                                                                                  , Z = Math.floor(z);
                                                                                                                                                                                  x = x - X;
                                                                                                                                                                                  y = y - Y;
                                                                                                                                                                                  z = z - Z;
                                                                                                                                                                                  X = X & 255;
                                                                                                                                                                                  Y = Y & 255;
                                                                                                                                                                                  Z = Z & 255;
                                                                                                                                                                                  var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);
                                                                                                                                                                                  var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);
                                                                                                                                                                                  var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);
                                                                                                                                                                                  var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);
                                                                                                                                                                                  var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);
                                                                                                                                                                                  var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);
                                                                                                                                                                                  var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);
                                                                                                                                                                                  var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);
                                                                                                                                                                                  var u = fade(x);
                                                                                                                                                                                  var v = fade(y);
                                                                                                                                                                                  var w = fade(z);
                                                                                                                                                                                  return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v)
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            )(this);
                                                                                                                                                                            function Igloo(gl, options) {
                                                                                                                                                                              var canvas;
                                                                                                                                                                              if (gl instanceof HTMLCanvasElement) {
                                                                                                                                                                                canvas = gl;
                                                                                                                                                                                gl = Igloo.getContext(gl, options)
                                                                                                                                                                              } else {
                                                                                                                                                                                canvas = gl.canvas
                                                                                                                                                                              }
                                                                                                                                                                              this.gl = gl;
                                                                                                                                                                              this.canvas = canvas;
                                                                                                                                                                              this.defaultFramebuffer = new Igloo.Framebuffer(gl,null)
                                                                                                                                                                            }
                                                                                                                                                                            Igloo.QUAD2 = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);
                                                                                                                                                                            Igloo.fetch = function(url, callback) {
                                                                                                                                                                              var xhr = new XMLHttpRequest();
                                                                                                                                                                              xhr.open("GET", url, false);
                                                                                                                                                                              if (callback != null) {
                                                                                                                                                                                xhr.onload = function() {
                                                                                                                                                                                  callback(xhr.responseText)
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                              xhr.send();
                                                                                                                                                                              return xhr.responseText
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.getContext = function(canvas, options, noerror) {
                                                                                                                                                                              var gl;
                                                                                                                                                                              try {
                                                                                                                                                                                gl = canvas.getContext("webgl", options || {}) || canvas.getContext("experimental-webgl", options || {})
                                                                                                                                                                              } catch (e) {
                                                                                                                                                                                gl = null
                                                                                                                                                                              }
                                                                                                                                                                              if (gl == null && !noerror) {
                                                                                                                                                                                throw new Error("Could not create WebGL context.")
                                                                                                                                                                              } else {
                                                                                                                                                                                return gl
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.looksLikeURL = function(string) {
                                                                                                                                                                              return /^[\w+:\/\/]/.exec(string) != null
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.isArray = function(object) {
                                                                                                                                                                              var name = Object.prototype.toString.apply(object, [])
                                                                                                                                                                              , re = / (Float(32|64)|Int(16|32|8)|Uint(16|32|8(Clamped)?))?Array]$/;
                                                                                                                                                                              return re.exec(name) != null
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.prototype.program = function(vertex, fragment, transform) {
                                                                                                                                                                              if (Igloo.looksLikeURL(vertex)) {
                                                                                                                                                                                vertex = Igloo.fetch(vertex)
                                                                                                                                                                              }
                                                                                                                                                                              if (Igloo.looksLikeURL(fragment)) {
                                                                                                                                                                                fragment = Igloo.fetch(fragment)
                                                                                                                                                                              }
                                                                                                                                                                              if (transform != null) {
                                                                                                                                                                                vertex = transform(vertex);
                                                                                                                                                                                fragment = transform(fragment)
                                                                                                                                                                              }
                                                                                                                                                                              return new Igloo.Program(this.gl,vertex,fragment)
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.prototype.array = function(data, usage) {
                                                                                                                                                                              var gl = this.gl
                                                                                                                                                                              , buffer = new Igloo.Buffer(gl,gl.ARRAY_BUFFER);
                                                                                                                                                                              if (data != null) {
                                                                                                                                                                                buffer.update(data, usage == null ? gl.STATIC_DRAW : usage)
                                                                                                                                                                              }
                                                                                                                                                                              return buffer
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.prototype.elements = function(data, usage) {
                                                                                                                                                                              var gl = this.gl
                                                                                                                                                                              , buffer = new Igloo.Buffer(gl,gl.ELEMENT_ARRAY_BUFFER);
                                                                                                                                                                              if (data != null) {
                                                                                                                                                                                buffer.update(data, usage == null ? gl.STATIC_DRAW : usage)
                                                                                                                                                                              }
                                                                                                                                                                              return buffer
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.prototype.texture = function(source, format, wrap, filter) {
                                                                                                                                                                              var texture = new Igloo.Texture(this.gl,format,wrap,filter);
                                                                                                                                                                              if (source != null) {
                                                                                                                                                                                texture.set(source)
                                                                                                                                                                              }
                                                                                                                                                                              return texture
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.prototype.framebuffer = function(texture) {
                                                                                                                                                                              var framebuffer = new Igloo.Framebuffer(this.gl);
                                                                                                                                                                              if (texture != null) {
                                                                                                                                                                                framebuffer.attach(texture)
                                                                                                                                                                              }
                                                                                                                                                                              return framebuffer
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Program = function(gl, vertex, fragment) {
                                                                                                                                                                              this.gl = gl;
                                                                                                                                                                              var p = this.program = gl.createProgram();
                                                                                                                                                                              gl.attachShader(p, this.makeShader(gl.VERTEX_SHADER, vertex));
                                                                                                                                                                              gl.attachShader(p, this.makeShader(gl.FRAGMENT_SHADER, fragment));
                                                                                                                                                                              gl.linkProgram(p);
                                                                                                                                                                              if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {
                                                                                                                                                                                throw new Error(gl.getProgramInfoLog(p))
                                                                                                                                                                              }
                                                                                                                                                                              this.vars = {}
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Program.prototype.makeShader = function(type, source) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              var shader = gl.createShader(type);
                                                                                                                                                                              gl.shaderSource(shader, source);
                                                                                                                                                                              gl.compileShader(shader);
                                                                                                                                                                              if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                                                                                                                                                                                return shader
                                                                                                                                                                              } else {
                                                                                                                                                                                throw new Error(gl.getShaderInfoLog(shader))
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Program.prototype.use = function() {
                                                                                                                                                                              this.gl.useProgram(this.program);
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Program.prototype.uniform = function(name, value, i) {
                                                                                                                                                                              if (value == null) {
                                                                                                                                                                                this.vars[name] = this.gl.getUniformLocation(this.program, name)
                                                                                                                                                                              } else {
                                                                                                                                                                                if (this.vars[name] == null) {
                                                                                                                                                                                  this.uniform(name)
                                                                                                                                                                                }
                                                                                                                                                                                var v = this.vars[name];
                                                                                                                                                                                if (Igloo.isArray(value)) {
                                                                                                                                                                                  var method = "uniform" + value.length + (i ? "i" : "f") + "v";
                                                                                                                                                                                  this.gl[method](v, value)
                                                                                                                                                                                } else {
                                                                                                                                                                                  if (typeof value === "number" || typeof value === "boolean") {
                                                                                                                                                                                    if (i) {
                                                                                                                                                                                      this.gl.uniform1i(v, value)
                                                                                                                                                                                    } else {
                                                                                                                                                                                      this.gl.uniform1f(v, value)
                                                                                                                                                                                    }
                                                                                                                                                                                  } else {
                                                                                                                                                                                    throw new Error("Invalid uniform value: " + value)
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Program.prototype.matrix = function(name, matrix, transpose) {
                                                                                                                                                                              if (this.vars[name] == null) {
                                                                                                                                                                                this.uniform(name)
                                                                                                                                                                              }
                                                                                                                                                                              var method = "uniformMatrix" + Math.sqrt(matrix.length) + "fv";
                                                                                                                                                                              this.gl[method](this.vars[name], Boolean(transpose), matrix);
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Program.prototype.uniformi = function(name, value) {
                                                                                                                                                                              return this.uniform(name, value, true)
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Program.prototype.attrib = function(name, value, size, stride) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              if (value == null) {
                                                                                                                                                                                this.vars[name] = gl.getAttribLocation(this.program, name)
                                                                                                                                                                              } else {
                                                                                                                                                                                if (this.vars[name] == null) {
                                                                                                                                                                                  this.attrib(name)
                                                                                                                                                                                }
                                                                                                                                                                                value.bind();
                                                                                                                                                                                gl.enableVertexAttribArray(this.vars[name]);
                                                                                                                                                                                gl.vertexAttribPointer(this.vars[name], size, gl.FLOAT, false, stride == null ? 0 : stride, 0)
                                                                                                                                                                              }
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Program.prototype.draw = function(mode, count, type) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              if (type == null) {
                                                                                                                                                                                gl.drawArrays(mode, 0, count)
                                                                                                                                                                              } else {
                                                                                                                                                                                gl.drawElements(mode, count, type, 0)
                                                                                                                                                                              }
                                                                                                                                                                              if (gl.getError() !== gl.NO_ERROR) {
                                                                                                                                                                                throw new Error("WebGL rendering error")
                                                                                                                                                                              }
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Program.prototype.disable = function() {
                                                                                                                                                                              for (var attrib in this.vars) {
                                                                                                                                                                                var location = this.vars[attrib];
                                                                                                                                                                                if (this.vars.hasOwnProperty(attrib)) {
                                                                                                                                                                                  if (typeof location === "number") {
                                                                                                                                                                                    this.gl.disableVertexAttribArray(location)
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Buffer = function(gl, target) {
                                                                                                                                                                              this.gl = gl;
                                                                                                                                                                              this.buffer = gl.createBuffer();
                                                                                                                                                                              this.target = (target == null ? gl.ARRAY_BUFFER : target);
                                                                                                                                                                              this.size = -1
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Buffer.prototype.bind = function() {
                                                                                                                                                                              this.gl.bindBuffer(this.target, this.buffer);
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Buffer.prototype.update = function(data, usage) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              if (data instanceof Array) {
                                                                                                                                                                                data = new Float32Array(data)
                                                                                                                                                                              }
                                                                                                                                                                              usage = usage == null ? gl.DYNAMIC_DRAW : usage;
                                                                                                                                                                              this.bind();
                                                                                                                                                                              if (this.size !== data.byteLength) {
                                                                                                                                                                                gl.bufferData(this.target, data, usage);
                                                                                                                                                                                this.size = data.byteLength
                                                                                                                                                                              } else {
                                                                                                                                                                                gl.bufferSubData(this.target, 0, data)
                                                                                                                                                                              }
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Texture = function(gl, format, wrap, filter) {
                                                                                                                                                                              this.gl = gl;
                                                                                                                                                                              var texture = this.texture = gl.createTexture();
                                                                                                                                                                              gl.bindTexture(gl.TEXTURE_2D, texture);
                                                                                                                                                                              wrap = wrap == null ? gl.CLAMP_TO_EDGE : wrap;
                                                                                                                                                                              filter = filter == null ? gl.LINEAR : filter;
                                                                                                                                                                              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);
                                                                                                                                                                              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);
                                                                                                                                                                              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);
                                                                                                                                                                              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);
                                                                                                                                                                              this.format = format = format == null ? gl.RGBA : format
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Texture.prototype.bind = function(unit) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              if (unit != null) {
                                                                                                                                                                                gl.activeTexture(gl.TEXTURE0 + unit)
                                                                                                                                                                              }
                                                                                                                                                                              gl.bindTexture(gl.TEXTURE_2D, this.texture);
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Texture.prototype.blank = function(width, height) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              this.bind();
                                                                                                                                                                              gl.texImage2D(gl.TEXTURE_2D, 0, this.format, width, height, 0, this.format, gl.UNSIGNED_BYTE, null);
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Texture.prototype.set = function(source, width, height) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              this.bind();
                                                                                                                                                                              if (source instanceof Array) {
                                                                                                                                                                                source = new Uint8Array(source)
                                                                                                                                                                              }
                                                                                                                                                                              if (width != null || height != null) {
                                                                                                                                                                                gl.texImage2D(gl.TEXTURE_2D, 0, this.format, width, height, 0, this.format, gl.UNSIGNED_BYTE, source)
                                                                                                                                                                              } else {
                                                                                                                                                                                gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, gl.UNSIGNED_BYTE, source)
                                                                                                                                                                              }
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Texture.prototype.subset = function(source, xoff, yoff, width, height) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              this.bind();
                                                                                                                                                                              if (source instanceof Array) {
                                                                                                                                                                                source = new Uint8Array(source)
                                                                                                                                                                              }
                                                                                                                                                                              if (width != null || height != null) {
                                                                                                                                                                                gl.texSubImage2D(gl.TEXTURE_2D, 0, xoff, yoff, width, height, this.format, gl.UNSIGNED_BYTE, source)
                                                                                                                                                                              } else {
                                                                                                                                                                                gl.texSubImage2D(gl.TEXTURE_2D, 0, xoff, yoff, this.format, gl.UNSIGNED_BYTE, source)
                                                                                                                                                                              }
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Texture.prototype.copy = function(x, y, width, height) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.format, x, y, width, height, 0);
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Framebuffer = function(gl, framebuffer) {
                                                                                                                                                                              this.gl = gl;
                                                                                                                                                                              this.framebuffer = arguments.length == 2 ? framebuffer : gl.createFramebuffer();
                                                                                                                                                                              this.renderbuffer = null
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Framebuffer.prototype.bind = function() {
                                                                                                                                                                              this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer);
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Framebuffer.prototype.unbind = function() {
                                                                                                                                                                              this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Framebuffer.prototype.attach = function(texture) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              this.bind();
                                                                                                                                                                              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.texture, 0);
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            Igloo.Framebuffer.prototype.attachDepth = function(width, height) {
                                                                                                                                                                              var gl = this.gl;
                                                                                                                                                                              this.bind();
                                                                                                                                                                              if (this.renderbuffer == null) {
                                                                                                                                                                                this.renderbuffer = gl.createRenderbuffer();
                                                                                                                                                                                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);
                                                                                                                                                                                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.renderbuffer)
                                                                                                                                                                              }
                                                                                                                                                                              return this
                                                                                                                                                                            }
                                                                                                                                                                            ;
                                                                                                                                                                            (function() {
                                                                                                                                                                              var env = {};
                                                                                                                                                                              env.isIpad = (/ipad/gi).test(navigator.appVersion);
                                                                                                                                                                              env.isHiRes = window.devicePixelRatio && window.devicePixelRatio > 1;
                                                                                                                                                                              env.isIphone = (/iphone/gi).test(navigator.appVersion);
                                                                                                                                                                              env.isAndroid = (/android/gi).test(navigator.appVersion);
                                                                                                                                                                              env.isTouch = env.isIphone || env.isIpad || env.isAndroid;
                                                                                                                                                                              env.isFirefox = (/Firefox/.test(navigator.userAgent));
                                                                                                                                                                              env.isMSIE = (/MSIE/.test(navigator.userAgent));
                                                                                                                                                                              env.isMobile = env.isIphone || env.isAndroid;
                                                                                                                                                                              env.isSafari = /^((?!chrome).)*safari/i.test(navigator.userAgent);
                                                                                                                                                                              env.LAUNCH_EVENT = env.isTouch ? "touchstart" : "mousedown";
                                                                                                                                                                              env.MOVE_EVENT = env.isTouch ? "touchmove" : "mousemove";
                                                                                                                                                                              env.END_EVENT = env.isTouch ? "touchend" : "mouseup";
                                                                                                                                                                              if (window.F) {
                                                                                                                                                                                window.F.env = env
                                                                                                                                                                              } else {
                                                                                                                                                                                window.F = {
                                                                                                                                                                                  env: env
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                              (function() {
                                                                                                                                                                                var lastTime = 0;
                                                                                                                                                                                var vendors = ["webkit", "moz"];
                                                                                                                                                                                for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
                                                                                                                                                                                  window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
                                                                                                                                                                                  window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"]
                                                                                                                                                                                }
                                                                                                                                                                                if (!window.requestAnimationFrame) {
                                                                                                                                                                                  window.requestAnimationFrame = function(callback, element) {
                                                                                                                                                                                    var currTime = new Date().getTime();
                                                                                                                                                                                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                                                                                                                                                                                    var id = window.setTimeout(function() {
                                                                                                                                                                                      callback(currTime + timeToCall)
                                                                                                                                                                                    }, timeToCall);
                                                                                                                                                                                    lastTime = currTime + timeToCall;
                                                                                                                                                                                    return id
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                                if (!window.cancelAnimationFrame) {
                                                                                                                                                                                  window.cancelAnimationFrame = function(id) {
                                                                                                                                                                                    clearTimeout(id)
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            )();
                                                                                                                                                                            (function() {
                                                                                                                                                                              try {
                                                                                                                                                                                if (typeof console == "undefined") {
                                                                                                                                                                                  console = {
                                                                                                                                                                                    log: function() {}
                                                                                                                                                                                  }
                                                                                                                                                                                } else {
                                                                                                                                                                                  if (typeof console.log == "undefined") {
                                                                                                                                                                                    console.log = function() {}
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              } catch (err) {}
                                                                                                                                                                            }
                                                                                                                                                                          )();
                                                                                                                                                                          /*!
                                                                                                                                                                          * jQuery scrollbarWidth - v0.2 - 2/11/2009
                                                                                                                                                                          * http://benalman.com/projects/jquery-misc-plugins/
                                                                                                                                                                          *
                                                                                                                                                                          * Copyright (c) 2010 "Cowboy" Ben Alman
                                                                                                                                                                          * Dual licensed under the MIT and GPL licenses.
                                                                                                                                                                          * http://benalman.com/about/license/
                                                                                                                                                                          */
                                                                                                                                                                          if (jQuery) {
                                                                                                                                                                            (function($, undefined, width) {
                                                                                                                                                                              $.scrollbarWidth = function() {
                                                                                                                                                                                var parent, child;
                                                                                                                                                                                if (width === undefined) {
                                                                                                                                                                                  parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body");
                                                                                                                                                                                  child = parent.children();
                                                                                                                                                                                  width = child.innerWidth() - child.height(99).innerWidth();
                                                                                                                                                                                  parent.remove()
                                                                                                                                                                                }
                                                                                                                                                                                return width
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          )(jQuery)
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    )();
                                                                                                                                                                    "use strict";
                                                                                                                                                                    (function() {
                                                                                                                                                                      if (!window.F) {
                                                                                                                                                                        window.F = {}
                                                                                                                                                                      }
                                                                                                                                                                      function dispatchEvent(type, params) {
                                                                                                                                                                        var callbacks = this.listeners[type];
                                                                                                                                                                        if (callbacks) {
                                                                                                                                                                          for (var i = 0, L = callbacks.length; i < L; i++) {
                                                                                                                                                                            callbacks[i](params)
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      function addEventListener(type, callback) {
                                                                                                                                                                        if (!callback) {
                                                                                                                                                                          console.log("Missing callback for ", type)
                                                                                                                                                                        }
                                                                                                                                                                        var callbacks = this.listeners[type];
                                                                                                                                                                        if (callbacks && callbacks.indexOf(callback) < 0) {
                                                                                                                                                                          callbacks.push(callback)
                                                                                                                                                                        } else {
                                                                                                                                                                          this.listeners[type] = [callback]
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      function removeEventListener(type, callback) {
                                                                                                                                                                        var callbacks = this.listeners[type]
                                                                                                                                                                        , index = callbacks ? callbacks.indexOf(callback) : -1
                                                                                                                                                                        , L = callbacks.length;
                                                                                                                                                                        if (index == 0) {
                                                                                                                                                                          callbacks.shift();
                                                                                                                                                                          this.listeners[type] = callbacks
                                                                                                                                                                        } else {
                                                                                                                                                                          if (index > 0) {
                                                                                                                                                                            callbacks.splice(index, 1);
                                                                                                                                                                            this.listeners[type] = callbacks
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      window.F.eventify = function(obj) {
                                                                                                                                                                        obj.listeners = {};
                                                                                                                                                                        obj.addEventListener = addEventListener;
                                                                                                                                                                        obj.removeEventListener = removeEventListener;
                                                                                                                                                                        obj.dispatchEvent = dispatchEvent;
                                                                                                                                                                        obj.listen = addEventListener;
                                                                                                                                                                        obj.ignore = removeEventListener;
                                                                                                                                                                        obj.announce = dispatchEvent
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  )();
                                                                                                                                                                  "use strict";
                                                                                                                                                                  (function() {
                                                                                                                                                                    if (!window.F) {
                                                                                                                                                                      window.F = {}
                                                                                                                                                                    }
                                                                                                                                                                    function inheritFrom(base, child) {
                                                                                                                                                                      var defined = {};
                                                                                                                                                                      for (var e in child.prototype) {
                                                                                                                                                                        defined[e] = child.prototype[e]
                                                                                                                                                                      }
                                                                                                                                                                      child.prototype = new base();
                                                                                                                                                                      child.prototype.constructor = child;
                                                                                                                                                                      for (var e in defined) {
                                                                                                                                                                        child.prototype[e] = defined[e]
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    function isEmptyObject(obj) {
                                                                                                                                                                      if (!obj) {
                                                                                                                                                                        return true
                                                                                                                                                                      }
                                                                                                                                                                      var names = Object.getOwnPropertyNames(obj)
                                                                                                                                                                      , empty = names.length == 0;
                                                                                                                                                                      return empty
                                                                                                                                                                    }
                                                                                                                                                                    function objectUpsert(obj, key) {
                                                                                                                                                                      var val = obj[key];
                                                                                                                                                                      if (undefined === val) {
                                                                                                                                                                        val = {};
                                                                                                                                                                        obj[key] = val
                                                                                                                                                                      }
                                                                                                                                                                      return val
                                                                                                                                                                    }
                                                                                                                                                                    if (!Object.getOwnPropertyNames) {
                                                                                                                                                                      isEmptyObject = function(obj) {
                                                                                                                                                                        for (var e in obj) {
                                                                                                                                                                          return false
                                                                                                                                                                        }
                                                                                                                                                                        return true
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    window.F.inheritFrom = inheritFrom;
                                                                                                                                                                    window.F.isEmptyObject = isEmptyObject;
                                                                                                                                                                    window.F.objectUpsert = objectUpsert
                                                                                                                                                                  }
                                                                                                                                                                )();
                                                                                                                                                                "use strict";
                                                                                                                                                                (function() {
                                                                                                                                                                  if (!window.F) {
                                                                                                                                                                    window.F = {}
                                                                                                                                                                  }
                                                                                                                                                                  var ATTRACTION = 0.2;
                                                                                                                                                                  var DAMPING = 0.5;
                                                                                                                                                                  var EPSILON = 0.0001;
                                                                                                                                                                  function SoftFloat() {
                                                                                                                                                                    this.value = 0;
                                                                                                                                                                    this.velocity = 0;
                                                                                                                                                                    this.acceleration = 0;
                                                                                                                                                                    this.damping = DAMPING;
                                                                                                                                                                    this.attraction = ATTRACTION;
                                                                                                                                                                    this.epsilon = EPSILON;
                                                                                                                                                                    this.atTarget = true;
                                                                                                                                                                    if (arguments.length === 1) {
                                                                                                                                                                      this.value = arguments[0]
                                                                                                                                                                    } else {
                                                                                                                                                                      if (arguments.length === 3) {
                                                                                                                                                                        this.value = arguments[0];
                                                                                                                                                                        this.damping = arguments[1];
                                                                                                                                                                        this.attraction = arguments[2]
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    this.target = this.value
                                                                                                                                                                  }
                                                                                                                                                                  SoftFloat.prototype.set = function(v) {
                                                                                                                                                                    this.value = v;
                                                                                                                                                                    this.atTarget = true
                                                                                                                                                                  }
                                                                                                                                                                  ;
                                                                                                                                                                  SoftFloat.prototype.pin = function() {
                                                                                                                                                                    if (arguments.length == 1) {
                                                                                                                                                                      this.target = arguments[0]
                                                                                                                                                                    }
                                                                                                                                                                    this.value = this.target;
                                                                                                                                                                    this.atTarget = true
                                                                                                                                                                  }
                                                                                                                                                                  ;
                                                                                                                                                                  SoftFloat.prototype.get = function() {
                                                                                                                                                                    return this.value
                                                                                                                                                                  }
                                                                                                                                                                  ;
                                                                                                                                                                  SoftFloat.prototype.getInt = function() {
                                                                                                                                                                    return Math.floor(this.value)
                                                                                                                                                                  }
                                                                                                                                                                  ;
                                                                                                                                                                  SoftFloat.prototype.update = function() {
                                                                                                                                                                    if (!this.atTarget) {
                                                                                                                                                                      this.acceleration += this.attraction * (this.target - this.value);
                                                                                                                                                                      this.velocity = (this.velocity + this.acceleration) * this.damping;
                                                                                                                                                                      this.value += this.velocity;
                                                                                                                                                                      this.acceleration = 0;
                                                                                                                                                                      if (Math.abs(this.velocity) > this.epsilon) {
                                                                                                                                                                        return true
                                                                                                                                                                      }
                                                                                                                                                                      this.value = this.target;
                                                                                                                                                                      this.atTarget = true
                                                                                                                                                                    }
                                                                                                                                                                    return false
                                                                                                                                                                  }
                                                                                                                                                                  ;
                                                                                                                                                                  SoftFloat.prototype.setTarget = function(t) {
                                                                                                                                                                    this.atTarget = false;
                                                                                                                                                                    this.target = t
                                                                                                                                                                  }
                                                                                                                                                                  ;
                                                                                                                                                                  SoftFloat.prototype.getTarget = function() {
                                                                                                                                                                    return this.target
                                                                                                                                                                  }
                                                                                                                                                                  ;
                                                                                                                                                                  SoftFloat.prototype.isSet = function() {
                                                                                                                                                                    return this.getTarget() == 1
                                                                                                                                                                  }
                                                                                                                                                                  ;
                                                                                                                                                                  SoftFloat.prototype.toggle = function() {
                                                                                                                                                                    this.setTarget(this.getTarget() == 1 ? 0 : 1)
                                                                                                                                                                  }
                                                                                                                                                                  ;
                                                                                                                                                                  window.F.SoftFloat = SoftFloat
                                                                                                                                                                }
                                                                                                                                                              )();
                                                                                                                                                              (function() {
                                                                                                                                                                var abs = Math.abs
                                                                                                                                                                , round = Math.round;
                                                                                                                                                                function hue2rgb(p, q, t) {
                                                                                                                                                                  if (t < 1 / 6) {
                                                                                                                                                                    return p + (q - p) * 6 * t
                                                                                                                                                                  }
                                                                                                                                                                  if (t < 1 / 2) {
                                                                                                                                                                    return q
                                                                                                                                                                  }
                                                                                                                                                                  if (t < 2 / 3) {
                                                                                                                                                                    return p + (q - p) * (2 / 3 - t) * 6
                                                                                                                                                                  }
                                                                                                                                                                  return p
                                                                                                                                                                }
                                                                                                                                                                function hsl2rgb(hsl) {
                                                                                                                                                                  var r, g, b, h = hsl[0] / 360, s = hsl[1] / 100, l = hsl[2] / 100;
                                                                                                                                                                  if (s == 0) {
                                                                                                                                                                    r = g = b = l
                                                                                                                                                                  } else {
                                                                                                                                                                    while (h < 0) {
                                                                                                                                                                      h += 1
                                                                                                                                                                    }
                                                                                                                                                                    while (h > 1) {
                                                                                                                                                                      h -= 1
                                                                                                                                                                    }
                                                                                                                                                                    var chroma = (1 - abs(2 * l - 1)) * s;
                                                                                                                                                                    var x = chroma * (1 - abs((h * 6) % 2 - 1));
                                                                                                                                                                    var m = l - chroma * 0.5;
                                                                                                                                                                    if (h < 1 / 6) {
                                                                                                                                                                      r = chroma;
                                                                                                                                                                      g = x;
                                                                                                                                                                      b = 0
                                                                                                                                                                    } else {
                                                                                                                                                                      if (h < 2 / 6) {
                                                                                                                                                                        r = x;
                                                                                                                                                                        g = chroma;
                                                                                                                                                                        b = 0
                                                                                                                                                                      } else {
                                                                                                                                                                        if (h < 3 / 6) {
                                                                                                                                                                          r = 0;
                                                                                                                                                                          g = chroma;
                                                                                                                                                                          b = x
                                                                                                                                                                        } else {
                                                                                                                                                                          if (h < 4 / 6) {
                                                                                                                                                                            r = 0;
                                                                                                                                                                            g = x;
                                                                                                                                                                            b = chroma
                                                                                                                                                                          } else {
                                                                                                                                                                            if (h < 5 / 6) {
                                                                                                                                                                              r = x;
                                                                                                                                                                              g = 0;
                                                                                                                                                                              b = chroma
                                                                                                                                                                            } else {
                                                                                                                                                                              r = chroma;
                                                                                                                                                                              g = 0;
                                                                                                                                                                              b = x
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    r += m;
                                                                                                                                                                    g += m;
                                                                                                                                                                    b += m
                                                                                                                                                                  }
                                                                                                                                                                  return [round(r * 255), round(g * 255), round(b * 255)]
                                                                                                                                                                }
                                                                                                                                                                function rgb2hsl(rgb) {
                                                                                                                                                                  var red = 1 * rgb[0] / 255;
                                                                                                                                                                  var green = 1 * rgb[1] / 255;
                                                                                                                                                                  var blue = 1 * rgb[2] / 255;
                                                                                                                                                                  var min = red < green ? red : green;
                                                                                                                                                                  min = min < blue ? min : blue;
                                                                                                                                                                  var max = red > green ? red : green;
                                                                                                                                                                  max = max > blue ? max : blue;
                                                                                                                                                                  var l = 50 * (max + min);
                                                                                                                                                                  var h, s;
                                                                                                                                                                  if (max == min) {
                                                                                                                                                                    h = 0;
                                                                                                                                                                    s = 0
                                                                                                                                                                  } else {
                                                                                                                                                                    var maxMinDiff = max - min;
                                                                                                                                                                    if (l <= 50) {
                                                                                                                                                                      s = 100 * maxMinDiff / (max + min)
                                                                                                                                                                    } else {
                                                                                                                                                                      s = 100 * maxMinDiff / (2 - max - min)
                                                                                                                                                                    }
                                                                                                                                                                    if (max == red) {
                                                                                                                                                                      h = (60 * ((green - blue) / maxMinDiff) + 360) % 360
                                                                                                                                                                    } else {
                                                                                                                                                                      if (max == green) {
                                                                                                                                                                        h = 60 * ((blue - red) / maxMinDiff) + 120
                                                                                                                                                                      } else {
                                                                                                                                                                        if (max == blue) {
                                                                                                                                                                          h = 60 * ((red - green) / maxMinDiff) + 240
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                  return [h, s, l]
                                                                                                                                                                }
                                                                                                                                                                function lerpColor(c1, c2, progress) {
                                                                                                                                                                  if (progress <= 0) {
                                                                                                                                                                    return c1.slice(0)
                                                                                                                                                                  }
                                                                                                                                                                  if (progress >= 1) {
                                                                                                                                                                    return c2.slice(0)
                                                                                                                                                                  }
                                                                                                                                                                  var result = [];
                                                                                                                                                                  for (var i = 0, L = c1.length; i < L; i++) {
                                                                                                                                                                    result[i] = c1[i] + (c2[i] - c1[i]) * progress
                                                                                                                                                                  }
                                                                                                                                                                  return result
                                                                                                                                                                }
                                                                                                                                                                function test() {
                                                                                                                                                                  function rgb2hslAndBack(rgb) {
                                                                                                                                                                    var hsl = rgb2hsl(rgb);
                                                                                                                                                                    var backAgain = hsl2rgb(hsl);
                                                                                                                                                                    var success = true;
                                                                                                                                                                    for (var i = 0, L = backAgain.length; i < L; i++) {
                                                                                                                                                                      backAgain[i] = Math.round(backAgain[i]);
                                                                                                                                                                      if (backAgain[i] != rgb[i]) {
                                                                                                                                                                        success = false
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    console.log(rgb, backAgain, success, hsl)
                                                                                                                                                                  }
                                                                                                                                                                  rgb2hslAndBack([0, 0, 0]);
                                                                                                                                                                  rgb2hslAndBack([255, 255, 255]);
                                                                                                                                                                  rgb2hslAndBack([255, 0, 0]);
                                                                                                                                                                  rgb2hslAndBack([0, 255, 0]);
                                                                                                                                                                  rgb2hslAndBack([0, 0, 255]);
                                                                                                                                                                  rgb2hslAndBack([255, 0, 1]);
                                                                                                                                                                  rgb2hslAndBack([255, 255, 0]);
                                                                                                                                                                  rgb2hslAndBack([255, 255, 100]);
                                                                                                                                                                  rgb2hslAndBack([200, 200, 200]);
                                                                                                                                                                  rgb2hslAndBack([100, 100, 100]);
                                                                                                                                                                  rgb2hslAndBack([0, 128, 255]);
                                                                                                                                                                  rgb2hslAndBack([128, 128, 255]);
                                                                                                                                                                  rgb2hslAndBack([100, 150, 200])
                                                                                                                                                                }
                                                                                                                                                                if (!window.F) {
                                                                                                                                                                  window.F = {}
                                                                                                                                                                }
                                                                                                                                                                window.F.color = {
                                                                                                                                                                  hsl2rgb: hsl2rgb,
                                                                                                                                                                  rgb2hsl: rgb2hsl,
                                                                                                                                                                  lerpColor: lerpColor
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            )();
                                                                                                                                                            "use strict";
                                                                                                                                                            (function() {
                                                                                                                                                              if (!window.F) {
                                                                                                                                                                window.F = {}
                                                                                                                                                              }
                                                                                                                                                              var log = Math.log
                                                                                                                                                              , floor = Math.floor
                                                                                                                                                              , ceil = Math.ceil
                                                                                                                                                              , max = Math.max
                                                                                                                                                              , pow = Math.pow;
                                                                                                                                                              function NumberLabeler(minValue, maxValue, ticks) {
                                                                                                                                                                this.valueMin = minValue;
                                                                                                                                                                this.valueMax = maxValue;
                                                                                                                                                                var range = nicenum(maxValue - minValue, false);
                                                                                                                                                                var d = nicenum(range / (ticks - 1), true);
                                                                                                                                                                var graphMin = floor(minValue / d) * d;
                                                                                                                                                                var graphMax = ceil(maxValue / d) * d;
                                                                                                                                                                var nfrac = floor(max(-floor(log10(d)), 0));
                                                                                                                                                                this.value = [];
                                                                                                                                                                this.label = [];
                                                                                                                                                                for (var x = graphMin; x < graphMax + 0.5 * d; x += d) {
                                                                                                                                                                  this.value.push(x);
                                                                                                                                                                  this.label.push(x.toFixed(nfrac))
                                                                                                                                                                }
                                                                                                                                                                this.tickCount = this.value.length
                                                                                                                                                              }
                                                                                                                                                              function log10(num) {
                                                                                                                                                                return log(num) / log(10)
                                                                                                                                                              }
                                                                                                                                                              function nicenum(x, round) {
                                                                                                                                                                var expv = floor(log10(x));
                                                                                                                                                                var f = x / pow(10, expv);
                                                                                                                                                                var nf;
                                                                                                                                                                if (round) {
                                                                                                                                                                  if (f < 1.5) {
                                                                                                                                                                    nf = 1
                                                                                                                                                                  } else {
                                                                                                                                                                    if (f < 3) {
                                                                                                                                                                      nf = 2
                                                                                                                                                                    } else {
                                                                                                                                                                      if (f < 6) {
                                                                                                                                                                        nf = 4
                                                                                                                                                                      } else {
                                                                                                                                                                        nf = 10
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                } else {
                                                                                                                                                                  if (f <= 1) {
                                                                                                                                                                    nf = 1
                                                                                                                                                                  } else {
                                                                                                                                                                    if (f <= 2) {
                                                                                                                                                                      nf = 2
                                                                                                                                                                    } else {
                                                                                                                                                                      if (f <= 4) {
                                                                                                                                                                        nf = 4
                                                                                                                                                                      } else {
                                                                                                                                                                        nf = 10
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                                return nf * pow(10, expv)
                                                                                                                                                              }
                                                                                                                                                              function commify(what) {
                                                                                                                                                                return String(what).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
                                                                                                                                                              }
                                                                                                                                                              NumberLabeler.nicenum = nicenum;
                                                                                                                                                              NumberLabeler.commify = commify;
                                                                                                                                                              window.F.NumberLabeler = NumberLabeler
                                                                                                                                                            }
                                                                                                                                                          )();
                                                                                                                                                          "use strict";
                                                                                                                                                          (function(app) {
                                                                                                                                                            var constants = {
                                                                                                                                                              APP_LAUNCH_EVENT: "app_launch_event",
                                                                                                                                                              DOM_READY_EVENT: "dom_ready_event",
                                                                                                                                                              INTRO_COMPLETE_EVENT: "intro_complete_event",
                                                                                                                                                              PARTICLES_READY_EVENT: "particles_ready_event",
                                                                                                                                                              RESIZE_EVENT: "resize_event",
                                                                                                                                                              ZOOM_PAN_EVENT: "zoom_pan_event",
                                                                                                                                                              ZOOM_RESET_EVENT: "zoom_reset_event",
                                                                                                                                                              BOX_FOCUS_EVENT: "box_focus_event",
                                                                                                                                                              TIME_UPDATE_EVENT: "time_update_event",
                                                                                                                                                              PLAYBACK_EVENT: "playback_event",
                                                                                                                                                              NODES_INITIALIZED_EVENT: "nodes_initialized_event",
                                                                                                                                                              DATA_LOAD_EVENT: "data_load_event",
                                                                                                                                                              LEGEND_SPEED_EVENT: "legend_speed_event",
                                                                                                                                                              LOOPER_CONTROL_EVENT: "looper_control_event",
                                                                                                                                                              GL_STATUS_EVENT: "gl_status_event",
                                                                                                                                                              SELECT_EVENT: "select_event",
                                                                                                                                                              SHARE_CONTROL_EVENT: "share_control_event",
                                                                                                                                                              HEX_ANGLES: [],
                                                                                                                                                              HISTOGRAM_MINUTES_PER_BUCKET: 20,
                                                                                                                                                              GROUP_COUNT: 4,
                                                                                                                                                              GROUP_NAMES: "Practice,Patient,Orders,Payer".split(","),
                                                                                                                                                              SUBGROUP_LABELS: "Practice Encounter,Practice to Patient,Practice to Orders,Practice to Payer".split(","),
                                                                                                                                                              GROUP_COLORS: [[89, 44, 129], [222, 137, 10], [0, 97, 150], [122, 152, 27], [134, 51, 117]],
                                                                                                                                                              GROUP_LERP_COLORS: [[133, 51, 117], [255, 219, 0], [0, 216, 255], [190, 253, 0], [231, 0, 196], ],
                                                                                                                                                              PATH_TYPES: {
                                                                                                                                                                BEZIER: 1,
                                                                                                                                                                SUPER_INTRA: 2,
                                                                                                                                                                SUPER_OUTER: 3,
                                                                                                                                                                INTRA: 4,
                                                                                                                                                                OUTER: 5
                                                                                                                                                              },
                                                                                                                                                              INNER_RING_MARGIN_MIN: 40,
                                                                                                                                                              INNER_RING_MARGIN_RANGE: 20,
                                                                                                                                                              RING_MARGIN_COEFFICIENT: 1.6,
                                                                                                                                                              RING_MARGIN_MIN: 50,
                                                                                                                                                              ARC_EVENT_MARGIN: 24,
                                                                                                                                                              PRACTICE_EVENT_MARGIN: 6,
                                                                                                                                                              INTRO_RING_MARGIN_MIN: 80,
                                                                                                                                                              INTRO_NODE_SIZE: 3,
                                                                                                                                                              EVENT_MIN_SIZE: 2,
                                                                                                                                                              PRACTICE_EVENT_MIN_SIZE: 4,
                                                                                                                                                              EVENT_SIZE_RANGE: 0.5,
                                                                                                                                                              PRACTICE_EVENT_SIZE_RANGE: 1,
                                                                                                                                                              EVENT_LAYOUT_MIN_SIZE: 6,
                                                                                                                                                              PRACTICE_EVENT_LAYOUT_MIN_SIZE: 6,
                                                                                                                                                              EVENT_LAYOUT_SIZE_RANGE: 6.5,
                                                                                                                                                              PRACTICE_EVENT_LAYOUT_SIZE_RANGE: 14,
                                                                                                                                                              MAX_EVENT_PARTICLE_COUNT: 500,
                                                                                                                                                              MAX_LERPER_COUNT: 90000,
                                                                                                                                                              PARTICLE_ALPHA: 0.45,
                                                                                                                                                              PARTICLE_HIGHLIGHT_ALPHA: 0.9,
                                                                                                                                                              PARTICLE_PUSHBACK_ALPHA: 0.045,
                                                                                                                                                              PARTICLE_OFFSET_RANGE: 6,
                                                                                                                                                              PARTICLE_VELOCITY_ROOT: 0.8,
                                                                                                                                                              PARTICLE_VELOCITY_RANGE: 0.8,
                                                                                                                                                              PARTICLE_VELOCITY_MOD: 0.15,
                                                                                                                                                              PARTICLE_SCATTER_BASE: 0.05,
                                                                                                                                                              PARTICLE_SCATTER_RANGE: 0.15,
                                                                                                                                                              PARTICLE_SCATTER_LIMIT: 1,
                                                                                                                                                              PARTICLE_WEIGHT_BASE: 1.1,
                                                                                                                                                              PARTICLE_WEIGHT_DENOMINATOR_BASE: 1.9,
                                                                                                                                                              PARTICLE_WEIGHT_SCALE: 2.7,
                                                                                                                                                              PARTICLE_WEIGHT_POWER: 0.7,
                                                                                                                                                              MIN_PARTICLE_WEIGHT: 0.1,
                                                                                                                                                              MAX_PARTICLE_WEIGHT: 0.8,
                                                                                                                                                              PATH_STOP_COUNT: 18,
                                                                                                                                                              OUTSIDE_PATH_STOP_COUNT: 18,
                                                                                                                                                              TRAVEL_PIXELS: 7,
                                                                                                                                                              RESET_ZOOM_PAN: 1,
                                                                                                                                                              ZOOM_IN: 2,
                                                                                                                                                              ZOOM_OUT: 3,
                                                                                                                                                              DEFAULT_ZOOM: 0.75,
                                                                                                                                                              PAUSE: 1,
                                                                                                                                                              PLAY: 2,
                                                                                                                                                              DRAGGING: 3,
                                                                                                                                                              HOVER: 1,
                                                                                                                                                              LOCK: 2,
                                                                                                                                                              CLEAR: 0,
                                                                                                                                                              GROUP: 1,
                                                                                                                                                              GRAVITRON: 2,
                                                                                                                                                              READY: 1,
                                                                                                                                                              GL_UNSUPPORTED: 2,
                                                                                                                                                              GL_WIMPY: 3,
                                                                                                                                                              CENTERS_LOADED: 4,
                                                                                                                                                              PARTICLES_LOADED: 5,
                                                                                                                                                              MIN_ZOOM: 0.25,
                                                                                                                                                              MAX_ZOOM: 4,
                                                                                                                                                              HISTOGRAM_CHART_WIDTH: 216,
                                                                                                                                                              HISTOGRAM_CHART_HEIGHT: 40,
                                                                                                                                                              HISTOGRAM_TOP_MARGIN_HEIGHT: 20,
                                                                                                                                                              FINISHED: 0,
                                                                                                                                                              BEFORE: -1,
                                                                                                                                                              AFTER: 86400,
                                                                                                                                                              DRAG_THRESHHOLD_SQUARED: 20 * 20
                                                                                                                                                            };
                                                                                                                                                            constants.SECONDS_PER_HISTOGRAM_BUCKET = 60 * constants.HISTOGRAM_MINUTES_PER_BUCKET;
                                                                                                                                                            constants.HISTOGRAM_INTERVAL_COUNT = constants.AFTER / constants.SECONDS_PER_HISTOGRAM_BUCKET;
                                                                                                                                                            (function() {
                                                                                                                                                              var TAU = Math.PI * 2, cos = Math.cos, sin = Math.sin, a;
                                                                                                                                                              for (var i = 0; i < 7; i++) {
                                                                                                                                                                a = TAU * i / 6;
                                                                                                                                                                constants.HEX_ANGLES[i] = [cos(a), sin(a)]
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          )();
                                                                                                                                                          var requiredModules = ("dom,dataLoader,intro,particles,footer,histo,legend,particulate,zoomControls,particleGL,Lerper,Gravitron,ArcGroup,BezierPath,OuterPath,IntraRingPath").split(",")
                                                                                                                                                          , firstRun = true;
                                                                                                                                                          function init() {
                                                                                                                                                            for (var i = requiredModules.length - 1; i >= 0; i--) {
                                                                                                                                                              var moduleName = requiredModules[i];
                                                                                                                                                              if (!app[moduleName]) {
                                                                                                                                                                setTimeout(init, 1);
                                                                                                                                                                if (firstRun) {
                                                                                                                                                                  firstRun = false
                                                                                                                                                                }
                                                                                                                                                                return
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                            app.listen(constants.APP_LAUNCH_EVENT, app.particulate.init);
                                                                                                                                                            app.listen(constants.APP_LAUNCH_EVENT, app.dom.init);
                                                                                                                                                            app.listen(constants.APP_LAUNCH_EVENT, app.dataLoader.load);
                                                                                                                                                            app.dom.listen(constants.DOM_READY_EVENT, app.dataLoader.setLabelTemplate);
                                                                                                                                                            app.dom.listen(constants.APP_LAUNCH_EVENT, app.intro.setDomReady);
                                                                                                                                                            app.dom.listen(constants.SELECT_EVENT, app.particles.handleSelect);
                                                                                                                                                            app.dom.listen(constants.RESIZE_EVENT, app.particulate.setSize);
                                                                                                                                                            app.dom.listen(constants.RESIZE_EVENT, app.particleGL.setSize);
                                                                                                                                                            app.dom.listen(constants.RESIZE_EVENT, app.footer.setSize);
                                                                                                                                                            app.dom.listen(constants.RESIZE_EVENT, app.zoomControls.setSize);
                                                                                                                                                            app.dataLoader.listen(constants.NODES_INITIALIZED_EVENT, app.particulate.setData);
                                                                                                                                                            app.dataLoader.listen(constants.NODES_INITIALIZED_EVENT, app.particleGL.setData);
                                                                                                                                                            app.dataLoader.listen(constants.NODES_INITIALIZED_EVENT, app.legend.setData);
                                                                                                                                                            app.dataLoader.listen(constants.DATA_LOAD_EVENT, app.particulate.setData);
                                                                                                                                                            app.dataLoader.listen(constants.DATA_LOAD_EVENT, app.histo.setData);
                                                                                                                                                            app.dataLoader.listen(constants.DATA_LOAD_EVENT, app.particles.setData);
                                                                                                                                                            app.dataLoader.listen(constants.NODES_INITIALIZED_EVENT, app.intro.setData);
                                                                                                                                                            app.intro.listen(constants.SELECT_EVENT, app.legend.handleSelect);
                                                                                                                                                            app.intro.listen(constants.ZOOM_PAN_EVENT, app.particulate.setZoomPan);
                                                                                                                                                            app.intro.listen(constants.ZOOM_PAN_EVENT, app.zoomControls.setZoomPan);
                                                                                                                                                            app.intro.listen(constants.LEGEND_SPEED_EVENT, app.legend.setSpeedParams);
                                                                                                                                                            app.intro.listen(constants.LOOPER_CONTROL_EVENT, app.particulate.setUpdater);
                                                                                                                                                            app.intro.listen(constants.INTRO_COMPLETE_EVENT, app.footer.bind);
                                                                                                                                                            app.intro.listen(constants.INTRO_COMPLETE_EVENT, app.histo.bind);
                                                                                                                                                            app.intro.listen(constants.INTRO_COMPLETE_EVENT, app.legend.bind);
                                                                                                                                                            app.intro.listen(constants.INTRO_COMPLETE_EVENT, app.particulate.bind);
                                                                                                                                                            app.intro.listen(constants.INTRO_COMPLETE_EVENT, app.zoomControls.bind);
                                                                                                                                                            app.intro.listen(constants.INTRO_COMPLETE_EVENT, app.dom.endIntro);
                                                                                                                                                            app.intro.listen(constants.INTRO_COMPLETE_EVENT, app.dom.activateControls);
                                                                                                                                                            app.intro.listen(constants.INTRO_COMPLETE_EVENT, app.particles.handleIntroComplete);
                                                                                                                                                            app.legend.listen(constants.SELECT_EVENT, app.particles.handleSelect);
                                                                                                                                                            app.histo.listen(constants.TIME_UPDATE_EVENT, app.particles.setSecond);
                                                                                                                                                            app.histo.listen(constants.PLAYBACK_EVENT, app.particles.setPlayback);
                                                                                                                                                            app.histo.listen(constants.PLAYBACK_EVENT, app.particleGL.setPlayback);
                                                                                                                                                            app.particles.listen(constants.DATA_LOAD_EVENT, app.particleGL.setParticleData);
                                                                                                                                                            app.particles.listen(constants.TIME_UPDATE_EVENT, app.histo.setSecond);
                                                                                                                                                            app.particles.listen(constants.SELECT_EVENT, app.legend.handleSelect);
                                                                                                                                                            app.particles.listen(constants.SELECT_EVENT, app.footer.handleSelect);
                                                                                                                                                            app.particles.listen(constants.SELECT_EVENT, app.histo.handleSelect);
                                                                                                                                                            app.particles.listen(constants.SELECT_EVENT, app.particulate.handleSelect);
                                                                                                                                                            app.particles.listen(constants.SELECT_EVENT, app.dom.handleSelect);
                                                                                                                                                            app.particles.listen(constants.LOOPER_CONTROL_EVENT, app.particulate.setUpdater);
                                                                                                                                                            app.particles.listen(constants.LOOPER_CONTROL_EVENT, app.particleGL.setUpdater);
                                                                                                                                                            app.particles.listen(constants.PARTICLES_READY_EVENT, app.intro.showSkipOption);
                                                                                                                                                            app.particles.listen(constants.BOX_FOCUS_EVENT, app.particulate.setFocus);
                                                                                                                                                            app.particleGL.listen(constants.GL_STATUS_EVENT, app.dom.setWebGLNotOK);
                                                                                                                                                            app.particleGL.listen(constants.GL_STATUS_EVENT, app.particulate.setParticleFunction);
                                                                                                                                                            app.particleGL.listen(constants.GL_STATUS_EVENT, app.intro.setShaderReady);
                                                                                                                                                            app.particleGL.listen(constants.GL_STATUS_EVENT, app.particles.setPathUpdateFunction);
                                                                                                                                                            app.particulate.listen(constants.SELECT_EVENT, app.particles.handleSelect);
                                                                                                                                                            app.particulate.listen(constants.ZOOM_PAN_EVENT, app.zoomControls.setZoomPan);
                                                                                                                                                            app.particulate.listen(constants.SHARE_CONTROL_EVENT, app.particleGL.setZoomerPanner);
                                                                                                                                                            app.zoomControls.listen(constants.ZOOM_PAN_EVENT, app.particulate.setZoomPan);
                                                                                                                                                            app.zoomControls.listen(constants.ZOOM_RESET_EVENT, app.particles.handleZoomReset);
                                                                                                                                                            app.announce(constants.APP_LAUNCH_EVENT)
                                                                                                                                                          }
                                                                                                                                                          var app = {
                                                                                                                                                            constants: constants,
                                                                                                                                                            loaded: false
                                                                                                                                                          };
                                                                                                                                                          console.log("© Copyright 2015 athenahealth, Inc. All rights reserved");
                                                                                                                                                          console.log("Built by Fathom Information Design, http://fathom.info");
                                                                                                                                                          F.eventify(app);
                                                                                                                                                          window.app = app;
                                                                                                                                                          init()
                                                                                                                                                        }
                                                                                                                                                      )(window.app);
                                                                                                                                                      "use strict";
                                                                                                                                                      (function(app) {
                                                                                                                                                        var constants = app.constants, HEX_ANGLES = constants.HEX_ANGLES, GROUP_COLORS = constants.GROUP_COLORS, LERPING_GROUP_COUNT = GROUP_COLORS.length, LERP_RANGE = constants.LERP_RANGE, i, angleCount = constants.HEX_ANGLES.length - 1, round = Math.round, abs = Math.abs, PARTICLE_ALPHA = constants.PARTICLE_ALPHA, PARTICLE_HIGHLIGHT_ALPHA = constants.PARTICLE_HIGHLIGHT_ALPHA, PARTICLE_PUSHBACK_ALPHA = constants.PARTICLE_PUSHBACK_ALPHA, MAX_EVENT_COUNT = constants.MAX_EVENT_PARTICLE_COUNT;
                                                                                                                                                        function Gravitron(id, name, subtype, group, colorGroupId, sizes, $label, description) {
                                                                                                                                                          this.id = id;
                                                                                                                                                          this.name = name;
                                                                                                                                                          this.subtype = subtype;
                                                                                                                                                          this.parent = group;
                                                                                                                                                          this.colorGroupId = colorGroupId;
                                                                                                                                                          this.MIN_SIZE = sizes.minSize;
                                                                                                                                                          this.SIZE_RANGE = sizes.sizeRange;
                                                                                                                                                          this.MIN_LAYOUT_SIZE = sizes.layoutMinSize;
                                                                                                                                                          this.LAYOUT_SIZE_RANGE = sizes.layoutSizeRange;
                                                                                                                                                          this.$label = $label;
                                                                                                                                                          this.labelStyle = $label[0].style;
                                                                                                                                                          this.labelWidth = false;
                                                                                                                                                          this.description = description;
                                                                                                                                                          this.groupId = group.groupId;
                                                                                                                                                          this.labelWidth = $label.width();
                                                                                                                                                          this.labelHeight = $label.height();
                                                                                                                                                          var rgb = GROUP_COLORS[colorGroupId];
                                                                                                                                                          this.rgbString = "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ",";
                                                                                                                                                          this.binnedCounts = [];
                                                                                                                                                          this.cumulativeCounts = [];
                                                                                                                                                          for (var i = 0, L = constants.HISTOGRAM_INTERVAL_COUNT; i < L; i++) {
                                                                                                                                                            this.binnedCounts[i] = 0
                                                                                                                                                          }
                                                                                                                                                          this.layoutSize = new F.SoftFloat(-1,0.2,0.5);
                                                                                                                                                          this.size = new F.SoftFloat(0.001,0.2,0.5);
                                                                                                                                                          this.alpha = new F.SoftFloat(0,0.2,0.5);
                                                                                                                                                          this.paths = [];
                                                                                                                                                          this.pathLookup = [];
                                                                                                                                                          this.noiseMod = 0.01 + Math.random() * 0.03;
                                                                                                                                                          this.noiseModAmt = this.noiseMod;
                                                                                                                                                          this.movingCount = 0;
                                                                                                                                                          this.fadingCount = 0
                                                                                                                                                        }
                                                                                                                                                        Gravitron.prototype.addPath = function(path) {
                                                                                                                                                          this.paths.push(path);
                                                                                                                                                          this.pathLookup[path.destination.id] = path
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.updateTargets = function() {
                                                                                                                                                          var movingCount = this.movingCount
                                                                                                                                                          , size = this.size
                                                                                                                                                          , layoutSize = this.layoutSize;
                                                                                                                                                          this.density = movingCount / MAX_EVENT_COUNT;
                                                                                                                                                          if (movingCount > MAX_EVENT_COUNT) {
                                                                                                                                                            size.setTarget(this.MIN_SIZE + this.SIZE_RANGE);
                                                                                                                                                            layoutSize.setTarget(this.MIN_LAYOUT_SIZE + this.LAYOUT_SIZE_RANGE)
                                                                                                                                                          } else {
                                                                                                                                                            size.setTarget(this.MIN_SIZE + this.SIZE_RANGE * this.density);
                                                                                                                                                            layoutSize.setTarget(this.MIN_LAYOUT_SIZE + this.LAYOUT_SIZE_RANGE * this.density)
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.updateValues = function() {
                                                                                                                                                          this.size.update();
                                                                                                                                                          this.layoutSize.update();
                                                                                                                                                          this.alpha.update();
                                                                                                                                                          this.defaultAlpha = this.alpha.get();
                                                                                                                                                          var perl = noise.perlin3(this.x / 100, this.y / 100, this.noiseMod);
                                                                                                                                                          this.sparkleAlpha = this.defaultAlpha + abs(perl) * 0.35;
                                                                                                                                                          this.noiseMod += this.noiseModAmt
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.updatePaths = function() {
                                                                                                                                                          var paths = this.paths, maxPathCount = 0, path;
                                                                                                                                                          for (var i = paths.length - 1; i >= 0; i--) {
                                                                                                                                                            path = paths[i];
                                                                                                                                                            path.setScatter(this.density);
                                                                                                                                                            if (maxPathCount < path.currentCount) {
                                                                                                                                                              maxPathCount = path.currentCount
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          this.maxPathCount = maxPathCount
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.highlight = function() {
                                                                                                                                                          this.highlightLabel();
                                                                                                                                                          this.alpha.setTarget(PARTICLE_HIGHLIGHT_ALPHA)
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.unhighlight = function() {
                                                                                                                                                          this.alpha.setTarget(PARTICLE_ALPHA);
                                                                                                                                                          this.unhighlightLabel()
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.pushBack = function() {
                                                                                                                                                          this.alpha.setTarget(PARTICLE_PUSHBACK_ALPHA);
                                                                                                                                                          this.$label.removeClass("active");
                                                                                                                                                          this.$label.css("opacity", 0)
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.highlightLabel = function() {
                                                                                                                                                          this.$label.addClass("active");
                                                                                                                                                          this.$label.css("opacity", 0.95);
                                                                                                                                                          this.$label.addClass("hidden")
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.unhighlightLabel = function() {
                                                                                                                                                          this.$label.css("opacity", 0);
                                                                                                                                                          this.$label.removeClass("active")
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.highlightLabelByVolume = function(pathCount, maxPathCount) {
                                                                                                                                                          var opa = pathCount / maxPathCount * 0.8;
                                                                                                                                                          this.$label.css("opacity", opa);
                                                                                                                                                          this.$label.removeClass("active")
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.positionLabel = function(x, y) {
                                                                                                                                                          this.labelX = x;
                                                                                                                                                          this.labelY = y;
                                                                                                                                                          this.labelStyle.left = round(x) + "px";
                                                                                                                                                          this.labelStyle.top = round(y) + "px"
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.getLabelWidth = function() {
                                                                                                                                                          if (!this.labelWidth) {
                                                                                                                                                            this.labelWidth = this.$label.width()
                                                                                                                                                          }
                                                                                                                                                          return this.labelWidth
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.getLabelHeight = function() {
                                                                                                                                                          if (!this.labelHeight) {
                                                                                                                                                            this.labelHeight = this.$label.height()
                                                                                                                                                          }
                                                                                                                                                          return this.labelHeight
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        Gravitron.prototype.draw = function(ctx, t) {
                                                                                                                                                          var x = this.x, y = this.y, r = this.size.get() * 0.2, a, alf = this.sparkleAlpha;
                                                                                                                                                          ctx.fillStyle = this.rgbString + (round(alf * 100) / 100) + ")";
                                                                                                                                                          ctx.beginPath();
                                                                                                                                                          ctx.moveTo(x + r, y);
                                                                                                                                                          for (i = 1; i < angleCount; i++) {
                                                                                                                                                            a = HEX_ANGLES[i];
                                                                                                                                                            ctx.lineTo(x + a[0] * r, y + a[1] * r)
                                                                                                                                                          }
                                                                                                                                                          ctx.lineTo(x + r, y);
                                                                                                                                                          ctx.fill()
                                                                                                                                                        }
                                                                                                                                                        ;
                                                                                                                                                        noise.seed(Math.random());
                                                                                                                                                        app.Gravitron = Gravitron
                                                                                                                                                      }
                                                                                                                                                    )(app);
                                                                                                                                                    "use strict";
                                                                                                                                                    (function(app) {
                                                                                                                                                      var constants = app.constants
                                                                                                                                                      , PI = Math.PI
                                                                                                                                                      , TAU = PI * 2
                                                                                                                                                      , HALF_PI = PI * 0.5
                                                                                                                                                      , cos = Math.cos
                                                                                                                                                      , sin = Math.sin
                                                                                                                                                      , round = Math.sin
                                                                                                                                                      , INNER_RING_MARGIN_MIN = constants.INNER_RING_MARGIN_MIN
                                                                                                                                                      , INNER_RING_MARGIN_RANGE = constants.INNER_RING_MARGIN_RANGE
                                                                                                                                                      , SPACE_BETWEEN_ARCS = constants.ARC_EVENT_MARGIN
                                                                                                                                                      , PRACTICE_EVENT_MARGIN = constants.PRACTICE_EVENT_MARGIN
                                                                                                                                                      , PRACTICE_EVENT_MIN_SIZE = constants.PRACTICE_EVENT_MIN_SIZE
                                                                                                                                                      , SUBGROUP_LABELS = constants.SUBGROUP_LABELS
                                                                                                                                                      , SUBGROUP_INDICES = {};
                                                                                                                                                      (function() {
                                                                                                                                                        for (var i = 0, L = SUBGROUP_LABELS.length; i < L; i++) {
                                                                                                                                                          SUBGROUP_INDICES[SUBGROUP_LABELS[i]] = i
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    )();
                                                                                                                                                    function Group(id, name, color, lerpColors, descriptionDict) {
                                                                                                                                                      if (id == null) {
                                                                                                                                                        return
                                                                                                                                                      }
                                                                                                                                                      this.groupId = id;
                                                                                                                                                      this.name = name;
                                                                                                                                                      this.description = descriptionDict[name];
                                                                                                                                                      this.centers = [];
                                                                                                                                                      this.centerLookup = [];
                                                                                                                                                      this.rgb = color;
                                                                                                                                                      this.lerpColors = lerpColors;
                                                                                                                                                      this.binnedCounts = [];
                                                                                                                                                      this.cumulativeCounts = [];
                                                                                                                                                      for (var i = 0, L = constants.HISTOGRAM_INTERVAL_COUNT; i < L; i++) {
                                                                                                                                                        this.binnedCounts[i] = 0
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    Group.prototype.position = function(x, y) {
                                                                                                                                                      this.x = x;
                                                                                                                                                      this.y = y
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    Group.prototype.highlight = function() {
                                                                                                                                                      this.centers.forEach(highlightGravitron)
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    Group.prototype.unhighlight = function() {
                                                                                                                                                      this.centers.forEach(unhighlightGravitron)
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    Group.prototype.pushBack = function() {
                                                                                                                                                      this.centers.forEach(pushBackGravitron)
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    Group.prototype.getBounds = function() {
                                                                                                                                                      var top = 10000, bottom = -10000, right = -10000, left = 10000, grav, s, x, y, centers = this.centers;
                                                                                                                                                      for (var i = centers.length - 1; i >= 0; i--) {
                                                                                                                                                        grav = centers[i];
                                                                                                                                                        s = grav.layoutSize.getTarget();
                                                                                                                                                        x = grav.x;
                                                                                                                                                        y = grav.y;
                                                                                                                                                        if (left > x - s) {
                                                                                                                                                          left = x - s
                                                                                                                                                        }
                                                                                                                                                        if (right < x + s) {
                                                                                                                                                          right = x + s
                                                                                                                                                        }
                                                                                                                                                        if (top > y - s) {
                                                                                                                                                          top = y - s
                                                                                                                                                        }
                                                                                                                                                        if (bottom < y + s) {
                                                                                                                                                          bottom = y + s
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      return {
                                                                                                                                                        left: left,
                                                                                                                                                        top: top,
                                                                                                                                                        right: right,
                                                                                                                                                        bottom: bottom
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    function highlightGravitron(g) {
                                                                                                                                                      g.highlight()
                                                                                                                                                    }
                                                                                                                                                    function unhighlightGravitron(g) {
                                                                                                                                                      g.unhighlight()
                                                                                                                                                    }
                                                                                                                                                    function pushBackGravitron(g) {
                                                                                                                                                      g.pushBack()
                                                                                                                                                    }
                                                                                                                                                    function SuperGroup(id, name, color, lerpColors, descriptionDict) {
                                                                                                                                                      Group.call(this, id, name, color, lerpColors, descriptionDict);
                                                                                                                                                      var GROUP_COLORS = constants.GROUP_COLORS;
                                                                                                                                                      this.arcs = [];
                                                                                                                                                      this.encounter = new ArcGroup(4,SUBGROUP_LABELS[0],color,lerpColors,descriptionDict);
                                                                                                                                                      this.encounter.margin = 0;
                                                                                                                                                      this.encounter.startAngle = -HALF_PI;
                                                                                                                                                      this.encounter.centerAngle = -HALF_PI;
                                                                                                                                                      this.arcs[0] = this.encounter;
                                                                                                                                                      for (var i = 1; i < 4; i++) {
                                                                                                                                                        this.arcs[i] = new ArcGroup(i + 4,SUBGROUP_LABELS[i],GROUP_COLORS[4],lerpColors,descriptionDict)
                                                                                                                                                      }
                                                                                                                                                      this.ring = new RingGroup(this.arcs.slice(1));
                                                                                                                                                      this.encounterMinSize = 0;
                                                                                                                                                      this.RING_MIN = INNER_RING_MARGIN_MIN;
                                                                                                                                                      this.RING_RANGE = INNER_RING_MARGIN_RANGE
                                                                                                                                                    }
                                                                                                                                                    SuperGroup.prototype.position = function(x, y) {
                                                                                                                                                      this.x = x;
                                                                                                                                                      this.y = y;
                                                                                                                                                      var arcs = this.arcs;
                                                                                                                                                      for (var i = 0, L = arcs.length; i < L; i++) {
                                                                                                                                                        arcs[i].position(x, y)
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    SuperGroup.prototype.addNode = function(node) {
                                                                                                                                                      this.centerLookup[node.id] = node;
                                                                                                                                                      this.centers.push(node);
                                                                                                                                                      var subGroupIndex = SUBGROUP_INDICES[node.subtype];
                                                                                                                                                      this.arcs[subGroupIndex].addNode(node);
                                                                                                                                                      node.parent = this.arcs[subGroupIndex];
                                                                                                                                                      node.subGroupId = subGroupIndex;
                                                                                                                                                      if (0 === subGroupIndex) {
                                                                                                                                                        this.encounterMinSize = this.encounter.centers.length * 2 * (PRACTICE_EVENT_MIN_SIZE + PRACTICE_EVENT_MARGIN)
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    SuperGroup.prototype.update = function() {
                                                                                                                                                      var l = this.encounter.getLength();
                                                                                                                                                      this.radius = l / TAU;
                                                                                                                                                      this.encounter.resize(this.radius);
                                                                                                                                                      this.encounter.startAngle = -HALF_PI;
                                                                                                                                                      this.encounter.update();
                                                                                                                                                      this.ring.update(this.radius + this.RING_MIN + l / this.encounterMinSize * this.RING_RANGE);
                                                                                                                                                      this.radius = this.ring.radius
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    SuperGroup.prototype.updatePaths = function() {
                                                                                                                                                      var arcs = this.arcs;
                                                                                                                                                      for (var i = 0, L = arcs.length; i < L; i++) {
                                                                                                                                                        arcs[i].updatePaths()
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    SuperGroup.prototype.getPathRadius = function() {
                                                                                                                                                      return this.radius
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    function ArcGroup(id, name, color, lerpColors, descriptionDict) {
                                                                                                                                                      Group.call(this, id, name, color, lerpColors, descriptionDict);
                                                                                                                                                      this.margin = 0;
                                                                                                                                                      this.startAngle = 0;
                                                                                                                                                      this.endAngle = 0
                                                                                                                                                    }
                                                                                                                                                    ArcGroup.prototype.getLength = function() {
                                                                                                                                                      var l = 0, space, g, centers = this.centers, m = this.margin, L = centers.length;
                                                                                                                                                      for (var i = 0; i < L; i++) {
                                                                                                                                                        g = centers[i];
                                                                                                                                                        space = g.layoutSize.get() * 2;
                                                                                                                                                        if (space < 0.001) {
                                                                                                                                                          space = 0.001
                                                                                                                                                        }
                                                                                                                                                        space += m;
                                                                                                                                                        l += space;
                                                                                                                                                        l += space
                                                                                                                                                      }
                                                                                                                                                      return l
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    ArcGroup.prototype.resize = function(radius) {
                                                                                                                                                      var l = this.getLength();
                                                                                                                                                      this.radius = radius;
                                                                                                                                                      this.circumference = TAU * radius;
                                                                                                                                                      this.startAngle = this.centerAngle - l / (this.circumference || 1)
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    ArcGroup.prototype.update = function(extraMargin, startAngle) {
                                                                                                                                                      var angle = startAngle || this.startAngle, m = this.margin || 0, angleIncr = 0, space, g, centers = this.centers, wedgeCoefficient = TAU / this.circumference;
                                                                                                                                                      while (angle > PI) {
                                                                                                                                                        angle -= TAU
                                                                                                                                                      }
                                                                                                                                                      while (angle < -PI) {
                                                                                                                                                        angle += TAU
                                                                                                                                                      }
                                                                                                                                                      m += extraMargin || 0;
                                                                                                                                                      this.startAngle = angle;
                                                                                                                                                      for (var i = 0, L = centers.length; i < L; i++) {
                                                                                                                                                        g = centers[i];
                                                                                                                                                        space = g.layoutSize.get() * 2;
                                                                                                                                                        if (space < 0) {
                                                                                                                                                          space = 0
                                                                                                                                                        }
                                                                                                                                                        space += m;
                                                                                                                                                        angleIncr = space * wedgeCoefficient;
                                                                                                                                                        angle += angleIncr;
                                                                                                                                                        if (angle > PI) {
                                                                                                                                                          angle -= TAU
                                                                                                                                                        }
                                                                                                                                                        g.x = this.x + cos(angle) * this.radius;
                                                                                                                                                        g.y = this.y + sin(angle) * this.radius;
                                                                                                                                                        g.distance = this.radius;
                                                                                                                                                        g.groupAngle = angle;
                                                                                                                                                        angle += angleIncr
                                                                                                                                                      }
                                                                                                                                                      this.endAngle = angle
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    ArcGroup.prototype.updatePaths = function() {
                                                                                                                                                      var centers = this.centers;
                                                                                                                                                      for (var i = 0, L = centers.length; i < L; i++) {
                                                                                                                                                        centers[i].updatePaths()
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    ArcGroup.prototype.addNode = function(node) {
                                                                                                                                                      this.centerLookup[node.id] = node;
                                                                                                                                                      this.centers.push(node)
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    function RingGroup(arcs) {
                                                                                                                                                      this.arcs = arcs;
                                                                                                                                                      this.x = 0;
                                                                                                                                                      this.y = 0;
                                                                                                                                                      this.radius = 0;
                                                                                                                                                      this.circumference = 0;
                                                                                                                                                      arcs[0].centerAngle = -HALF_PI;
                                                                                                                                                      arcs[1].centerAngle = HALF_PI / 6;
                                                                                                                                                      arcs[2].centerAngle = HALF_PI / 6 * 5
                                                                                                                                                    }
                                                                                                                                                    RingGroup.prototype.position = function(x, y) {
                                                                                                                                                      this.x = x;
                                                                                                                                                      this.y = y
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    RingGroup.prototype.update = function(minRadius) {
                                                                                                                                                      var arcs = this.arcs, circumference = 0, arcCircumference, gravCount = 0, gravitronMargin = 0;
                                                                                                                                                      for (var a = 0, aL = arcs.length; a < aL; a++) {
                                                                                                                                                        arcCircumference = arcs[a].getLength();
                                                                                                                                                        circumference += arcCircumference + SPACE_BETWEEN_ARCS;
                                                                                                                                                        gravCount += arcs[a].centers.length
                                                                                                                                                      }
                                                                                                                                                      this.circumference = circumference;
                                                                                                                                                      this.radius = circumference / TAU;
                                                                                                                                                      if (this.radius < minRadius) {
                                                                                                                                                        this.radius = minRadius;
                                                                                                                                                        circumference = TAU * minRadius;
                                                                                                                                                        gravitronMargin = (circumference - this.circumference) / gravCount / 2;
                                                                                                                                                        this.circumference = circumference
                                                                                                                                                      } else {
                                                                                                                                                        gravitronMargin = false
                                                                                                                                                      }
                                                                                                                                                      var marginAngle = SPACE_BETWEEN_ARCS / circumference * TAU
                                                                                                                                                      , a = HALF_PI + marginAngle / 2;
                                                                                                                                                      var index, ea;
                                                                                                                                                      for (var i = 0, L = arcs.length; i < L; i++) {
                                                                                                                                                        index = (i + L - 1) % L;
                                                                                                                                                        arcs[index].resize(this.radius);
                                                                                                                                                        arcs[index].update(gravitronMargin, a);
                                                                                                                                                        ea = arcs[index].endAngle;
                                                                                                                                                        a = ea;
                                                                                                                                                        a += marginAngle
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    ;
                                                                                                                                                    F.inheritFrom(Group, SuperGroup);
                                                                                                                                                    F.inheritFrom(Group, ArcGroup);
                                                                                                                                                    app.SuperGroup = SuperGroup;
                                                                                                                                                    app.ArcGroup = ArcGroup;
                                                                                                                                                    app.RingGroup = RingGroup
                                                                                                                                                  }
                                                                                                                                                )(app);
                                                                                                                                                "use strict";
                                                                                                                                                (function(app) {
                                                                                                                                                  var X = 0;
                                                                                                                                                  var Y = 1;
                                                                                                                                                  var DISTANCE = 2;
                                                                                                                                                  var PROGRESS = 3;
                                                                                                                                                  var DX = 4;
                                                                                                                                                  var DY = 5;
                                                                                                                                                  var DPROGRESS = 6;
                                                                                                                                                  var constants = app.constants
                                                                                                                                                  , sin = Math.sin
                                                                                                                                                  , cos = Math.cos
                                                                                                                                                  , pow = Math.pow
                                                                                                                                                  , HALF_PI = Math.PI / 2
                                                                                                                                                  , PI = Math.PI
                                                                                                                                                  , TAU = Math.PI * 2
                                                                                                                                                  , atan2 = Math.atan2
                                                                                                                                                  , sqrt = Math.sqrt
                                                                                                                                                  , abs = Math.abs
                                                                                                                                                  , PATH_TYPES = constants.PATH_TYPES
                                                                                                                                                  , PARTICLE_SCATTER_BASE = constants.PARTICLE_SCATTER_BASE
                                                                                                                                                  , PARTICLE_SCATTER_RANGE = constants.PARTICLE_SCATTER_RANGE
                                                                                                                                                  , PARTICLE_SCATTER_LIMIT = constants.PARTICLE_SCATTER_LIMIT
                                                                                                                                                  , PARTICLE_WEIGHT_BASE = constants.PARTICLE_WEIGHT_BASE
                                                                                                                                                  , PARTICLE_WEIGHT_DENOMINATOR_BASE = constants.PARTICLE_WEIGHT_DENOMINATOR_BASE
                                                                                                                                                  , PARTICLE_WEIGHT_SCALE = constants.PARTICLE_WEIGHT_SCALE
                                                                                                                                                  , PARTICLE_WEIGHT_POWER = constants.PARTICLE_WEIGHT_POWER
                                                                                                                                                  , MIN_PARTICLE_WEIGHT = constants.MIN_PARTICLE_WEIGHT
                                                                                                                                                  , MAX_PARTICLE_WEIGHT = constants.MAX_PARTICLE_WEIGHT
                                                                                                                                                  , TRAVEL_PIXELS = constants.TRAVEL_PIXELS;
                                                                                                                                                  function BezierPath(origin, destination) {
                                                                                                                                                    this.origin = origin;
                                                                                                                                                    this.destination = destination;
                                                                                                                                                    this.scatter = 1;
                                                                                                                                                    this.particleWeight = 1;
                                                                                                                                                    this.densityMeasure = 1;
                                                                                                                                                    this.currentCount = 0;
                                                                                                                                                    this.pathType = PATH_TYPES.BEZIER;
                                                                                                                                                    this.progressIncrement = 0.001
                                                                                                                                                  }
                                                                                                                                                  BezierPath.prototype.setLength = function(length) {
                                                                                                                                                    this.length = length;
                                                                                                                                                    this.densityMeasure = length > 300 ? 1 : 0.25 + (0.75 * length / 300);
                                                                                                                                                    this.progressIncrement = TRAVEL_PIXELS / (length || 1)
                                                                                                                                                  }
                                                                                                                                                  ;
                                                                                                                                                  BezierPath.prototype.updateParticle = function(mp) {
                                                                                                                                                    mp.progress += this.progressIncrement * mp.velocityMod;
                                                                                                                                                    mp.weight = this.particleWeight
                                                                                                                                                  }
                                                                                                                                                  ;
                                                                                                                                                  BezierPath.prototype.setScatter = function(gravitronTraffic) {
                                                                                                                                                    this.scatter = PARTICLE_SCATTER_BASE + PARTICLE_SCATTER_RANGE * gravitronTraffic;
                                                                                                                                                    if (this.scatter > PARTICLE_SCATTER_LIMIT) {
                                                                                                                                                      this.scatter = PARTICLE_SCATTER_LIMIT
                                                                                                                                                    }
                                                                                                                                                    if (gravitronTraffic > 1) {
                                                                                                                                                      if (gravitronTraffic > 3) {
                                                                                                                                                        this.particleWeight = this.densityMeasure * PARTICLE_WEIGHT_BASE / (4 + pow(gravitronTraffic - 3, 0.3))
                                                                                                                                                      } else {
                                                                                                                                                        this.particleWeight = this.densityMeasure * PARTICLE_WEIGHT_BASE / (1 + gravitronTraffic)
                                                                                                                                                      }
                                                                                                                                                    } else {
                                                                                                                                                      this.particleWeight = this.densityMeasure * PARTICLE_WEIGHT_BASE / 2
                                                                                                                                                    }
                                                                                                                                                    if (this.particleWeight < MIN_PARTICLE_WEIGHT) {
                                                                                                                                                      this.particleWeight = MIN_PARTICLE_WEIGHT
                                                                                                                                                    } else {
                                                                                                                                                      if (this.particleWeight > MAX_PARTICLE_WEIGHT) {
                                                                                                                                                        this.particleWeight = MAX_PARTICLE_WEIGHT
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  ;
                                                                                                                                                  BezierPath.prototype.incrementCurrentCount = function() {
                                                                                                                                                    this.currentCount++
                                                                                                                                                  }
                                                                                                                                                  ;
                                                                                                                                                  BezierPath.prototype.decrementCurrentCount = function() {
                                                                                                                                                    if (this.currentCount > 0) {
                                                                                                                                                      this.currentCount--
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  ;
                                                                                                                                                  app.BezierPath = BezierPath
                                                                                                                                                }
                                                                                                                                              )(window.app);
                                                                                                                                              "use strict";
                                                                                                                                              (function(app) {
                                                                                                                                                var X = 0;
                                                                                                                                                var Y = 1;
                                                                                                                                                var DISTANCE = 2;
                                                                                                                                                var PROGRESS = 3;
                                                                                                                                                var DX = 4;
                                                                                                                                                var DY = 5;
                                                                                                                                                var DPROGRESS = 6;
                                                                                                                                                var constants = app.constants
                                                                                                                                                , PATH_TYPES = constants.PATH_TYPES
                                                                                                                                                , OUTSIDE_PATH_MIN_HEIGHT = 18
                                                                                                                                                , OUTSIDE_PATH_HEIGHT_RANGE = 180
                                                                                                                                                , OUTSIDE_PATH_MAX_HEIGHT = OUTSIDE_PATH_MIN_HEIGHT + OUTSIDE_PATH_HEIGHT_RANGE
                                                                                                                                                , SUPERGROUP_OUTSIDE_PATH_MIN_HEIGHT = 5
                                                                                                                                                , SUPERGROUP_OUTSIDE_PATH_HEIGHT_RANGE = 65
                                                                                                                                                , SUPERGROUP_OUTSIDE_PATH_MAX_HEIGHT = SUPERGROUP_OUTSIDE_PATH_MIN_HEIGHT + SUPERGROUP_OUTSIDE_PATH_HEIGHT_RANGE
                                                                                                                                                , TRAVEL_PIXELS = constants.TRAVEL_PIXELS
                                                                                                                                                , MAX_EVENT_COUNT = 40
                                                                                                                                                , PI = Math.PI
                                                                                                                                                , TAU = PI * 2
                                                                                                                                                , HALF_PI = PI * 0.5
                                                                                                                                                , sin = Math.sin
                                                                                                                                                , cos = Math.cos
                                                                                                                                                , pow = Math.pow
                                                                                                                                                , abs = Math.abs
                                                                                                                                                , sqrt = Math.sqrt;
                                                                                                                                                function OuterPath(origin, destination) {
                                                                                                                                                  if (!origin) {
                                                                                                                                                    return
                                                                                                                                                  }
                                                                                                                                                  app.BezierPath.call(this, origin, destination);
                                                                                                                                                  this.pathType = PATH_TYPES.OUTER;
                                                                                                                                                  this.initialized = true
                                                                                                                                                }
                                                                                                                                                OuterPath.prototype.setHeight = function(aDiff) {
                                                                                                                                                  this.height = map(pow(abs(aDiff) / PI * this.scatter, 0.5), 0, 1, OUTSIDE_PATH_MIN_HEIGHT, OUTSIDE_PATH_MAX_HEIGHT)
                                                                                                                                                }
                                                                                                                                                ;
                                                                                                                                                OuterPath.prototype.setLength = function(length) {
                                                                                                                                                  if (this.currentCount < MAX_EVENT_COUNT) {
                                                                                                                                                    this.densityMeasure = 1 + (1 - this.currentCount / MAX_EVENT_COUNT)
                                                                                                                                                  } else {
                                                                                                                                                    this.densityMeasure = 1
                                                                                                                                                  }
                                                                                                                                                  this.length = length;
                                                                                                                                                  this.progressIncrement = TRAVEL_PIXELS / length
                                                                                                                                                }
                                                                                                                                                ;
                                                                                                                                                function SuperGroupOuterPath(origin, destination) {
                                                                                                                                                  OuterPath.call(this, origin, destination);
                                                                                                                                                  this.pathType = PATH_TYPES.SUPER_OUTER
                                                                                                                                                }
                                                                                                                                                SuperGroupOuterPath.prototype.setHeight = function(aDiff) {
                                                                                                                                                  this.height = map(pow(abs(aDiff) / PI * this.scatter, 0.5), 0, 1, SUPERGROUP_OUTSIDE_PATH_MIN_HEIGHT, SUPERGROUP_OUTSIDE_PATH_MAX_HEIGHT)
                                                                                                                                                }
                                                                                                                                                ;
                                                                                                                                                function map(v, i1, i2, o1, o2) {
                                                                                                                                                  return o1 + (v - i1) / (i2 - i1) * (o2 - o1)
                                                                                                                                                }
                                                                                                                                                F.inheritFrom(app.BezierPath, OuterPath);
                                                                                                                                                F.inheritFrom(OuterPath, SuperGroupOuterPath);
                                                                                                                                                app.OuterPath = OuterPath;
                                                                                                                                                app.SuperGroupOuterPath = SuperGroupOuterPath
                                                                                                                                              }
                                                                                                                                            )(window.app);
                                                                                                                                            "use strict";
                                                                                                                                            (function(app) {
                                                                                                                                              var X = 0;
                                                                                                                                              var Y = 1;
                                                                                                                                              var DISTANCE = 2;
                                                                                                                                              var PROGRESS = 3;
                                                                                                                                              var DX = 4;
                                                                                                                                              var DY = 5;
                                                                                                                                              var DPROGRESS = 6;
                                                                                                                                              var constants = app.constants
                                                                                                                                              , sin = Math.sin
                                                                                                                                              , cos = Math.cos
                                                                                                                                              , pow = Math.pow
                                                                                                                                              , HALF_PI = Math.PI / 2
                                                                                                                                              , PI = Math.PI
                                                                                                                                              , TAU = Math.PI * 2
                                                                                                                                              , atan2 = Math.atan2
                                                                                                                                              , sqrt = Math.sqrt
                                                                                                                                              , abs = Math.abs
                                                                                                                                              , PATH_TYPES = constants.PATH_TYPES
                                                                                                                                              , TRAVEL_PIXELS = constants.TRAVEL_PIXELS;
                                                                                                                                              function IntraRingPath(origin, destination) {
                                                                                                                                                if (!origin) {
                                                                                                                                                  return
                                                                                                                                                }
                                                                                                                                                app.BezierPath.call(this, origin, destination);
                                                                                                                                                this.pathType = PATH_TYPES.INTRA
                                                                                                                                              }
                                                                                                                                              IntraRingPath.prototype.getMidRadiusBase = function() {
                                                                                                                                                return this.origin.parent.radius
                                                                                                                                              }
                                                                                                                                              ;
                                                                                                                                              IntraRingPath.prototype.getRadDiffModifier = function(aDiff) {
                                                                                                                                                var aPct = abs(aDiff / PI);
                                                                                                                                                return 0.15 + aPct * 0.62
                                                                                                                                              }
                                                                                                                                              ;
                                                                                                                                              IntraRingPath.prototype.setLength = function(length) {
                                                                                                                                                this.densityMeasure = 1;
                                                                                                                                                this.length = length;
                                                                                                                                                this.progressIncrement = TRAVEL_PIXELS / length
                                                                                                                                              }
                                                                                                                                              ;
                                                                                                                                              function SuperGroupIntraRingPath(origin, destination) {
                                                                                                                                                IntraRingPath.call(this, origin, destination);
                                                                                                                                                this.pathType = PATH_TYPES.SUPER_INTRA
                                                                                                                                              }
                                                                                                                                              SuperGroupIntraRingPath.prototype.getMidRadiusBase = function() {
                                                                                                                                                return this.origin.distance
                                                                                                                                              }
                                                                                                                                              ;
                                                                                                                                              SuperGroupIntraRingPath.prototype.getRadDiffModifier = function(aDiff) {
                                                                                                                                                return 0.15 + abs(aDiff / PI) * 0.27
                                                                                                                                              }
                                                                                                                                              ;
                                                                                                                                              function map(v, i1, i2, o1, o2) {
                                                                                                                                                return o1 + (v - i1) / (i2 - i1) * (o2 - o1)
                                                                                                                                              }
                                                                                                                                              F.inheritFrom(app.BezierPath, IntraRingPath);
                                                                                                                                              F.inheritFrom(IntraRingPath, SuperGroupIntraRingPath);
                                                                                                                                              app.IntraRingPath = IntraRingPath;
                                                                                                                                              app.SuperGroupIntraRingPath = SuperGroupIntraRingPath
                                                                                                                                            }
                                                                                                                                          )(window.app);
                                                                                                                                          "use strict";
                                                                                                                                          (function(app) {
                                                                                                                                            var constants = app.constants
                                                                                                                                            , HEX_ANGLES = constants.HEX_ANGLES
                                                                                                                                            , angleCount = HEX_ANGLES.length - 1
                                                                                                                                            , floor = Math.floor
                                                                                                                                            , PARTICLE_VELOCITY_MOD = constants.PARTICLE_VELOCITY_MOD;
                                                                                                                                            function Lerper(offset, offset2) {
                                                                                                                                              this.position = [];
                                                                                                                                              this.offset = offset;
                                                                                                                                              this.velocityMod = PARTICLE_VELOCITY_MOD * offset2;
                                                                                                                                              this.complete = true
                                                                                                                                            }
                                                                                                                                            Lerper.prototype.set = function(origin, destination) {
                                                                                                                                              this.origin = origin;
                                                                                                                                              this.destination = destination;
                                                                                                                                              this.position[0] = origin.x + this.offset[0];
                                                                                                                                              this.position[1] = origin.y + this.offset[1];
                                                                                                                                              this.complete = false;
                                                                                                                                              this.progress = 0;
                                                                                                                                              this.pathIndex = 0;
                                                                                                                                              this.path = origin.pathLookup[destination.id];
                                                                                                                                              this.pathType = this.path.pathType;
                                                                                                                                              this.path.incrementCurrentCount();
                                                                                                                                              this.originId = origin.id;
                                                                                                                                              this.destinationId = destination.id;
                                                                                                                                              origin.movingCount++
                                                                                                                                            }
                                                                                                                                            ;
                                                                                                                                            Lerper.prototype.update = function() {
                                                                                                                                              this.path.updateParticle(this);
                                                                                                                                              if (this.progress >= 0.9999) {
                                                                                                                                                this.complete = true;
                                                                                                                                                this.path.decrementCurrentCount();
                                                                                                                                                this.origin.movingCount--
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                            ;
                                                                                                                                            Lerper.prototype.isComplete = function() {
                                                                                                                                              return this.complete
                                                                                                                                            }
                                                                                                                                            ;
                                                                                                                                            app.Lerper = Lerper
                                                                                                                                          }
                                                                                                                                        )(window.app);
                                                                                                                                        "use strict";
                                                                                                                                        (function(app) {
                                                                                                                                          var constants = app.constants, $footer = $("#footer"), $captionPositioner = $footer.find("#caption-positioner"), $caption = $footer.find("#caption-wrapper"), $title = $caption.find("#caption-title"), $text = $caption.find("#caption-text"), $infoButton = $footer.find("#info-button"), $infoButtonIcon = $infoButton.find(".icon"), defaultTitle = $("#caption-title").html(), defaultText = $("#caption-text").html(), defaultItem = {
                                                                                                                                            name: defaultTitle,
                                                                                                                                            description: defaultText
                                                                                                                                          }, fadeTimer = false, pulseTimer, pulsing = true, firstExpansion = true, GRAVITRON = constants.GRAVITRON, CLEAR = constants.CLEAR;
                                                                                                                                          function bind() {
                                                                                                                                            $infoButton.bind("click", expandAbout);
                                                                                                                                            $footer.find("#explain").bind("click", expandAbout);
                                                                                                                                            $footer.on("mousedown", function(evt) {
                                                                                                                                              evt.stopPropagation()
                                                                                                                                            });
                                                                                                                                            var infoButtonLabel = $infoButton.find(".label")[0];
                                                                                                                                            $footer.on("mousemove", function(evt) {
                                                                                                                                              evt.stopPropagation();
                                                                                                                                              if ($(evt.target).text() == "Read more" || evt.target == $infoButtonIcon[0] || evt.target == infoButtonLabel) {
                                                                                                                                                $footer.find("#explain").addClass("hover");
                                                                                                                                                $infoButton.addClass("hover");
                                                                                                                                                if (pulsing) {
                                                                                                                                                  $infoButtonIcon.removeClass("pulsar");
                                                                                                                                                  $infoButtonIcon.removeClass("pulse");
                                                                                                                                                  pulsing = false;
                                                                                                                                                  clearTimeout(pulseTimer);
                                                                                                                                                  pulseTimer = false
                                                                                                                                                }
                                                                                                                                              } else {
                                                                                                                                                $footer.find("#explain").removeClass("hover");
                                                                                                                                                $infoButton.removeClass("hover")
                                                                                                                                              }
                                                                                                                                            });
                                                                                                                                            $footer.find(".inactive").removeClass("inactive");
                                                                                                                                            pulseOut()
                                                                                                                                          }
                                                                                                                                          function pulseIn() {
                                                                                                                                            if (pulsing) {
                                                                                                                                              $infoButtonIcon.addClass("pulse");
                                                                                                                                              pulseTimer = setTimeout(pulseOut, 1250)
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          function pulseOut() {
                                                                                                                                            $infoButtonIcon.removeClass("pulse");
                                                                                                                                            if (pulsing) {
                                                                                                                                              pulseTimer = setTimeout(pulseIn, 1250)
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          function setSize(sizes) {
                                                                                                                                            var captionWidth = $caption.width();
                                                                                                                                            $caption.css("position", "absolute");
                                                                                                                                            var margin = ~~((sizes.width - captionWidth) / 2);
                                                                                                                                            $caption.css("right", margin + "px")
                                                                                                                                          }
                                                                                                                                          function expandAbout() {
                                                                                                                                            $footer.find("#explain").removeClass("hover");
                                                                                                                                            $infoButton.removeClass("hover");
                                                                                                                                            $infoButton.unbind();
                                                                                                                                            $footer.find("#explain").unbind();
                                                                                                                                            $footer.addClass("expanded");
                                                                                                                                            $infoButtonIcon.text("x");
                                                                                                                                            $infoButton.bind("click", function() {
                                                                                                                                              $footer.find("#explain").removeClass("hover");
                                                                                                                                              $infoButton.removeClass("hover");
                                                                                                                                              $infoButton.unbind();
                                                                                                                                              $footer.removeClass("expanded");
                                                                                                                                              $infoButtonIcon.text("i");
                                                                                                                                              $infoButton.bind("click", expandAbout);
                                                                                                                                              $footer.find("#explain").bind("click", expandAbout)
                                                                                                                                            });
                                                                                                                                            if (firstExpansion) {
                                                                                                                                              firstExpansion = false;
                                                                                                                                              $infoButtonIcon.addClass("pulsar");
                                                                                                                                              pulsing = true;
                                                                                                                                              pulseIn()
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          var currentTitle = false
                                                                                                                                          , currentDescription = false
                                                                                                                                          , nextTitle = false
                                                                                                                                          , nextDescription = false;
                                                                                                                                          function setSelection(title, description) {
                                                                                                                                            title = title || "&nbsp;";
                                                                                                                                            description = description || "&nbsp;";
                                                                                                                                            if (title !== currentTitle || description !== currentDescription) {
                                                                                                                                              if (title === nextTitle && description === nextDescription && fadeTimer) {
                                                                                                                                                return
                                                                                                                                              }
                                                                                                                                              nextTitle = title;
                                                                                                                                              nextDescription = description;
                                                                                                                                              $caption.addClass("faded");
                                                                                                                                              if (fadeTimer) {
                                                                                                                                                clearTimeout(fadeTimer);
                                                                                                                                                fadeTimer = false
                                                                                                                                              }
                                                                                                                                              fadeTimer = setTimeout(setTexts, 250)
                                                                                                                                            } else {
                                                                                                                                              if (title !== nextTitle || description !== nextDescription) {
                                                                                                                                                nextTitle = title;
                                                                                                                                                nextDescription = description
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          function setTexts() {
                                                                                                                                            fadeTimer = false;
                                                                                                                                            currentTitle = nextTitle;
                                                                                                                                            currentDescription = nextDescription;
                                                                                                                                            $title.html(currentTitle);
                                                                                                                                            $text.html(currentDescription);
                                                                                                                                            if (currentDescription == defaultText) {
                                                                                                                                              $captionPositioner.removeClass("double");
                                                                                                                                              $footer.find("#explain").bind("click", expandAbout)
                                                                                                                                            } else {
                                                                                                                                              if ($text.height() > 20) {
                                                                                                                                                $captionPositioner.addClass("double")
                                                                                                                                              } else {
                                                                                                                                                $captionPositioner.removeClass("double")
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                            $caption.removeClass("faded")
                                                                                                                                          }
                                                                                                                                          function handleSelect(params) {
                                                                                                                                            var item = params.item;
                                                                                                                                            if (item) {
                                                                                                                                              if (params.type == constants.GRAVITRON) {
                                                                                                                                                $caption.addClass("streamlined");
                                                                                                                                                setSelection(false, item.description)
                                                                                                                                              } else {
                                                                                                                                                $caption.removeClass("streamlined");
                                                                                                                                                setSelection((params.label || item.name), item.description)
                                                                                                                                              }
                                                                                                                                            } else {
                                                                                                                                              setSelection(defaultItem.name, defaultItem.description);
                                                                                                                                              $caption.removeClass("streamlined");
                                                                                                                                              $footer.find("#explain").bind("click", expandAbout)
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          var footer = {
                                                                                                                                            bind: bind,
                                                                                                                                            handleSelect: handleSelect,
                                                                                                                                            setSelection: setSelection,
                                                                                                                                            setSize: setSize
                                                                                                                                          };
                                                                                                                                          F.eventify(footer);
                                                                                                                                          app.footer = footer
                                                                                                                                        }
                                                                                                                                      )(window.app);
                                                                                                                                      "use strict";
                                                                                                                                      (function(app) {
                                                                                                                                        var constants = app.constants, canvas, ctx, W, H, floor = Math.floor, round = Math.round, TAU = Math.PI * 2, CHART_WIDTH = constants.HISTOGRAM_CHART_WIDTH, CHART_HEIGHT = constants.HISTOGRAM_CHART_HEIGHT, TOP_MARGIN = constants.HISTOGRAM_TOP_MARGIN_HEIGHT, CHART_BOTTOM = TOP_MARGIN + CHART_HEIGHT, GROUP_COUNT = constants.GROUP_COUNT, GROUP_COLORS = constants.GROUP_COLORS, PLAY_CHAR = "p", PAUSE_CHAR = "u", $clockDiv, $hourSpan, $minuteSpan, $secondSpan, $ampmSpan, $seriesName, $seriesCount, SAMPLE_SCALEUP = 4, commify = F.NumberLabeler.commify, SECONDS_PER_BUCKET_INTERVAL = constants.HISTOGRAM_MINUTES_PER_BUCKET * 60, AFTER = constants.AFTER, BAR_COUNT = floor(AFTER / SECONDS_PER_BUCKET_INTERVAL);
                                                                                                                                        var t, looping = false, interval, second, BAR_SPACING = CHART_WIDTH / BAR_COUNT, BAR_WIDTH = BAR_SPACING - 1, xpositions, displaySeries, displayMax, bars, SoftFloat = F.SoftFloat, groups, total, TIME_UPDATE_EVENT = constants.TIME_UPDATE_EVENT, PLAYBACK_EVENT = constants.PLAYBACK_EVENT, PAUSE = constants.PAUSE, PLAY = constants.PLAY, DRAGGING = constants.DRAGGING, GROUP_COLOR_STRINGS = [], ACTIVE_GROUP_COLOR_STRINGS = [], TIMELINE_TOP = CHART_BOTTOM + 10, TIMELINE_HT = 4, TIMELINE_LEFT = 15, TIMELINE_BOTTOM = TIMELINE_TOP + TIMELINE_HT + 6, SUBTITLE_DOT_YPOS = TIMELINE_TOP + 20, markerXpos, paused = false, thumbColor, priorMousedIndex = -1;
                                                                                                                                        var dragged = false, DRAG_THRESHHOLD_SQUARED = constants.DRAG_THRESHHOLD_SQUARED, mouseIsDown = false, mouseMoveWhilePaused = false, downTime, startX, startY, mousedItem, THUMB = 10;
                                                                                                                                        function init() {
                                                                                                                                          canvas = $("#histo")[0];
                                                                                                                                          ctx = canvas.getContext("2d");
                                                                                                                                          W = $(canvas).width();
                                                                                                                                          H = $(canvas).height();
                                                                                                                                          if (window.devicePixelRatio > 1) {
                                                                                                                                            canvas.width = W * window.devicePixelRatio;
                                                                                                                                            canvas.height = H * window.devicePixelRatio;
                                                                                                                                            ctx.scale(window.devicePixelRatio, window.devicePixelRatio)
                                                                                                                                          } else {
                                                                                                                                            canvas.width = W;
                                                                                                                                            canvas.height = H
                                                                                                                                          }
                                                                                                                                          $clockDiv = $("#series-time");
                                                                                                                                          $hourSpan = $clockDiv.find("#hh");
                                                                                                                                          $minuteSpan = $clockDiv.find("#mm");
                                                                                                                                          $secondSpan = $clockDiv.find("#ss");
                                                                                                                                          $ampmSpan = $clockDiv.find("#ampm");
                                                                                                                                          $seriesName = $("#series-name");
                                                                                                                                          $seriesCount = $("#series-count");
                                                                                                                                          GROUP_COLOR_STRINGS = [];
                                                                                                                                          var c;
                                                                                                                                          for (var i = 0, L = GROUP_COLORS.length; i < L; i++) {
                                                                                                                                            c = GROUP_COLORS[i];
                                                                                                                                            GROUP_COLOR_STRINGS[i] = "rgba(" + c[0] + "," + c[1] + "," + c[2] + ","
                                                                                                                                          }
                                                                                                                                          for (var i = 0; i < L - 1; i++) {
                                                                                                                                            ACTIVE_GROUP_COLOR_STRINGS[i] = GROUP_COLOR_STRINGS[i]
                                                                                                                                          }
                                                                                                                                          xpositions = [];
                                                                                                                                          bars = [];
                                                                                                                                          for (var i = 0; i < BAR_COUNT; i++) {
                                                                                                                                            bars[i] = [];
                                                                                                                                            for (var g = 0; g < GROUP_COUNT; g++) {
                                                                                                                                              bars[i].push(new SoftFloat(0))
                                                                                                                                            }
                                                                                                                                            xpositions[i] = TIMELINE_LEFT + i * BAR_SPACING
                                                                                                                                          }
                                                                                                                                          thumbColor = new SoftFloat(150);
                                                                                                                                          ctx.font = "12px icons";
                                                                                                                                          ctx.textBaseline = "middle"
                                                                                                                                        }
                                                                                                                                        function setData(data) {
                                                                                                                                          groups = data.groups;
                                                                                                                                          total = data.total;
                                                                                                                                          setSeries(total)
                                                                                                                                        }
                                                                                                                                        function setSecond(s) {
                                                                                                                                          second = s;
                                                                                                                                          interval = floor(second / SECONDS_PER_BUCKET_INTERVAL);
                                                                                                                                          var m = floor(second / 60) % 60
                                                                                                                                          , h = floor(second / 3600)
                                                                                                                                          , am = h < 12 ? "am" : "pm";
                                                                                                                                          if (h == 0) {
                                                                                                                                            h = 12
                                                                                                                                          } else {
                                                                                                                                            if (h > 12) {
                                                                                                                                              h %= 12
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          $hourSpan.text(h);
                                                                                                                                          $minuteSpan.text((m < 10 ? "0" : "") + m);
                                                                                                                                          $ampmSpan.text(am);
                                                                                                                                          if (displaySeries) {
                                                                                                                                            $seriesCount.text(commify(displaySeries.cumulativeCounts[second] * SAMPLE_SCALEUP))
                                                                                                                                          }
                                                                                                                                          markerXpos = TIMELINE_LEFT + CHART_WIDTH * second / AFTER;
                                                                                                                                          launchLoop()
                                                                                                                                        }
                                                                                                                                        function setSeries(item, label) {
                                                                                                                                          if (item == displaySeries || !item || item.binMax === undefined) {
                                                                                                                                            return
                                                                                                                                          }
                                                                                                                                          displaySeries = item;
                                                                                                                                          displayMax = item.binMax;
                                                                                                                                          $seriesName.text(label || item.name);
                                                                                                                                          $seriesCount.text(commify(item.cumulativeCounts[second] * SAMPLE_SCALEUP));
                                                                                                                                          var barScale = CHART_HEIGHT / displayMax;
                                                                                                                                          if (displaySeries == total) {
                                                                                                                                            ACTIVE_GROUP_COLOR_STRINGS[0] = GROUP_COLOR_STRINGS[0];
                                                                                                                                            for (var i = 0; i < BAR_COUNT; i++) {
                                                                                                                                              for (var g = 0; g < GROUP_COUNT; g++) {
                                                                                                                                                bars[i][g].setTarget(groups[g].binnedCounts[i] * barScale)
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          } else {
                                                                                                                                            var groupId = item.groupId, counts = item.binnedCounts, c, h;
                                                                                                                                            if (groupId == 0 && undefined != item.subGroupId) {
                                                                                                                                              groupId = 4 + item.subGroupId
                                                                                                                                            }
                                                                                                                                            if (groupId > 4) {
                                                                                                                                              ACTIVE_GROUP_COLOR_STRINGS[0] = GROUP_COLOR_STRINGS[4]
                                                                                                                                            } else {
                                                                                                                                              ACTIVE_GROUP_COLOR_STRINGS[0] = GROUP_COLOR_STRINGS[0]
                                                                                                                                            }
                                                                                                                                            if (groupId >= 4) {
                                                                                                                                              groupId = 0
                                                                                                                                            }
                                                                                                                                            for (var i = 0; i < BAR_COUNT; i++) {
                                                                                                                                              for (var g = 0; g < GROUP_COUNT; g++) {
                                                                                                                                                if (g == groupId) {
                                                                                                                                                  c = counts[i];
                                                                                                                                                  h = c * barScale;
                                                                                                                                                  bars[i][g].setTarget(h)
                                                                                                                                                } else {
                                                                                                                                                  bars[i][g].setTarget(0)
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        function draw() {
                                                                                                                                          var n = Date.now() + 10;
                                                                                                                                          var bh, th, bar, xpos, fs;
                                                                                                                                          ctx.clearRect(0, 0, W, H);
                                                                                                                                          for (var i = 0; i < BAR_COUNT; i++) {
                                                                                                                                            th = CHART_BOTTOM;
                                                                                                                                            xpos = xpositions[i];
                                                                                                                                            for (var g = GROUP_COUNT - 1; g >= 0; g--) {
                                                                                                                                              bar = bars[i][g];
                                                                                                                                              bar.update();
                                                                                                                                              bh = bar.get();
                                                                                                                                              fs = ACTIVE_GROUP_COLOR_STRINGS[g];
                                                                                                                                              fs += (i <= interval ? ".95" : ".5") + ")";
                                                                                                                                              ctx.fillStyle = ACTIVE_GROUP_COLOR_STRINGS[g] + (i <= interval ? ".95" : ".5") + ")";
                                                                                                                                              ctx.fillRect(xpos, th, BAR_WIDTH, -bh);
                                                                                                                                              th -= bh
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          drawTimeline();
                                                                                                                                          n -= Date.now();
                                                                                                                                          if (n <= 0) {
                                                                                                                                            n = 1
                                                                                                                                          }
                                                                                                                                          setTimeout(requestFrame, n)
                                                                                                                                        }
                                                                                                                                        function drawTimeline() {
                                                                                                                                          ctx.fillStyle = "rgb(240,240,240)";
                                                                                                                                          ctx.fillRect(TIMELINE_LEFT, TIMELINE_TOP, CHART_WIDTH, TIMELINE_HT);
                                                                                                                                          var priorgrey = -1, grey;
                                                                                                                                          thumbColor.update();
                                                                                                                                          grey = round(thumbColor.get());
                                                                                                                                          ctx.fillStyle = "rgb(" + grey + "," + grey + "," + grey + ")";
                                                                                                                                          ctx.font = "16px icons";
                                                                                                                                          ctx.fillText(paused ? PLAY_CHAR : PAUSE_CHAR, markerXpos - 15.5, TIMELINE_TOP + 1)
                                                                                                                                        }
                                                                                                                                        function launchLoop() {
                                                                                                                                          if (!looping) {
                                                                                                                                            looping = true;
                                                                                                                                            requestFrame()
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        function requestFrame() {
                                                                                                                                          requestAnimationFrame(draw)
                                                                                                                                        }
                                                                                                                                        init();
                                                                                                                                        function bind() {
                                                                                                                                          $(canvas).unbind();
                                                                                                                                          $(canvas).bind("mousemove", handleMouseMove);
                                                                                                                                          $(canvas).bind("mousedown", handleMouseDown);
                                                                                                                                          $(canvas).bind("mouseup", handleMouseUp)
                                                                                                                                        }
                                                                                                                                        function getInterval(x) {
                                                                                                                                          var erval = (x - TIMELINE_LEFT) / BAR_SPACING;
                                                                                                                                          if (erval < 0) {
                                                                                                                                            erval = 0
                                                                                                                                          }
                                                                                                                                          if (erval >= xpositions.length) {
                                                                                                                                            erval = xpositions.length - 1
                                                                                                                                          }
                                                                                                                                          return floor(erval)
                                                                                                                                        }
                                                                                                                                        function getTimelineItemCode(x, y) {
                                                                                                                                          var code = false;
                                                                                                                                          if (y > TIMELINE_TOP - 4) {
                                                                                                                                            if (y < TIMELINE_BOTTOM) {
                                                                                                                                              if (x <= markerXpos + 5 && x >= markerXpos - 20) {
                                                                                                                                                code = THUMB
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          return code
                                                                                                                                        }
                                                                                                                                        function handleMouseMove(eventData) {
                                                                                                                                          eventData.stopPropagation();
                                                                                                                                          var x = eventData.offsetX
                                                                                                                                          , y = eventData.offsetY
                                                                                                                                          , code = false;
                                                                                                                                          if (mouseIsDown) {
                                                                                                                                            var indx = getInterval(x)
                                                                                                                                            , dx = x - startX
                                                                                                                                            , dy = y - startY
                                                                                                                                            , d2 = dx * dx + dy * dy;
                                                                                                                                            if (indx != priorMousedIndex) {
                                                                                                                                              if (paused) {
                                                                                                                                                histo.announce(PLAYBACK_EVENT, PLAY);
                                                                                                                                                setTimeout(function() {
                                                                                                                                                  histo.announce(PLAYBACK_EVENT, PAUSE)
                                                                                                                                                }, 300)
                                                                                                                                              }
                                                                                                                                              histo.announce(TIME_UPDATE_EVENT, indx * SECONDS_PER_BUCKET_INTERVAL);
                                                                                                                                              priorMousedIndex = indx
                                                                                                                                            } else {}
                                                                                                                                            if (d2 >= DRAG_THRESHHOLD_SQUARED) {
                                                                                                                                              dragged = true
                                                                                                                                            }
                                                                                                                                          } else {
                                                                                                                                            code = getTimelineItemCode(x, y)
                                                                                                                                          }
                                                                                                                                          if (code == THUMB) {
                                                                                                                                            thumbColor.setTarget(100);
                                                                                                                                            $(canvas).addClass("thumbing")
                                                                                                                                          } else {
                                                                                                                                            thumbColor.setTarget(180);
                                                                                                                                            $(canvas).removeClass("thumbing")
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        function handleMouseDown(eventData) {
                                                                                                                                          eventData.stopPropagation();
                                                                                                                                          startX = eventData.offsetX,
                                                                                                                                          startY = eventData.offsetY;
                                                                                                                                          mousedItem = getTimelineItemCode(startX, startY);
                                                                                                                                          histo.announce(PLAYBACK_EVENT, DRAGGING);
                                                                                                                                          if (!mousedItem && startY < TIMELINE_BOTTOM) {
                                                                                                                                            var indx = getInterval(startX);
                                                                                                                                            priorMousedIndex = indx;
                                                                                                                                            histo.announce(TIME_UPDATE_EVENT, indx * SECONDS_PER_BUCKET_INTERVAL)
                                                                                                                                          }
                                                                                                                                          mouseIsDown = true;
                                                                                                                                          downTime = Date.now()
                                                                                                                                        }
                                                                                                                                        function handleMouseUp(eventData) {
                                                                                                                                          eventData.stopPropagation();
                                                                                                                                          if (!dragged) {
                                                                                                                                            if (mousedItem !== false) {
                                                                                                                                              if (mousedItem == THUMB) {
                                                                                                                                                if (paused) {
                                                                                                                                                  histo.announce(PLAYBACK_EVENT, PLAY)
                                                                                                                                                } else {
                                                                                                                                                  histo.announce(PLAYBACK_EVENT, PAUSE)
                                                                                                                                                }
                                                                                                                                                paused = !paused
                                                                                                                                              }
                                                                                                                                            } else {}
                                                                                                                                          } else {}
                                                                                                                                          if (!paused) {
                                                                                                                                            histo.announce(PLAYBACK_EVENT, PLAY)
                                                                                                                                          }
                                                                                                                                          dragged = false;
                                                                                                                                          mouseIsDown = false
                                                                                                                                        }
                                                                                                                                        function clearAll() {
                                                                                                                                          thumbColor.setTarget(180)
                                                                                                                                        }
                                                                                                                                        function handleSelect(params) {
                                                                                                                                          if (params.item) {
                                                                                                                                            setSeries(params.item, params.label)
                                                                                                                                          } else {
                                                                                                                                            setSeries(total)
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        var histo = {
                                                                                                                                          draw: draw,
                                                                                                                                          setData: setData,
                                                                                                                                          setSecond: setSecond,
                                                                                                                                          handleSelect: handleSelect,
                                                                                                                                          bind: bind
                                                                                                                                        };
                                                                                                                                        F.eventify(histo);
                                                                                                                                        app.histo = histo
                                                                                                                                      }
                                                                                                                                    )(window.app);
                                                                                                                                    "use strict";
                                                                                                                                    (function(app) {
                                                                                                                                      var constants = app.constants, canvas, ctx, $label = $("#group-name"), GROUP_LEGEND_UNHIGHLIGHT_ALPHA = 0.8, SUBGROUP_LABELS = constants.SUBGROUP_LABELS, DEFAULT_LABEL = "Guide", TAU = Math.PI * 2, round = Math.round, floor = Math.floor, abs = Math.abs, cos = Math.cos, sin = Math.sin, atan2 = Math.atan2, sqrt = Math.sqrt, groups, items, W, H, cx, cy, looping = false, labelText = "", labelSetHandle = false, labelNext = null;
                                                                                                                                      var INNERMOST_RADIUS = 10
                                                                                                                                      , CENTER_RADIUS = 22.5
                                                                                                                                      , OUTERMOST_RADIUS = 35
                                                                                                                                      , SELECT_EVENT = constants.SELECT_EVENT
                                                                                                                                      , HOVER = constants.HOVER
                                                                                                                                      , LOCK = constants.LOCK
                                                                                                                                      , CLEAR = constants.CLEAR
                                                                                                                                      , GROUP = constants.GROUP
                                                                                                                                      , GRAVITRON = constants.GRAVITRON;
                                                                                                                                      function GroupItem(group, name, innerRadius, outerRadius, startAngle, endAngle) {
                                                                                                                                        this.group = group;
                                                                                                                                        this.name = name;
                                                                                                                                        this.width = new F.SoftFloat(1);
                                                                                                                                        this.alpha = new F.SoftFloat(0);
                                                                                                                                        this.startAngle = startAngle;
                                                                                                                                        this.endAngle = endAngle;
                                                                                                                                        this.outerRadius = outerRadius;
                                                                                                                                        this.outerRadiusSquared = outerRadius * outerRadius;
                                                                                                                                        this.innerRadius = innerRadius;
                                                                                                                                        this.maxWidth = (outerRadius - innerRadius) / 2;
                                                                                                                                        this.unitVectors = arc(outerRadius, startAngle, endAngle - startAngle);
                                                                                                                                        this.minWidth = name == "Payer" ? 1.35 : 1.25;
                                                                                                                                        this.radius = (outerRadius + innerRadius) / 2;
                                                                                                                                        this.highlighted = false;
                                                                                                                                        var rgb = group.rgb;
                                                                                                                                        this.rgbString = "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ","
                                                                                                                                      }
                                                                                                                                      GroupItem.prototype.highlight = function() {
                                                                                                                                        this.alpha.setTarget(1);
                                                                                                                                        this.width.setTarget(this.maxWidth);
                                                                                                                                        this.highlighted = true;
                                                                                                                                        setLabel(this.name)
                                                                                                                                      }
                                                                                                                                      ;
                                                                                                                                      GroupItem.prototype.unhighlight = function() {
                                                                                                                                        if (this.highlighted) {
                                                                                                                                          this.highlighted = false;
                                                                                                                                          this.alpha.setTarget(GROUP_LEGEND_UNHIGHLIGHT_ALPHA);
                                                                                                                                          this.width.setTarget(this.minWidth)
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      ;
                                                                                                                                      GroupItem.prototype.draw = function(ctx) {
                                                                                                                                        var alpha = this.alpha
                                                                                                                                        , width = this.width;
                                                                                                                                        alpha.update();
                                                                                                                                        width.update();
                                                                                                                                        ctx.fillStyle = this.rgbString + (round(alpha.get() * 100) / 100) + ")";
                                                                                                                                        ctx.beginPath();
                                                                                                                                        this.drawShape(ctx);
                                                                                                                                        ctx.fill();
                                                                                                                                        return (alpha.atTarget && width.atTarget)
                                                                                                                                      }
                                                                                                                                      ;
                                                                                                                                      GroupItem.prototype.drawShape = function(ctx) {
                                                                                                                                        var r = this.radius
                                                                                                                                        , w = this.width.get();
                                                                                                                                        this.traceArcs(ctx, this.unitVectors, r + w, r - w)
                                                                                                                                      }
                                                                                                                                      ;
                                                                                                                                      GroupItem.prototype.traceArcs = function(ctx, unitVectors, r1, r2) {
                                                                                                                                        var i, L = unitVectors.length, point = unitVectors[0];
                                                                                                                                        ctx.moveTo(cx + point[0] * r1, cy + point[1] * r1);
                                                                                                                                        ctx.arc(cx, cy, r1, this.startAngle, this.endAngle, false);
                                                                                                                                        if (r2 > 0) {
                                                                                                                                          ctx.arc(cx, cy, r2, this.endAngle, this.startAngle, true)
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      ;
                                                                                                                                      function init() {
                                                                                                                                        canvas = $("#legend")[0];
                                                                                                                                        ctx = canvas.getContext("2d");
                                                                                                                                        W = $(canvas).width();
                                                                                                                                        H = $(canvas).height();
                                                                                                                                        $(canvas).width(W);
                                                                                                                                        $(canvas).height(H);
                                                                                                                                        cx = W * 0.5;
                                                                                                                                        cy = H * 0.5;
                                                                                                                                        if (window.devicePixelRatio > 1) {
                                                                                                                                          canvas.width = W * window.devicePixelRatio;
                                                                                                                                          canvas.height = H * window.devicePixelRatio;
                                                                                                                                          ctx.scale(window.devicePixelRatio, window.devicePixelRatio)
                                                                                                                                        } else {
                                                                                                                                          canvas.width = W;
                                                                                                                                          canvas.height = H
                                                                                                                                        }
                                                                                                                                        $label.removeClass("active")
                                                                                                                                      }
                                                                                                                                      function bind() {
                                                                                                                                        $(canvas).bind("mousemove", handleMouseMove);
                                                                                                                                        $(canvas).bind("mousedown", handleMouseDown)
                                                                                                                                      }
                                                                                                                                      function handleMouseMove(eventData) {
                                                                                                                                        eventData.stopPropagation();
                                                                                                                                        var item = getMousedItem(eventData);
                                                                                                                                        if (item) {
                                                                                                                                          var label = item.group.name;
                                                                                                                                          $(canvas).addClass("hover");
                                                                                                                                          legend.announce(SELECT_EVENT, {
                                                                                                                                            type: GROUP,
                                                                                                                                            action: HOVER,
                                                                                                                                            item: item.group,
                                                                                                                                            label: label
                                                                                                                                          })
                                                                                                                                        } else {
                                                                                                                                          $(canvas).removeClass("hover");
                                                                                                                                          legend.announce(SELECT_EVENT, {
                                                                                                                                            type: CLEAR,
                                                                                                                                            action: HOVER,
                                                                                                                                            item: false
                                                                                                                                          })
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      function getMousedItem(eventData) {
                                                                                                                                        var dx = eventData.offsetX - cx
                                                                                                                                        , dy = eventData.offsetY - cy
                                                                                                                                        , d2 = dx * dx + dy * dy
                                                                                                                                        , d = sqrt(d2)
                                                                                                                                        , angle = atan2(dy, dx)
                                                                                                                                        , item = false;
                                                                                                                                        if (angle < -TAU / 12 * 5) {
                                                                                                                                          angle += TAU
                                                                                                                                        }
                                                                                                                                        if (d <= OUTERMOST_RADIUS) {
                                                                                                                                          if (d <= CENTER_RADIUS) {
                                                                                                                                            if (d <= INNERMOST_RADIUS) {
                                                                                                                                              item = items[4]
                                                                                                                                            } else {
                                                                                                                                              for (var i = 5, L = items.length; i < L; i++) {
                                                                                                                                                item = items[i];
                                                                                                                                                if (angle >= item.startAngle && angle <= item.endAngle) {
                                                                                                                                                  break
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          } else {
                                                                                                                                            for (var i = 1; i < 4; i++) {
                                                                                                                                              item = items[i];
                                                                                                                                              if (angle >= item.startAngle && angle <= item.endAngle) {
                                                                                                                                                break
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        return item
                                                                                                                                      }
                                                                                                                                      function handleMouseDown(eventData) {
                                                                                                                                        eventData.stopPropagation();
                                                                                                                                        var item = getMousedItem(eventData);
                                                                                                                                        if (item) {
                                                                                                                                          legend.announce(SELECT_EVENT, {
                                                                                                                                            type: GROUP,
                                                                                                                                            action: LOCK,
                                                                                                                                            item: item.group
                                                                                                                                          })
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      function setSelectedGroup(group) {
                                                                                                                                        if (!group) {
                                                                                                                                          for (var i = 1, L = items.length; i < L; i++) {
                                                                                                                                            items[i].unhighlight()
                                                                                                                                          }
                                                                                                                                        } else {
                                                                                                                                          if (group.groupId == 0) {
                                                                                                                                            for (var i = 1; i < 4; i++) {
                                                                                                                                              items[i].unhighlight()
                                                                                                                                            }
                                                                                                                                            for (var i = 4, L = items.length; i < L; i++) {
                                                                                                                                              items[i].highlight()
                                                                                                                                            }
                                                                                                                                            setLabel("Practice")
                                                                                                                                          } else {
                                                                                                                                            for (var i = 1, L = items.length; i < L; i++) {
                                                                                                                                              items[i].unhighlight()
                                                                                                                                            }
                                                                                                                                            items[group.groupId].highlight()
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      function handleSelect(params) {
                                                                                                                                        if (params.type === GROUP) {
                                                                                                                                          setSelectedGroup(params.item)
                                                                                                                                        } else {
                                                                                                                                          if (params.type === GRAVITRON) {
                                                                                                                                            setSelectedNode(params.item)
                                                                                                                                          } else {
                                                                                                                                            if (params.type === CLEAR) {
                                                                                                                                              setSelectedNode(false);
                                                                                                                                              for (var i = items.length - 1; i > 0; i--) {
                                                                                                                                                items[i].unhighlight();
                                                                                                                                                items[i].alpha.setTarget(GROUP_LEGEND_UNHIGHLIGHT_ALPHA);
                                                                                                                                                items[i].width.setTarget(items[i].minWidth)
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      function setSelectedGroupId(groupId) {
                                                                                                                                        for (var i = items.length - 1; i > 0; i--) {
                                                                                                                                          items[i].unhighlight()
                                                                                                                                        }
                                                                                                                                        items[groupId].highlight()
                                                                                                                                      }
                                                                                                                                      function setSelectedNode(node) {
                                                                                                                                        if (node) {
                                                                                                                                          if (node.groupId > 0) {
                                                                                                                                            setSelectedGroupId(node.groupId)
                                                                                                                                          } else {
                                                                                                                                            var id = SUBGROUP_LABELS.indexOf(node.subtype);
                                                                                                                                            setSelectedGroupId(id + 4)
                                                                                                                                          }
                                                                                                                                        } else {
                                                                                                                                          setSelectedGroup(false);
                                                                                                                                          setLabel(DEFAULT_LABEL)
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      function setData(data) {
                                                                                                                                        groups = data.groups;
                                                                                                                                        items = [];
                                                                                                                                        var startAngle = -TAU / 12 * 5;
                                                                                                                                        var endAngle = startAngle + TAU / 3;
                                                                                                                                        var practice = groups[0];
                                                                                                                                        var centerItem = new GroupItem(practice.arcs[0],"Practice Encounter",0,INNERMOST_RADIUS,0,TAU);
                                                                                                                                        centerItem.radius = centerItem.outerRadius;
                                                                                                                                        centerItem.drawShape = function(ctx) {
                                                                                                                                          var r = this.radius
                                                                                                                                          , w = this.width.get();
                                                                                                                                          this.traceArcs(ctx, this.unitVectors, r, r - w * 2)
                                                                                                                                        }
                                                                                                                                        ;
                                                                                                                                        for (var i = 1, L = groups.length; i < L; i++) {
                                                                                                                                          var group = groups[i];
                                                                                                                                          items[i] = new GroupItem(group,group.name,CENTER_RADIUS,OUTERMOST_RADIUS,startAngle,endAngle);
                                                                                                                                          startAngle = endAngle;
                                                                                                                                          endAngle += TAU / 3
                                                                                                                                        }
                                                                                                                                        items[4] = centerItem;
                                                                                                                                        for (var i = 1, L = groups.length; i < L; i++) {
                                                                                                                                          var subGroup = practice.arcs[i];
                                                                                                                                          var echoItem = items[i];
                                                                                                                                          items[i + 4] = new GroupItem(subGroup,subGroup.name,INNERMOST_RADIUS,CENTER_RADIUS,echoItem.startAngle,echoItem.endAngle)
                                                                                                                                        }
                                                                                                                                        labelNext = null;
                                                                                                                                        launchLoop()
                                                                                                                                      }
                                                                                                                                      function setSpeedParams(speedo) {
                                                                                                                                        var widthFloat;
                                                                                                                                        if (!items) {
                                                                                                                                          return
                                                                                                                                        }
                                                                                                                                        for (var i = 1, L = items.length; i < L; i++) {
                                                                                                                                          widthFloat = items[i].width;
                                                                                                                                          widthFloat.attraction = speedo.attraction;
                                                                                                                                          widthFloat.damping = speedo.damping
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      function setLabel(text) {
                                                                                                                                        if (labelText == text) {} else {
                                                                                                                                          if (labelText == "") {
                                                                                                                                            $label.text(text);
                                                                                                                                            $label.addClass(labelText == DEFAULT_LABEL ? "active-default" : "active");
                                                                                                                                            labelText = text
                                                                                                                                          } else {
                                                                                                                                            if (text == "") {
                                                                                                                                              labelNext = "";
                                                                                                                                              if ($label.hasClass("active") || $label.hasClass("active-default")) {
                                                                                                                                                if (labelSetHandle) {
                                                                                                                                                  clearTimeout(labelSetHandle)
                                                                                                                                                }
                                                                                                                                                $label.removeClass("active");
                                                                                                                                                $label.removeClass("active-default")
                                                                                                                                              }
                                                                                                                                            } else {
                                                                                                                                              labelNext = text;
                                                                                                                                              if ($label.hasClass("active") || $label.hasClass("active-default")) {
                                                                                                                                                $label.removeClass("active");
                                                                                                                                                $label.removeClass("active-default");
                                                                                                                                                if (labelSetHandle) {
                                                                                                                                                  clearTimeout(labelSetHandle)
                                                                                                                                                }
                                                                                                                                                labelSetHandle = setTimeout(function() {
                                                                                                                                                  labelText = labelNext;
                                                                                                                                                  $label.text(labelText);
                                                                                                                                                  $label.addClass(labelText == DEFAULT_LABEL ? "active-default" : "active");
                                                                                                                                                  labelSetHandle = false
                                                                                                                                                }, 250)
                                                                                                                                              } else {
                                                                                                                                                labelText = labelNext;
                                                                                                                                                $label.text(labelText);
                                                                                                                                                $label.addClass(labelText == DEFAULT_LABEL ? "active-default" : "active")
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      function launchLoop() {
                                                                                                                                        if (!looping) {
                                                                                                                                          requestFrame()
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      function requestFrame() {
                                                                                                                                        requestAnimationFrame(draw)
                                                                                                                                      }
                                                                                                                                      function draw() {
                                                                                                                                        looping = true;
                                                                                                                                        var n = Date.now() + 20;
                                                                                                                                        ctx.clearRect(0, 0, W, H);
                                                                                                                                        for (var i = 1, L = items.length; i < L; i++) {
                                                                                                                                          items[i].draw(ctx)
                                                                                                                                        }
                                                                                                                                        n -= Date.now();
                                                                                                                                        if (n <= 0) {
                                                                                                                                          n = 1
                                                                                                                                        }
                                                                                                                                        setTimeout(requestFrame, n)
                                                                                                                                      }
                                                                                                                                      init();
                                                                                                                                      function arc(radius, angleStart, angleSpan) {
                                                                                                                                        var vertices = []
                                                                                                                                        , circumference = radius * angleSpan
                                                                                                                                        , outerStepCount = floor(circumference);
                                                                                                                                        for (var i = 0; i <= outerStepCount; i++) {
                                                                                                                                          var amt = i / outerStepCount * angleSpan;
                                                                                                                                          vertices.push([cos(angleStart + amt), sin(angleStart + amt)])
                                                                                                                                        }
                                                                                                                                        return vertices
                                                                                                                                      }
                                                                                                                                      var legend = {
                                                                                                                                        bind: bind,
                                                                                                                                        handleSelect: handleSelect,
                                                                                                                                        setData: setData,
                                                                                                                                        setSpeedParams: setSpeedParams
                                                                                                                                      };
                                                                                                                                      F.eventify(legend);
                                                                                                                                      app.legend = legend
                                                                                                                                    }
                                                                                                                                  )(window.app);
                                                                                                                                  "use strict";
                                                                                                                                  (function(app) {
                                                                                                                                    var constants = app.constants, glCanvas, centers, centerLookup, boundingNode, groups, arcs, W, H, headerHeight, cx, cy, tx, ty, tzoom, extraDrawer = function() {}, updateGravitrons = function() {}, nodeUpdateFunction = function() {}, pow = Math.pow, TAU = Math.PI * 2, abs = Math.abs, round = Math.round, BASE_ZOOM = 1, BASE_W, BASE_H, baseCx, baseCy, zoom = new F.SoftFloat(1), panX = new F.SoftFloat(0), panY = new F.SoftFloat(0), t, dragging = false, dragged = false, startX, startY, panStartX, panStartY, mousedNode = false, lockedNode = false, mousedGroup = false, lockedGroup = false, DRAG_THRESHHOLD_SQUARED = constants.DRAG_THRESHHOLD_SQUARED, ZOOM_PAN_EVENT = constants.ZOOM_PAN_EVENT, MIN_ZOOM = constants.MIN_ZOOM, MAX_ZOOM = constants.MAX_ZOOM, BOTTOM_RIGHT = TAU * (1 / 4 - 1 / 128), BOTTOM_LEFT = TAU * (1 / 4 + 1 / 128), TOP_LEFT = TAU * (3 / 4 - 1 / 128), TOP_RIGHT = TAU * (3 / 4 + 1 / 128), RIGHT = 1, BOTTOM = 2, LEFT = 3, TOP = 4, HOVER = constants.HOVER, LOCK = constants.LOCK, CLEAR = constants.CLEAR, GROUP = constants.GROUP, GRAVITRON = constants.GRAVITRON, SELECT_EVENT = constants.SELECT_EVENT, FPS = 30, FRAMEDELAY = Math.floor(1000 / FPS) - 4, nowF = Date.now, nextFtime, launchtime = -1, frameCount = 0, elapsed = 0, totalCount, lerperCount, faderCount, $totalCount = $("#total-count"), $lerperCount = $("#lerper-count"), $faderCount = $("#fader-count"), $fps = $("#fps"), commify = F.NumberLabeler.commify, tooOld, frametimes = [], focusRect = false, mx, my, tmx, tmy, tCx, tCy, drawingParticles = true, drawParticles = false, drawLaunched = false;
                                                                                                                                    function init() {
                                                                                                                                      glCanvas = $("#particles")[0];
                                                                                                                                      particulate.announce(constants.SHARE_CONTROL_EVENT, {
                                                                                                                                        zoom: zoom,
                                                                                                                                        panX: panX,
                                                                                                                                        panY: panY
                                                                                                                                      })
                                                                                                                                    }
                                                                                                                                    function setSize(sizes) {
                                                                                                                                      W = sizes.width;
                                                                                                                                      H = sizes.height;
                                                                                                                                      headerHeight = sizes.headerHeight;
                                                                                                                                      $("#main").width(W);
                                                                                                                                      $("#main").height(H);
                                                                                                                                      $(glCanvas).width(W);
                                                                                                                                      $(glCanvas).height(H);
                                                                                                                                      cx = W * 0.5;
                                                                                                                                      cy = H * 0.5;
                                                                                                                                      baseCx = cx;
                                                                                                                                      baseCy = cy;
                                                                                                                                      if (window.devicePixelRatio > 1) {
                                                                                                                                        BASE_ZOOM = window.devicePixelRatio;
                                                                                                                                        zoom.set(BASE_ZOOM);
                                                                                                                                        BASE_W = W * BASE_ZOOM;
                                                                                                                                        BASE_H = H * BASE_ZOOM;
                                                                                                                                        baseCx = cx * BASE_ZOOM;
                                                                                                                                        baseCy = cy * BASE_ZOOM
                                                                                                                                      } else {
                                                                                                                                        BASE_W = W;
                                                                                                                                        BASE_H = H
                                                                                                                                      }
                                                                                                                                      glCanvas.width = BASE_W;
                                                                                                                                      glCanvas.height = BASE_H;
                                                                                                                                      if (groups) {
                                                                                                                                        for (var i = 0, L = groups.length; i < L; i++) {
                                                                                                                                          groups[i].position(cx, cy)
                                                                                                                                        }
                                                                                                                                        boundingNode = groups[1].centers[0]
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    function bind() {
                                                                                                                                      $(glCanvas).bind("mousemove", handleMouseMove);
                                                                                                                                      $(glCanvas).bind("mousedown", handleMouseDown);
                                                                                                                                      $(glCanvas).bind("mouseup", handleMouseUp);
                                                                                                                                      updateGravitrons = updateGravitronUnchecked
                                                                                                                                    }
                                                                                                                                    function setData(data) {
                                                                                                                                      centers = data.centers;
                                                                                                                                      groups = data.groups;
                                                                                                                                      arcs = groups[0].arcs.concat(groups.slice(1));
                                                                                                                                      centerLookup = data.centerLookup;
                                                                                                                                      if (W) {
                                                                                                                                        for (var i = 0, L = groups.length; i < L; i++) {
                                                                                                                                          groups[i].position(cx, cy)
                                                                                                                                        }
                                                                                                                                        boundingNode = groups[1].centers[0]
                                                                                                                                      }
                                                                                                                                      if (!drawLaunched) {
                                                                                                                                        drawLaunched = true;
                                                                                                                                        draw()
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    function setUpdater(params) {
                                                                                                                                      nodeUpdateFunction = params.updater;
                                                                                                                                      if (params.extraDrawer) {
                                                                                                                                        extraDrawer = params.extraDrawer
                                                                                                                                      } else {
                                                                                                                                        extraDrawer = function() {}
                                                                                                                                      }
                                                                                                                                      if (params.nodeFunction) {
                                                                                                                                        updateGravitrons = params.nodeFunction
                                                                                                                                      } else {
                                                                                                                                        launchtime = Date.now()
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    function setFocus(rect) {
                                                                                                                                      if (rect) {
                                                                                                                                        var w = rect.right - rect.left
                                                                                                                                        , h = rect.bottom - rect.top
                                                                                                                                        , widthCoefficient = W / w
                                                                                                                                        , heightCoefficient = H / h
                                                                                                                                        , z = (widthCoefficient < heightCoefficient ? widthCoefficient : heightCoefficient) * 0.75
                                                                                                                                        , rectCenterX = (rect.right + rect.left) / 2
                                                                                                                                        , rectCenterY = (rect.bottom + rect.top) / 2
                                                                                                                                        , dx = cx - rectCenterX
                                                                                                                                        , dy = cy - rectCenterY;
                                                                                                                                        if (z > MAX_ZOOM) {
                                                                                                                                          z = MAX_ZOOM
                                                                                                                                        } else {
                                                                                                                                          if (z < MIN_ZOOM) {
                                                                                                                                            z = MIN_ZOOM
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        focusRect = rect;
                                                                                                                                        particulate.announce(ZOOM_PAN_EVENT, {
                                                                                                                                          zoom: z,
                                                                                                                                          panX: dx * z,
                                                                                                                                          panY: dy * z
                                                                                                                                        })
                                                                                                                                      } else {
                                                                                                                                        particulate.announce(ZOOM_PAN_EVENT, {
                                                                                                                                          zoom_adjustment: constants.RESET_ZOOM_PAN
                                                                                                                                        })
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    function setZoomPan(zoomPanData) {
                                                                                                                                      if (zoomPanData.zoom) {
                                                                                                                                        zoom.setTarget(BASE_ZOOM * zoomPanData.zoom)
                                                                                                                                      }
                                                                                                                                      if (zoomPanData.panX != undefined) {
                                                                                                                                        panX.setTarget(BASE_ZOOM * zoomPanData.panX)
                                                                                                                                      }
                                                                                                                                      if (zoomPanData.panY != undefined) {
                                                                                                                                        panY.setTarget(BASE_ZOOM * zoomPanData.panY)
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    function getTranslatedXY(eventData) {
                                                                                                                                      var x = eventData.offsetX
                                                                                                                                      , y = eventData.offsetY
                                                                                                                                      , dx = x - cx
                                                                                                                                      , dy = y - cy
                                                                                                                                      , ltx = cx + dx / tzoom * BASE_ZOOM - tx / tzoom
                                                                                                                                      , lty = cy + dy / tzoom * BASE_ZOOM - ty / tzoom;
                                                                                                                                      return [ltx, lty]
                                                                                                                                    }
                                                                                                                                    function getUntranslatedXY(ltx, lty) {
                                                                                                                                      var tdx = ltx + tx / tzoom - cx
                                                                                                                                      , tdy = lty + ty / tzoom - cy
                                                                                                                                      , dx = tdx / BASE_ZOOM * tzoom
                                                                                                                                      , dy = tdy / BASE_ZOOM * tzoom
                                                                                                                                      , x = dx + cx
                                                                                                                                      , y = dy + cy;
                                                                                                                                      return [x, y]
                                                                                                                                    }
                                                                                                                                    function updateZoomPan() {
                                                                                                                                      zoom.update();
                                                                                                                                      panX.update();
                                                                                                                                      panY.update();
                                                                                                                                      tzoom = zoom.get();
                                                                                                                                      var zw = W * tzoom
                                                                                                                                      , zh = H * tzoom
                                                                                                                                      , zCx = zw * 0.5
                                                                                                                                      , zCy = zh * 0.5;
                                                                                                                                      tCx = baseCx - zCx;
                                                                                                                                      tCy = baseCy - zCy;
                                                                                                                                      tx = panX.get(),
                                                                                                                                      ty = panY.get()
                                                                                                                                    }
                                                                                                                                    function getClosestNode(mx, my) {
                                                                                                                                      var node, d2, closestNode = false, minD2 = 25 * 25, s2, dx, dy;
                                                                                                                                      for (var i = centers.length - 1; i >= 0; i--) {
                                                                                                                                        node = centers[i];
                                                                                                                                        s2 = node.size.get();
                                                                                                                                        s2 *= s2;
                                                                                                                                        dx = mx - node.x;
                                                                                                                                        dy = my - node.y;
                                                                                                                                        d2 = dx * dx + dy * dy;
                                                                                                                                        if (d2 < s2) {
                                                                                                                                          closestNode = node;
                                                                                                                                          break
                                                                                                                                        }
                                                                                                                                        if (d2 < minD2) {
                                                                                                                                          minD2 = d2;
                                                                                                                                          closestNode = node
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      return closestNode
                                                                                                                                    }
                                                                                                                                    function updateGravitronUnchecked() {
                                                                                                                                      centers.forEach(updateGravitron)
                                                                                                                                    }
                                                                                                                                    function updateGravitron(g, i) {
                                                                                                                                      g.updateTargets();
                                                                                                                                      g.updateValues();
                                                                                                                                      var gx = g.x
                                                                                                                                      , gy = g.y
                                                                                                                                      , coords = getUntranslatedXY(gx, gy)
                                                                                                                                      , labelX = coords[0]
                                                                                                                                      , labelY = coords[1]
                                                                                                                                      , groupAngle = g.groupAngle
                                                                                                                                      , s = g.size.get() * 2 * zoom.get() + 5
                                                                                                                                      , labelWidth = g.labelWidth
                                                                                                                                      , labelHeight = g.labelHeight;
                                                                                                                                      while (groupAngle < 0) {
                                                                                                                                        groupAngle += TAU
                                                                                                                                      }
                                                                                                                                      if (groupAngle < TOP_RIGHT) {
                                                                                                                                        if (groupAngle < TOP_LEFT) {
                                                                                                                                          if (groupAngle < BOTTOM_LEFT) {
                                                                                                                                            if (groupAngle < BOTTOM_RIGHT) {
                                                                                                                                              g.labelSide = RIGHT;
                                                                                                                                              labelX += s;
                                                                                                                                              labelY -= 4
                                                                                                                                            } else {
                                                                                                                                              g.labelSide = BOTTOM;
                                                                                                                                              labelX -= labelWidth / 2;
                                                                                                                                              labelY += s
                                                                                                                                            }
                                                                                                                                          } else {
                                                                                                                                            g.labelSide = LEFT;
                                                                                                                                            labelX -= s + g.getLabelWidth() + 10;
                                                                                                                                            labelY -= labelHeight * 0.5
                                                                                                                                          }
                                                                                                                                        } else {
                                                                                                                                          g.labelSide = TOP;
                                                                                                                                          labelY -= s + labelHeight;
                                                                                                                                          labelX -= labelWidth / 2
                                                                                                                                        }
                                                                                                                                      } else {
                                                                                                                                        g.labelSide = RIGHT;
                                                                                                                                        labelX += s;
                                                                                                                                        labelY -= labelHeight * 0.5
                                                                                                                                      }
                                                                                                                                      if (labelX < 0) {
                                                                                                                                        labelX = coords[0] + s
                                                                                                                                      } else {
                                                                                                                                        if (labelX > W - labelWidth) {
                                                                                                                                          labelX = coords[0] - s - 10 - g.getLabelWidth()
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      if (labelY < headerHeight) {
                                                                                                                                        labelY = coords[1] + s
                                                                                                                                      } else {
                                                                                                                                        if (labelY > H - headerHeight) {
                                                                                                                                          labelY = coords[1] - s
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      g.positionLabel(labelX, labelY);
                                                                                                                                      lerperCount += g.movingCount;
                                                                                                                                      faderCount += g.fadingCount;
                                                                                                                                      totalCount += g.movingCount + g.fadingCount
                                                                                                                                    }
                                                                                                                                    function unoverlapLabels(arc) {
                                                                                                                                      var gravs = arc.centers, L = gravs.length, maxX = -100000, minX = 100000, rightMost = -1, leftMost = -1, grav, x, y, side, priorY, labelY, priorLabelY, h, priorH, gx;
                                                                                                                                      for (var i = 0; i < L; i++) {
                                                                                                                                        grav = gravs[i];
                                                                                                                                        x = grav.x;
                                                                                                                                        side = grav.labelSide;
                                                                                                                                        if (x < minX && side != RIGHT) {
                                                                                                                                          minX = x;
                                                                                                                                          leftMost = i
                                                                                                                                        }
                                                                                                                                        if (x > maxX && side != LEFT) {
                                                                                                                                          maxX = x;
                                                                                                                                          rightMost = i
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      if (rightMost >= 0) {
                                                                                                                                        grav = gravs[rightMost];
                                                                                                                                        priorY = grav.labelY;
                                                                                                                                        priorLabelY = priorY;
                                                                                                                                        priorH = grav.getLabelHeight() + 6;
                                                                                                                                        for (var i = rightMost - 1; i >= 0; i--) {
                                                                                                                                          grav = gravs[i];
                                                                                                                                          if (grav.labelSide == LEFT) {
                                                                                                                                            break
                                                                                                                                          }
                                                                                                                                          y = grav.labelY;
                                                                                                                                          labelY = y;
                                                                                                                                          h = grav.getLabelHeight() + 6;
                                                                                                                                          if (y > priorLabelY - h) {
                                                                                                                                            labelY = priorLabelY - h;
                                                                                                                                            gx = grav.labelX;
                                                                                                                                            if (grav.labelSide == RIGHT && grav.labelX > grav.x) {
                                                                                                                                              gx = grav.x
                                                                                                                                            }
                                                                                                                                            grav.positionLabel(gx, labelY)
                                                                                                                                          }
                                                                                                                                          priorY = y;
                                                                                                                                          priorLabelY = labelY;
                                                                                                                                          priorH = h
                                                                                                                                        }
                                                                                                                                        grav = gravs[rightMost];
                                                                                                                                        priorY = grav.labelY;
                                                                                                                                        priorLabelY = priorY;
                                                                                                                                        priorH = grav.getLabelHeight() + 6;
                                                                                                                                        for (var i = rightMost + 1; i < L; i++) {
                                                                                                                                          grav = gravs[i];
                                                                                                                                          if (grav.labelSide == LEFT) {
                                                                                                                                            break
                                                                                                                                          }
                                                                                                                                          y = grav.labelY;
                                                                                                                                          labelY = y;
                                                                                                                                          h = grav.getLabelHeight() + 6;
                                                                                                                                          if (y < priorLabelY + priorH) {
                                                                                                                                            labelY = priorLabelY + priorH;
                                                                                                                                            gx = grav.labelX;
                                                                                                                                            if (grav.labelSide == RIGHT && grav.labelX > grav.x) {
                                                                                                                                              gx = grav.x
                                                                                                                                            }
                                                                                                                                            grav.positionLabel(gx, labelY)
                                                                                                                                          }
                                                                                                                                          priorY = y;
                                                                                                                                          priorLabelY = labelY;
                                                                                                                                          priorH = h
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      if (leftMost >= 0) {
                                                                                                                                        grav = gravs[leftMost];
                                                                                                                                        priorY = grav.labelY;
                                                                                                                                        priorLabelY = priorY;
                                                                                                                                        priorH = grav.getLabelHeight() + 6;
                                                                                                                                        for (var i = leftMost + 1; i < L; i++) {
                                                                                                                                          grav = gravs[i];
                                                                                                                                          if (grav.labelSide == RIGHT) {
                                                                                                                                            break
                                                                                                                                          }
                                                                                                                                          y = grav.labelY;
                                                                                                                                          labelY = y;
                                                                                                                                          h = grav.getLabelHeight() + 6;
                                                                                                                                          if (y > priorLabelY - h) {
                                                                                                                                            labelY = priorLabelY - h;
                                                                                                                                            grav.positionLabel(grav.labelX, labelY)
                                                                                                                                          }
                                                                                                                                          priorY = y;
                                                                                                                                          priorLabelY = labelY;
                                                                                                                                          priorH = h
                                                                                                                                        }
                                                                                                                                        grav = gravs[leftMost];
                                                                                                                                        priorY = grav.labelY;
                                                                                                                                        priorLabelY = priorY;
                                                                                                                                        priorH = grav.getLabelHeight() + 6;
                                                                                                                                        for (var i = leftMost - 1; i >= 0; i--) {
                                                                                                                                          grav = gravs[i];
                                                                                                                                          if (grav.labelSide == RIGHT) {
                                                                                                                                            break
                                                                                                                                          }
                                                                                                                                          y = grav.labelY;
                                                                                                                                          labelY = y;
                                                                                                                                          h = grav.getLabelHeight() + 6;
                                                                                                                                          if (y < priorLabelY + priorH) {
                                                                                                                                            labelY = priorLabelY + priorH;
                                                                                                                                            grav.positionLabel(grav.labelX, labelY)
                                                                                                                                          }
                                                                                                                                          priorY = y;
                                                                                                                                          priorLabelY = labelY;
                                                                                                                                          priorH = h
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    function draw() {
                                                                                                                                      t = nowF();
                                                                                                                                      totalCount = 0;
                                                                                                                                      lerperCount = 0;
                                                                                                                                      faderCount = 0;
                                                                                                                                      nodeUpdateFunction();
                                                                                                                                      updateZoomPan();
                                                                                                                                      updateGravitrons();
                                                                                                                                      if (drawParticles) {
                                                                                                                                        drawParticles()
                                                                                                                                      }
                                                                                                                                      extraDrawer();
                                                                                                                                      if (lockedNode) {
                                                                                                                                        lockedNode.highlight();
                                                                                                                                        if (mousedNode && mousedNode != lockedNode) {
                                                                                                                                          mousedNode.highlight()
                                                                                                                                        }
                                                                                                                                      } else {
                                                                                                                                        if (mousedNode) {
                                                                                                                                          mousedNode.highlight()
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      nextFtime = t + FRAMEDELAY;
                                                                                                                                      t = nowF();
                                                                                                                                      if (t > nextFtime) {
                                                                                                                                        requestFrame()
                                                                                                                                      } else {
                                                                                                                                        setTimeout(requestFrame, nextFtime - t)
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    function requestFrame() {
                                                                                                                                      requestAnimationFrame(draw)
                                                                                                                                    }
                                                                                                                                    function handleMouseMove(eventData) {
                                                                                                                                      eventData.stopPropagation();
                                                                                                                                      mx = eventData.offsetX;
                                                                                                                                      my = eventData.offsetY;
                                                                                                                                      var tc = getTranslatedXY(eventData);
                                                                                                                                      tmx = tc[0];
                                                                                                                                      tmy = tc[1];
                                                                                                                                      if (dragging) {
                                                                                                                                        var dx = eventData.offsetX - startX
                                                                                                                                        , dy = eventData.offsetY - startY;
                                                                                                                                        if (dragged || dx * dx + dy * dy >= DRAG_THRESHHOLD_SQUARED) {
                                                                                                                                          dragged = true;
                                                                                                                                          var panX = panStartX / BASE_ZOOM + dx
                                                                                                                                          , panY = panStartY / BASE_ZOOM + dy
                                                                                                                                          , panLimit = boundingNode.distance * tzoom;
                                                                                                                                          if (panX < -panLimit) {
                                                                                                                                            panX = -panLimit
                                                                                                                                          } else {
                                                                                                                                            if (panX > panLimit) {
                                                                                                                                              panX = panLimit
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          if (panY < -panLimit) {
                                                                                                                                            panY = -panLimit
                                                                                                                                          } else {
                                                                                                                                            if (panY > panLimit) {
                                                                                                                                              panY = panLimit
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          particulate.announce(ZOOM_PAN_EVENT, {
                                                                                                                                            panX: panX,
                                                                                                                                            panY: panY
                                                                                                                                          })
                                                                                                                                        }
                                                                                                                                      } else {
                                                                                                                                        var coords = getTranslatedXY(eventData)
                                                                                                                                        , closestNode = getClosestNode(coords[0], coords[1]);
                                                                                                                                        if ((mousedNode != closestNode) || mousedGroup) {
                                                                                                                                          particulate.announce(constants.SELECT_EVENT, {
                                                                                                                                            type: GRAVITRON,
                                                                                                                                            action: HOVER,
                                                                                                                                            item: closestNode
                                                                                                                                          })
                                                                                                                                        }
                                                                                                                                        if (closestNode) {
                                                                                                                                          $(glCanvas).addClass("hover")
                                                                                                                                        } else {
                                                                                                                                          $(glCanvas).removeClass("hover")
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    function handleMouseDown(eventData) {
                                                                                                                                      eventData.stopPropagation();
                                                                                                                                      startX = eventData.offsetX;
                                                                                                                                      startY = eventData.offsetY;
                                                                                                                                      panStartX = panX.get();
                                                                                                                                      panStartY = panY.get();
                                                                                                                                      var coords = getTranslatedXY(eventData);
                                                                                                                                      mousedNode = getClosestNode(coords[0], coords[1]);
                                                                                                                                      dragging = true
                                                                                                                                    }
                                                                                                                                    function handleMouseUp(eventData) {
                                                                                                                                      eventData.stopPropagation();
                                                                                                                                      if (!dragged) {
                                                                                                                                        particulate.announce(constants.SELECT_EVENT, {
                                                                                                                                          type: GRAVITRON,
                                                                                                                                          action: LOCK,
                                                                                                                                          item: mousedNode
                                                                                                                                        })
                                                                                                                                      } else {
                                                                                                                                        dragged = false
                                                                                                                                      }
                                                                                                                                      dragging = false
                                                                                                                                    }
                                                                                                                                    function handleSelect(params) {
                                                                                                                                      if (params.type == GRAVITRON) {
                                                                                                                                        if (params.action == HOVER) {
                                                                                                                                          mousedNode = params.item
                                                                                                                                        } else {
                                                                                                                                          if (params.action == LOCK) {
                                                                                                                                            lockedNode = params.item
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      } else {
                                                                                                                                        if (params.type == GROUP) {
                                                                                                                                          if (params.action == HOVER) {
                                                                                                                                            mousedGroup = params.item
                                                                                                                                          } else {
                                                                                                                                            if (params.action == LOCK) {
                                                                                                                                              lockedGroup = params.item
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        } else {
                                                                                                                                          if (params.type == CLEAR) {
                                                                                                                                            if (params.action == HOVER) {
                                                                                                                                              mousedNode = false
                                                                                                                                            } else {
                                                                                                                                              if (params.action == LOCK) {
                                                                                                                                                lockedNode = false
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    function setParticleFunction(data) {
                                                                                                                                      if (data.status == constants.READY) {
                                                                                                                                        drawParticles = data.drawFunction;
                                                                                                                                        drawingParticles = true
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    var particulate = {
                                                                                                                                      bind: bind,
                                                                                                                                      setZoomPan: setZoomPan,
                                                                                                                                      setFocus: setFocus,
                                                                                                                                      setData: setData,
                                                                                                                                      setSize: setSize,
                                                                                                                                      setUpdater: setUpdater,
                                                                                                                                      handleSelect: handleSelect,
                                                                                                                                      setParticleFunction: setParticleFunction,
                                                                                                                                      init: init
                                                                                                                                    };
                                                                                                                                    F.eventify(particulate);
                                                                                                                                    app.particulate = particulate
                                                                                                                                  }
                                                                                                                                )(window.app);
                                                                                                                                "use strict";
                                                                                                                                (function(app) {
                                                                                                                                  var constants = app.constants
                                                                                                                                  , $container = $("#zoom-controls")
                                                                                                                                  , $zoomin = $("#z-in")
                                                                                                                                  , $zoomout = $("#z-out")
                                                                                                                                  , $reset = $("#z-set")
                                                                                                                                  , ZOOM_IN = constants.ZOOM_IN
                                                                                                                                  , ZOOM_OUT = constants.ZOOM_OUT
                                                                                                                                  , RESET = constants.RESET_ZOOM_PAN
                                                                                                                                  , MIN_ZOOM = constants.MIN_ZOOM
                                                                                                                                  , MAX_ZOOM = constants.MAX_ZOOM
                                                                                                                                  , DEFAULT_ZOOM = constants.DEFAULT_ZOOM
                                                                                                                                  , UNSCALED_TARGET_HEIGHT = 933
                                                                                                                                  , currentZoom = DEFAULT_ZOOM;
                                                                                                                                  var zoom = 1
                                                                                                                                  , panX = 0
                                                                                                                                  , panY = 0;
                                                                                                                                  function bind() {
                                                                                                                                    $container.removeClass("inactive");
                                                                                                                                    $zoomin.bind("mousedown", zoomIn);
                                                                                                                                    $zoomout.bind("mousedown", zoomOut);
                                                                                                                                    $reset.bind("mousedown", reset);
                                                                                                                                    $("#zoom-controls").bind("mousemove", function(e) {
                                                                                                                                      e.stopPropagation()
                                                                                                                                    })
                                                                                                                                  }
                                                                                                                                  function zoomIn(e) {
                                                                                                                                    e.stopPropagation();
                                                                                                                                    setZoomPan({
                                                                                                                                      zoom_adjustment: ZOOM_IN
                                                                                                                                    })
                                                                                                                                  }
                                                                                                                                  function zoomOut(e) {
                                                                                                                                    e.stopPropagation();
                                                                                                                                    setZoomPan({
                                                                                                                                      zoom_adjustment: ZOOM_OUT
                                                                                                                                    })
                                                                                                                                  }
                                                                                                                                  function reset(e) {
                                                                                                                                    e.stopPropagation();
                                                                                                                                    zoomControls.announce(constants.ZOOM_RESET_EVENT)
                                                                                                                                  }
                                                                                                                                  function setSize(size) {
                                                                                                                                    var viewportHeight = size.height - size.headerHeight * 2;
                                                                                                                                    DEFAULT_ZOOM = (viewportHeight < size.width ? viewportHeight : size.width) / UNSCALED_TARGET_HEIGHT;
                                                                                                                                    constants.DEFAULT_ZOOM = DEFAULT_ZOOM;
                                                                                                                                    constants.MIN_ZOOM = DEFAULT_ZOOM * 0.25;
                                                                                                                                    constants.MAX_ZOOM = DEFAULT_ZOOM * 4
                                                                                                                                  }
                                                                                                                                  function setZoomPan(zp) {
                                                                                                                                    var params = {};
                                                                                                                                    if (zp.zoom_adjustment) {
                                                                                                                                      params.zoom_adjustment = zp.zoom_adjustment;
                                                                                                                                      switch (zp.zoom_adjustment) {
                                                                                                                                        case ZOOM_IN:
                                                                                                                                        zoom *= 1.25;
                                                                                                                                        params.zoom = zoom;
                                                                                                                                        break;
                                                                                                                                        case ZOOM_OUT:
                                                                                                                                        zoom /= 1.25;
                                                                                                                                        params.zoom = zoom;
                                                                                                                                        break;
                                                                                                                                        case RESET:
                                                                                                                                        zoom = DEFAULT_ZOOM;
                                                                                                                                        panX = 0;
                                                                                                                                        panY = 0;
                                                                                                                                        params.zoom = zoom;
                                                                                                                                        params.panX = panX;
                                                                                                                                        params.panY = panY;
                                                                                                                                        break
                                                                                                                                      }
                                                                                                                                    } else {
                                                                                                                                      if (zp.zoom) {
                                                                                                                                        zoom = zp.zoom;
                                                                                                                                        params.zoom = zp.zoom
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    if (zp.panX !== undefined) {
                                                                                                                                      panX = zp.panX;
                                                                                                                                      params.panX = panX
                                                                                                                                    }
                                                                                                                                    if (zp.panY !== undefined) {
                                                                                                                                      panY = zp.panY;
                                                                                                                                      params.panY = panY
                                                                                                                                    }
                                                                                                                                    if (zoom >= MAX_ZOOM) {
                                                                                                                                      zoom = MAX_ZOOM;
                                                                                                                                      params.zoom = zoom;
                                                                                                                                      $zoomin.addClass("disabled")
                                                                                                                                    } else {
                                                                                                                                      $zoomin.removeClass("disabled")
                                                                                                                                    }
                                                                                                                                    if (zoom < MIN_ZOOM) {
                                                                                                                                      zoom = MIN_ZOOM;
                                                                                                                                      params.zoom = zoom;
                                                                                                                                      $zoomout.addClass("disabled")
                                                                                                                                    } else {
                                                                                                                                      $zoomout.removeClass("disabled")
                                                                                                                                    }
                                                                                                                                    if (zoom == DEFAULT_ZOOM && panX == 0 && panY == 0) {
                                                                                                                                      $container.removeClass("expanded")
                                                                                                                                    } else {
                                                                                                                                      $container.addClass("expanded")
                                                                                                                                    }
                                                                                                                                    currentZoom = zoom;
                                                                                                                                    zoomControls.announce(constants.ZOOM_PAN_EVENT, params)
                                                                                                                                  }
                                                                                                                                  var zoomControls = {
                                                                                                                                    bind: bind,
                                                                                                                                    setZoomPan: setZoomPan,
                                                                                                                                    setSize: setSize
                                                                                                                                  };
                                                                                                                                  F.eventify(zoomControls);
                                                                                                                                  app.zoomControls = zoomControls
                                                                                                                                }
                                                                                                                              )(window.app);
                                                                                                                              (function(app) {
                                                                                                                                var constants = app.constants, glCanvas, gl, shader, BASE_W, BASE_H, centers, maxCenterId, pow = Math.pow, PI = Math.PI, TAU = PI * 2, abs = Math.abs, sqrt = Math.sqrt, pow = Math.pow, hexture, gradients, updatingParticles = true, pathCount, pathFramebuffer, pathCenterLocationUniform, resolutionLocation, pathTextureRgba, pathRgbaIndices, paths, pathIndices, pathBuffer, pathIndicesAttribute, controlPoints, controlPointsBuffer, controlPointsAttribute, PATH_IMAGE_SIZE = 64, BAD_READING_SIZE = 256 * 256 - 1, TRAVEL_PIXELS = constants.TRAVEL_PIXELS, PATH_TYPES = constants.PATH_TYPES, buffIt, badReadingCount = 0;
                                                                                                                                function init(igloo, glContext, buffItFunction, createAndSetupTexture, gradientImage) {
                                                                                                                                  gl = glContext;
                                                                                                                                  var vertSrc = $("#pathlength-vs").text();
                                                                                                                                  var fragSrc = $("#pathlength-fs").text();
                                                                                                                                  shader = igloo.program(vertSrc, fragSrc).program;
                                                                                                                                  app.pathShader.shader = shader;
                                                                                                                                  buffIt = buffItFunction;
                                                                                                                                  var pathGradients = createAndSetupTexture(gl, gl.NEAREST, gl.NEAREST);
                                                                                                                                  gl.useProgram(shader);
                                                                                                                                  gl.bindTexture(gl.TEXTURE_2D, pathGradients);
                                                                                                                                  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, gradientImage);
                                                                                                                                  initGlBuffers(createAndSetupTexture)
                                                                                                                                }
                                                                                                                                function initGlBuffers(createAndSetupTexture) {
                                                                                                                                  gl.useProgram(shader);
                                                                                                                                  resolutionLocation = gl.getUniformLocation(shader, "resolution");
                                                                                                                                  pathCenterLocationUniform = gl.getUniformLocation(shader, "centerLocation");
                                                                                                                                  var pixels = new Uint8Array(PATH_IMAGE_SIZE * PATH_IMAGE_SIZE * 4);
                                                                                                                                  var pathTexture = createAndSetupTexture(gl, gl.NEAREST, gl.NEAREST);
                                                                                                                                  gl.activeTexture(gl.TEXTURE0);
                                                                                                                                  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, PATH_IMAGE_SIZE, PATH_IMAGE_SIZE, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
                                                                                                                                  pathFramebuffer = gl.createFramebuffer();
                                                                                                                                  gl.bindFramebuffer(gl.FRAMEBUFFER, pathFramebuffer);
                                                                                                                                  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, pathTexture, 0);
                                                                                                                                  gl.bindFramebuffer(gl.FRAMEBUFFER, null)
                                                                                                                                }
                                                                                                                                function setSize(W, H, BW, BH) {
                                                                                                                                  BASE_W = BW;
                                                                                                                                  BASE_H = BH;
                                                                                                                                  if (shader) {
                                                                                                                                    gl.useProgram(shader);
                                                                                                                                    gl.uniform2f(resolutionLocation, PATH_IMAGE_SIZE / 2, PATH_IMAGE_SIZE / 2)
                                                                                                                                  }
                                                                                                                                }
                                                                                                                                function setData(centers, maxCenterId) {
                                                                                                                                  pathCount = 0;
                                                                                                                                  pathIndices = [];
                                                                                                                                  paths = [];
                                                                                                                                  pathRgbaIndices = [];
                                                                                                                                  pathTextureRgba = new Uint8Array(PATH_IMAGE_SIZE * PATH_IMAGE_SIZE * 4);
                                                                                                                                  controlPoints = [];
                                                                                                                                  var nonPracticeAngles = [], cn, ca, centerAngles = [];
                                                                                                                                  for (var i = 0; i <= maxCenterId; i++) {
                                                                                                                                    cn = centers[i];
                                                                                                                                    if (cn.groupId > 0) {
                                                                                                                                      ca = cn.groupAngle;
                                                                                                                                      if (ca < TAU * 0.25) {
                                                                                                                                        ca += TAU
                                                                                                                                      }
                                                                                                                                      nonPracticeAngles.push([cn.id, ca])
                                                                                                                                    }
                                                                                                                                    centerAngles[cn.id] = cn.groupAngle
                                                                                                                                  }
                                                                                                                                  nonPracticeAngles.sort(function(a, b) {
                                                                                                                                    if (a[1] < b[1]) {
                                                                                                                                      return -1
                                                                                                                                    }
                                                                                                                                    if (a[1] > b[1]) {
                                                                                                                                      return 1
                                                                                                                                    }
                                                                                                                                    return 0
                                                                                                                                  });
                                                                                                                                  var nonPracticeAngleCount = nonPracticeAngles.length, angleIncr = TAU / (nonPracticeAngleCount + 3), a = TAU * 0.25 + angleIncr * 0.5, mId;
                                                                                                                                  for (var i = 0; i < nonPracticeAngleCount; i++) {
                                                                                                                                    mId = nonPracticeAngles[i][0];
                                                                                                                                    centerAngles[mId] = a;
                                                                                                                                    a += angleIncr
                                                                                                                                  }
                                                                                                                                  var centerPaths, path, oIndex, dIndex, pathType, clockwise, rgbaIndex;
                                                                                                                                  for (var i = 0; i <= maxCenterId; i++) {
                                                                                                                                    centerPaths = centers[i].paths;
                                                                                                                                    for (var p = 0, L = centerPaths.length; p < L; p++) {
                                                                                                                                      path = centerPaths[p];
                                                                                                                                      oIndex = path.origin.id;
                                                                                                                                      dIndex = path.destination.id;
                                                                                                                                      pathType = path.pathType;
                                                                                                                                      var angle = centerAngles[dIndex] - centerAngles[oIndex];
                                                                                                                                      while (angle < -PI) {
                                                                                                                                        angle += TAU
                                                                                                                                      }
                                                                                                                                      while (angle > PI) {
                                                                                                                                        angle -= TAU
                                                                                                                                      }
                                                                                                                                      clockwise = angle > 0 ? 1 : 0;
                                                                                                                                      path.clockwise = clockwise;
                                                                                                                                      rgbaIndex = ((dIndex) * PATH_IMAGE_SIZE + (oIndex)) * 4;
                                                                                                                                      pathIndices.push(oIndex);
                                                                                                                                      pathIndices.push(dIndex);
                                                                                                                                      pathIndices.push(pathType);
                                                                                                                                      pathIndices.push(clockwise);
                                                                                                                                      if (pathType == PATH_TYPES.BEZIER) {
                                                                                                                                        var cp = path.controlData;
                                                                                                                                        controlPoints.push(cp[0]);
                                                                                                                                        controlPoints.push(cp[1]);
                                                                                                                                        controlPoints.push(cp[2]);
                                                                                                                                        controlPoints.push(cp[3])
                                                                                                                                      } else {
                                                                                                                                        controlPoints.push(0);
                                                                                                                                        controlPoints.push(0);
                                                                                                                                        controlPoints.push(0);
                                                                                                                                        controlPoints.push(0)
                                                                                                                                      }
                                                                                                                                      paths.push(path);
                                                                                                                                      pathRgbaIndices.push(rgbaIndex);
                                                                                                                                      pathCount++
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                  gl.useProgram(shader);
                                                                                                                                  pathIndices = new Float32Array(pathIndices);
                                                                                                                                  pathIndicesAttribute = gl.getAttribLocation(shader, "pathData");
                                                                                                                                  gl.enableVertexAttribArray(pathIndicesAttribute);
                                                                                                                                  pathBuffer = gl.createBuffer();
                                                                                                                                  buffIt(pathBuffer, pathIndicesAttribute, pathIndices, 4);
                                                                                                                                  controlPoints = new Float32Array(controlPoints);
                                                                                                                                  controlPointsAttribute = gl.getAttribLocation(shader, "controlPoints");
                                                                                                                                  gl.enableVertexAttribArray(controlPointsAttribute);
                                                                                                                                  controlPointsBuffer = gl.createBuffer();
                                                                                                                                  buffIt(controlPointsBuffer, controlPointsAttribute, controlPoints, 4)
                                                                                                                                }
                                                                                                                                function setLengths(centerLocationBuffer) {
                                                                                                                                  gl.useProgram(shader);
                                                                                                                                  buffIt(pathBuffer, pathIndicesAttribute, pathIndices, 4);
                                                                                                                                  buffIt(controlPointsBuffer, controlPointsAttribute, controlPoints, 4);
                                                                                                                                  gl.bindFramebuffer(gl.FRAMEBUFFER, pathFramebuffer);
                                                                                                                                  gl.uniform4fv(pathCenterLocationUniform, centerLocationBuffer);
                                                                                                                                  gl.viewport(0, 0, PATH_IMAGE_SIZE, PATH_IMAGE_SIZE);
                                                                                                                                  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
                                                                                                                                  gl.drawArrays(gl.POINTS, 0, pathCount);
                                                                                                                                  gl.readPixels(0, 0, PATH_IMAGE_SIZE, PATH_IMAGE_SIZE, gl.RGBA, gl.UNSIGNED_BYTE, pathTextureRgba);
                                                                                                                                  paths.forEach(setDistance);
                                                                                                                                  gl.bindFramebuffer(gl.FRAMEBUFFER, null)
                                                                                                                                }
                                                                                                                                function setDistance(path, index) {
                                                                                                                                  var index = pathRgbaIndices[index];
                                                                                                                                  var d1 = pathTextureRgba[index]
                                                                                                                                  , d2 = pathTextureRgba[index + 1]
                                                                                                                                  , d = d1 + d2 * 256;
                                                                                                                                  if (d == BAD_READING_SIZE) {
                                                                                                                                    badReadingCount++;
                                                                                                                                    if (badReadingCount > 5000) {
                                                                                                                                      setDistance = function(path, index) {
                                                                                                                                        var d = getPathDistance(path.origin, path.destination);
                                                                                                                                        if (!d) {
                                                                                                                                          path.progressIncrement = 0.03
                                                                                                                                        } else {
                                                                                                                                          path.progressIncrement = TRAVEL_PIXELS / d
                                                                                                                                        }
                                                                                                                                        path.setLength(d)
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    d = getPathDistance(path.origin, path.destination)
                                                                                                                                  }
                                                                                                                                  if (0 === d || isNaN(d)) {
                                                                                                                                    path.progressIncrement = 0.03
                                                                                                                                  } else {
                                                                                                                                    path.progressIncrement = TRAVEL_PIXELS / d
                                                                                                                                  }
                                                                                                                                  if (isNaN(path.progressIncrement)) {
                                                                                                                                    path.progressIncrement = 0.03
                                                                                                                                  }
                                                                                                                                  path.setLength(d)
                                                                                                                                }
                                                                                                                                function getPathDistance(origin, destination) {
                                                                                                                                  return sqrt(pow(destination.x - origin.x, 2) + pow(destination.y - origin.y, 2))
                                                                                                                                }
                                                                                                                                app.pathShader = {
                                                                                                                                  init: init,
                                                                                                                                  shader: null,
                                                                                                                                  setData: setData,
                                                                                                                                  setSize: setSize,
                                                                                                                                  setLengths: setLengths
                                                                                                                                }
                                                                                                                              }
                                                                                                                            )(app);
                                                                                                                            (function(app) {
                                                                                                                              var constants = app.constants, MAX_PARTICLE_COUNT = constants.MAX_FADER_COUNT, gl, gravShader, centers, maxCenterId, W, H, BASE_W, BASE_H, TAU = Math.PI * 2, cos = Math.cos, sin = Math.sin, round = Math.round, hexData, hexColors, hexAlpha, buffIt, vertexPositions, vertexColors, vertexAlpha, vertexIndices, positionAttribLocation, positionBuffer, colorAttribLocation, colorBuffer, alphaAttribLocation, alphaBuffer, hexVertexIndexBuffer, resolutionUniform, matrix, VERTICES_PER_HEXAGON = 8, VERTEX_OFFSET = VERTICES_PER_HEXAGON * 2, VERTEX_ANGLES;
                                                                                                                              function init(igloo, glContext, buffItFnc) {
                                                                                                                                gl = glContext;
                                                                                                                                buffIt = buffItFnc;
                                                                                                                                var vertSrc = $("#gravitron-vs").text();
                                                                                                                                var fragSrc = $("#gravitron-fs").text();
                                                                                                                                gravShader = igloo.program(vertSrc, fragSrc).program;
                                                                                                                                gl.useProgram(gravShader);
                                                                                                                                initGlBuffers();
                                                                                                                                app.gravitronShader.shader = gravShader
                                                                                                                              }
                                                                                                                              function initGlBuffers() {
                                                                                                                                resolutionUniform = gl.getUniformLocation(gravShader, "resolution");
                                                                                                                                matrixUniform = gl.getUniformLocation(gravShader, "matrix");
                                                                                                                                positionAttribLocation = gl.getAttribLocation(gravShader, "grav_position");
                                                                                                                                gl.enableVertexAttribArray(positionAttribLocation);
                                                                                                                                colorAttribLocation = gl.getAttribLocation(gravShader, "grav_color");
                                                                                                                                gl.enableVertexAttribArray(colorAttribLocation);
                                                                                                                                alphaAttribLocation = gl.getAttribLocation(gravShader, "grav_alpha");
                                                                                                                                gl.enableVertexAttribArray(alphaAttribLocation);
                                                                                                                                positionBuffer = gl.createBuffer();
                                                                                                                                colorBuffer = gl.createBuffer();
                                                                                                                                alphaBuffer = gl.createBuffer();
                                                                                                                                hexVertexIndexBuffer = gl.createBuffer()
                                                                                                                              }
                                                                                                                              function setSize(w, h, base_w, base_h) {
                                                                                                                                W = w;
                                                                                                                                H = h;
                                                                                                                                BASE_W = base_w;
                                                                                                                                BASE_H = base_h;
                                                                                                                                if (gravShader) {
                                                                                                                                  gl.useProgram(gravShader);
                                                                                                                                  gl.uniform2f(resolutionUniform, W / 2, H / 2)
                                                                                                                                }
                                                                                                                              }
                                                                                                                              function setData(_centers, _maxCenterId) {
                                                                                                                                centers = _centers;
                                                                                                                                maxCenterId = _maxCenterId;
                                                                                                                                var vertexCount = centers.length * VERTICES_PER_HEXAGON;
                                                                                                                                vertexPositions = new Float32Array(vertexCount * 2);
                                                                                                                                vertexAlpha = new Float32Array(vertexCount);
                                                                                                                                vertexColors = [];
                                                                                                                                vertexIndices = [];
                                                                                                                                var indexCount = 0
                                                                                                                                , posIndex = 0;
                                                                                                                                for (var c = 0; c <= maxCenterId; c++) {
                                                                                                                                  var center = centers[c]
                                                                                                                                  , rgb = center.parent.rgb
                                                                                                                                  , r = rgb[0]
                                                                                                                                  , g = rgb[1]
                                                                                                                                  , b = rgb[2];
                                                                                                                                  for (var i = 0; i < VERTICES_PER_HEXAGON; i++) {
                                                                                                                                    vertexColors.push(r);
                                                                                                                                    vertexColors.push(g);
                                                                                                                                    vertexColors.push(b);
                                                                                                                                    vertexIndices.push(indexCount);
                                                                                                                                    vertexAlpha[indexCount] = 1;
                                                                                                                                    vertexPositions[posIndex++] = W / 2;
                                                                                                                                    vertexPositions[posIndex++] = W / 2;
                                                                                                                                    indexCount++
                                                                                                                                  }
                                                                                                                                }
                                                                                                                                vertexColors = new Float32Array(vertexColors);
                                                                                                                                vertexIndices = new Uint16Array(vertexIndices);
                                                                                                                                VERTEX_ANGLES = [];
                                                                                                                                var a, index = 0;
                                                                                                                                VERTEX_ANGLES[index++] = 0;
                                                                                                                                VERTEX_ANGLES[index++] = 0;
                                                                                                                                for (var i = 0; i < VERTICES_PER_HEXAGON; i++) {
                                                                                                                                  a = i / 6 * TAU;
                                                                                                                                  VERTEX_ANGLES[index++] = round(cos(a) * 1000000) / 1000000;
                                                                                                                                  VERTEX_ANGLES[index++] = round(sin(a) * 1000000) / 1000000
                                                                                                                                }
                                                                                                                                gl.useProgram(gravShader);
                                                                                                                                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, hexVertexIndexBuffer);
                                                                                                                                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, vertexIndices, gl.STATIC_DRAW)
                                                                                                                              }
                                                                                                                              function setNodeBufferValues(center) {
                                                                                                                                var index = center.id * VERTICES_PER_HEXAGON
                                                                                                                                , a = center.sparkleAlpha || 0
                                                                                                                                , x = center.x
                                                                                                                                , y = center.y
                                                                                                                                , s = center.size.get()
                                                                                                                                , alfIndex = index
                                                                                                                                , posIndex = index * 2;
                                                                                                                                vertexAlpha[alfIndex++] = a;
                                                                                                                                vertexPositions[posIndex++] = x;
                                                                                                                                vertexPositions[posIndex++] = y;
                                                                                                                                for (var i = 1; i < VERTICES_PER_HEXAGON; i++) {
                                                                                                                                  vertexAlpha[alfIndex++] = a;
                                                                                                                                  vertexPositions[posIndex++] = x + VERTEX_ANGLES[i * 2] * s;
                                                                                                                                  vertexPositions[posIndex++] = y + VERTEX_ANGLES[i * 2 + 1] * s
                                                                                                                                }
                                                                                                                              }
                                                                                                                              function drawNodes(mat3, zoom) {
                                                                                                                                gl.useProgram(gravShader);
                                                                                                                                centers.forEach(setNodeBufferValues);
                                                                                                                                gl.uniformMatrix3fv(matrixUniform, false, mat3);
                                                                                                                                buffIt(positionBuffer, positionAttribLocation, vertexPositions, 2);
                                                                                                                                buffIt(colorBuffer, colorAttribLocation, vertexColors, 3);
                                                                                                                                buffIt(alphaBuffer, alphaAttribLocation, vertexAlpha, 1);
                                                                                                                                for (var i = 0, L = centers.length; i < L; i++) {
                                                                                                                                  gl.drawElements(gl.TRIANGLE_FAN, VERTICES_PER_HEXAGON, gl.UNSIGNED_SHORT, i * VERTEX_OFFSET)
                                                                                                                                }
                                                                                                                                firstFrame = false
                                                                                                                              }
                                                                                                                              app.gravitronShader = {
                                                                                                                                init: init,
                                                                                                                                shader: null,
                                                                                                                                setSize: setSize,
                                                                                                                                setData: setData,
                                                                                                                                drawNodes: drawNodes
                                                                                                                              }
                                                                                                                            }
                                                                                                                          )(app);
                                                                                                                          (function(app) {
                                                                                                                            var constants = app.constants, MAX_PARTICLE_COUNT = constants.MAX_LERPER_COUNT, BEZIER = constants.PATH_TYPES.BEZIER, gl, shader = false, pow = Math.pow, TAU = Math.PI * 2, abs = Math.abs, lerpParticles, lerpCount, hexture, gradients, updatingParticles = true, offsets, pathInfo, particleInfo, offsetAttribute, pathInfoAttribute, particleInfoAttribute, offsetBuffer, pathInfoBuffer, particleInfoBuffer, centerLocationUniform, centerLocationBuffer, centerGroupUniform, centerGroupBuffer, resolutionLocation, scaleUniform, matrixUniform, buffIt, particle, frameParticleCount, controlPoints, controlPointsAttribute, controlPointsBuffer;
                                                                                                                            function init(igloo, glContext, buffItFnc, createAndSetupTexture, hextureImage, gradientImage) {
                                                                                                                              gl = glContext;
                                                                                                                              buffIt = buffItFnc;
                                                                                                                              var vertSrc = $("#lerpers-vs").text();
                                                                                                                              var fragSrc = $("#particle-fs").text();
                                                                                                                              shader = igloo.program(vertSrc, fragSrc).program;
                                                                                                                              gl.useProgram(shader);
                                                                                                                              resolutionLocation = gl.getUniformLocation(shader, "resolution");
                                                                                                                              centerLocationUniform = gl.getUniformLocation(shader, "centerLocation");
                                                                                                                              centerGroupUniform = gl.getUniformLocation(shader, "centerGroup");
                                                                                                                              centerGroupBuffer = new Float32Array(62);
                                                                                                                              scaleUniform = gl.getUniformLocation(shader, "scale");
                                                                                                                              matrixUniform = gl.getUniformLocation(shader, "matrix");
                                                                                                                              initGlBuffers();
                                                                                                                              setTextures(hextureImage, gradientImage, createAndSetupTexture);
                                                                                                                              app.lerperShader.shader = shader
                                                                                                                            }
                                                                                                                            function initGlBuffers() {
                                                                                                                              offsets = new Float32Array(2 * MAX_PARTICLE_COUNT);
                                                                                                                              pathInfo = new Float32Array(MAX_PARTICLE_COUNT * 4);
                                                                                                                              particleInfo = new Float32Array(MAX_PARTICLE_COUNT * 4);
                                                                                                                              controlPoints = new Float32Array(MAX_PARTICLE_COUNT * 4);
                                                                                                                              offsetAttribute = gl.getAttribLocation(shader, "offset");
                                                                                                                              pathInfoAttribute = gl.getAttribLocation(shader, "pathInfo");
                                                                                                                              particleInfoAttribute = gl.getAttribLocation(shader, "particleInfo");
                                                                                                                              controlPointsAttribute = gl.getAttribLocation(shader, "controlPoints");
                                                                                                                              gl.enableVertexAttribArray(offsetAttribute);
                                                                                                                              gl.enableVertexAttribArray(pathInfoAttribute);
                                                                                                                              gl.enableVertexAttribArray(particleInfoAttribute);
                                                                                                                              gl.enableVertexAttribArray(controlPointsAttribute);
                                                                                                                              offsetBuffer = gl.createBuffer();
                                                                                                                              pathInfoBuffer = gl.createBuffer();
                                                                                                                              particleInfoBuffer = gl.createBuffer();
                                                                                                                              controlPointsBuffer = gl.createBuffer();
                                                                                                                              gl.useProgram(shader);
                                                                                                                              buffIt(offsetBuffer, offsetAttribute, offsets, 2);
                                                                                                                              buffIt(pathInfoBuffer, pathInfoAttribute, pathInfo, 4);
                                                                                                                              buffIt(particleInfoBuffer, particleInfoAttribute, particleInfo, 4);
                                                                                                                              buffIt(controlPointsBuffer, controlPointsAttribute, controlPoints, 4)
                                                                                                                            }
                                                                                                                            function setTextures(hexImage, gradientImage, createAndSetupTexture) {
                                                                                                                              gl.useProgram(shader);
                                                                                                                              var hextureHandle = gl.getUniformLocation(shader, "hexture");
                                                                                                                              gradients = createAndSetupTexture(gl, gl.NEAREST, gl.NEAREST);
                                                                                                                              gl.bindTexture(gl.TEXTURE_2D, gradients);
                                                                                                                              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, gradientImage);
                                                                                                                              hexture = createAndSetupTexture(gl, gl.LINEAR, gl.LINEAR);
                                                                                                                              gl.bindTexture(gl.TEXTURE_2D, hexture);
                                                                                                                              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, hexImage);
                                                                                                                              gl.uniform1i(hextureHandle, 1);
                                                                                                                              gl.bindTexture(gl.TEXTURE_2D, gradients);
                                                                                                                              gl.activeTexture(gl.TEXTURE1);
                                                                                                                              gl.bindTexture(gl.TEXTURE_2D, hexture);
                                                                                                                              gl.activeTexture(gl.TEXTURE1);
                                                                                                                              gl.bindTexture(gl.TEXTURE_2D, hexture)
                                                                                                                            }
                                                                                                                            function setSize(W, H, BW, BH) {
                                                                                                                              BASE_W = BW;
                                                                                                                              BASE_H = BH;
                                                                                                                              if (shader) {
                                                                                                                                gl.useProgram(shader);
                                                                                                                                gl.uniform2f(resolutionLocation, W, H)
                                                                                                                              }
                                                                                                                            }
                                                                                                                            function setData(particles, centers) {
                                                                                                                              lerpParticles = particles;
                                                                                                                              lerpCount = lerpParticles.length;
                                                                                                                              centerGroupBuffer = [];
                                                                                                                              var c;
                                                                                                                              for (var i = 0, L = centers.length; i < L; i++) {
                                                                                                                                c = centers[i];
                                                                                                                                centerGroupBuffer[c.id] = c.colorGroupId
                                                                                                                              }
                                                                                                                              centerGroupBuffer = new Float32Array(centerGroupBuffer)
                                                                                                                            }
                                                                                                                            function drawParticles(mat3, zoom, centerLocationBuffer) {
                                                                                                                              var particle, path, controlData;
                                                                                                                              frameParticleCount = 0;
                                                                                                                              for (var i = 0; i < lerpCount; i++) {
                                                                                                                                particle = lerpParticles[i];
                                                                                                                                if (particle.complete || !particle.path) {} else {
                                                                                                                                  if (updatingParticles) {
                                                                                                                                    particle.update()
                                                                                                                                  }
                                                                                                                                  path = particle.path;
                                                                                                                                  offsets[frameParticleCount * 2] = particle.offset[0];
                                                                                                                                  offsets[frameParticleCount * 2 + 1] = particle.offset[1];
                                                                                                                                  pathInfo[frameParticleCount * 4] = particle.originId;
                                                                                                                                  pathInfo[frameParticleCount * 4 + 1] = particle.destinationId;
                                                                                                                                  pathInfo[frameParticleCount * 4 + 2] = path.pathType;
                                                                                                                                  pathInfo[frameParticleCount * 4 + 3] = path.clockwise;
                                                                                                                                  particleInfo[frameParticleCount * 4] = particle.progress || 0;
                                                                                                                                  particleInfo[frameParticleCount * 4 + 1] = particle.origin.defaultAlpha;
                                                                                                                                  particleInfo[frameParticleCount * 4 + 2] = path.scatter;
                                                                                                                                  particleInfo[frameParticleCount * 4 + 3] = particle.weight || 0.5;
                                                                                                                                  if (path.pathType == BEZIER) {
                                                                                                                                    controlData = path.controlData;
                                                                                                                                    controlPoints[frameParticleCount * 4] = controlData[0];
                                                                                                                                    controlPoints[frameParticleCount * 4 + 1] = controlData[1];
                                                                                                                                    controlPoints[frameParticleCount * 4 + 2] = controlData[2];
                                                                                                                                    controlPoints[frameParticleCount * 4 + 3] = controlData[3]
                                                                                                                                  }
                                                                                                                                  frameParticleCount++
                                                                                                                                }
                                                                                                                              }
                                                                                                                              gl.useProgram(shader);
                                                                                                                              gl.uniform1f(scaleUniform, zoom.get());
                                                                                                                              gl.uniformMatrix3fv(matrixUniform, false, mat3);
                                                                                                                              gl.uniform4fv(centerLocationUniform, centerLocationBuffer);
                                                                                                                              gl.uniform1fv(centerGroupUniform, centerGroupBuffer);
                                                                                                                              gl.uniform1fv;
                                                                                                                              buffIt(offsetBuffer, offsetAttribute, offsets, 2);
                                                                                                                              buffIt(pathInfoBuffer, pathInfoAttribute, pathInfo, 4);
                                                                                                                              buffIt(particleInfoBuffer, particleInfoAttribute, particleInfo, 4);
                                                                                                                              buffIt(controlPointsBuffer, controlPointsAttribute, controlPoints, 4);
                                                                                                                              gl.drawArrays(gl.POINTS, 0, frameParticleCount)
                                                                                                                            }
                                                                                                                            function setUpdating(u) {
                                                                                                                              updatingParticles = u
                                                                                                                            }
                                                                                                                            app.lerperShader = {
                                                                                                                              init: init,
                                                                                                                              shader: null,
                                                                                                                              setSize: setSize,
                                                                                                                              setData: setData,
                                                                                                                              drawParticles: drawParticles,
                                                                                                                              setUpdating: setUpdating
                                                                                                                            }
                                                                                                                          }
                                                                                                                        )(app);
                                                                                                                        (function(app) {
                                                                                                                          var constants = app.constants, MAX_PARTICLE_COUNT = constants.MAX_FADER_COUNT, gl, shader, centers, maxCenterId, pow = Math.pow, TAU = Math.PI * 2, abs = Math.abs, particles, particleCount, hexture, gradients, updatingParticles = true, offset, originIndex, progress, direction, velocity, weight, alpha, offsetAttribute, originIndexAttribute, progressAttribute, directionAttribute, velocityAttribute, weightAttribute, alphaAttribute, offsetBuffer, originIndexBuffer, progressBuffer, directionBuffer, velocityBuffer, weightBuffer, alphaBuffer, centerLocationUniform, centerGroupUniform, centerGroupBuffer, resolutionLocation, scaleUniform, matrixUniform, buffIt, particle, frameParticleCount;
                                                                                                                          function init(igloo, glContext, buffItFnc, createAndSetupTexture, hextureImage, gradientImage) {
                                                                                                                            gl = glContext;
                                                                                                                            buffIt = buffItFnc;
                                                                                                                            shader = igloo.program("glsl/faders.vert", "glsl/particle.frag").program;
                                                                                                                            gl.useProgram(shader);
                                                                                                                            initGlBuffers();
                                                                                                                            setTextures(hextureImage, gradientImage, createAndSetupTexture);
                                                                                                                            app.faderShader.shader = shader
                                                                                                                          }
                                                                                                                          function initGlBuffers() {
                                                                                                                            resolutionLocation = gl.getUniformLocation(shader, "resolution");
                                                                                                                            centerLocationUniform = gl.getUniformLocation(shader, "centerLocation");
                                                                                                                            centerGroupUniform = gl.getUniformLocation(shader, "centerGroup");
                                                                                                                            centerGroupBuffer = new Float32Array(62);
                                                                                                                            scaleUniform = gl.getUniformLocation(shader, "scale");
                                                                                                                            matrixUniform = gl.getUniformLocation(shader, "matrix");
                                                                                                                            var maxStepLocation = gl.getUniformLocation(shader, "MAX_STEP");
                                                                                                                            gl.uniform1f(maxStepLocation, app.Fader.FADE_STEP_COUNT);
                                                                                                                            offset = new Float32Array(2 * MAX_PARTICLE_COUNT);
                                                                                                                            originIndex = new Float32Array(MAX_PARTICLE_COUNT);
                                                                                                                            progress = new Float32Array(MAX_PARTICLE_COUNT);
                                                                                                                            direction = new Float32Array(MAX_PARTICLE_COUNT);
                                                                                                                            velocity = new Float32Array(MAX_PARTICLE_COUNT);
                                                                                                                            weight = new Float32Array(MAX_PARTICLE_COUNT);
                                                                                                                            alpha = new Float32Array(MAX_PARTICLE_COUNT);
                                                                                                                            offsetAttribute = gl.getAttribLocation(shader, "offset");
                                                                                                                            originIndexAttribute = gl.getAttribLocation(shader, "origin_index");
                                                                                                                            progressAttribute = gl.getAttribLocation(shader, "progress");
                                                                                                                            directionAttribute = gl.getAttribLocation(shader, "variantDirection");
                                                                                                                            velocityAttribute = gl.getAttribLocation(shader, "variantVelocity");
                                                                                                                            weightAttribute = gl.getAttribLocation(shader, "weight");
                                                                                                                            alphaAttribute = gl.getAttribLocation(shader, "alpha");
                                                                                                                            gl.enableVertexAttribArray(offsetAttribute);
                                                                                                                            gl.enableVertexAttribArray(originIndexAttribute);
                                                                                                                            gl.enableVertexAttribArray(progressAttribute);
                                                                                                                            gl.enableVertexAttribArray(directionAttribute);
                                                                                                                            gl.enableVertexAttribArray(velocityAttribute);
                                                                                                                            gl.enableVertexAttribArray(weightAttribute);
                                                                                                                            gl.enableVertexAttribArray(alphaAttribute);
                                                                                                                            offsetBuffer = gl.createBuffer();
                                                                                                                            originIndexBuffer = gl.createBuffer();
                                                                                                                            progressBuffer = gl.createBuffer();
                                                                                                                            directionBuffer = gl.createBuffer();
                                                                                                                            velocityBuffer = gl.createBuffer();
                                                                                                                            weightBuffer = gl.createBuffer();
                                                                                                                            alphaBuffer = gl.createBuffer();
                                                                                                                            buffIt(offsetBuffer, offsetAttribute, offset, 2);
                                                                                                                            buffIt(originIndexBuffer, originIndexAttribute, originIndex, 1);
                                                                                                                            buffIt(progressBuffer, progressAttribute, progress, 1);
                                                                                                                            buffIt(directionBuffer, directionAttribute, direction, 1);
                                                                                                                            buffIt(velocityBuffer, velocityAttribute, velocity, 1);
                                                                                                                            buffIt(weightBuffer, weightAttribute, weight, 1);
                                                                                                                            buffIt(alphaBuffer, alphaAttribute, alpha, 1)
                                                                                                                          }
                                                                                                                          function setTextures(hexImage, gradientImage, createAndSetupTexture) {
                                                                                                                            gl.useProgram(shader);
                                                                                                                            var hextureHandle = gl.getUniformLocation(shader, "hexture");
                                                                                                                            gradients = createAndSetupTexture(gl, gl.NEAREST, gl.NEAREST);
                                                                                                                            gl.bindTexture(gl.TEXTURE_2D, gradients);
                                                                                                                            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, gradientImage);
                                                                                                                            hexture = createAndSetupTexture(gl, gl.LINEAR, gl.LINEAR);
                                                                                                                            gl.bindTexture(gl.TEXTURE_2D, hexture);
                                                                                                                            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, hexImage);
                                                                                                                            gl.uniform1i(hextureHandle, 1);
                                                                                                                            gl.bindTexture(gl.TEXTURE_2D, gradients);
                                                                                                                            gl.activeTexture(gl.TEXTURE1);
                                                                                                                            gl.bindTexture(gl.TEXTURE_2D, hexture);
                                                                                                                            gl.activeTexture(gl.TEXTURE1);
                                                                                                                            gl.bindTexture(gl.TEXTURE_2D, hexture)
                                                                                                                          }
                                                                                                                          function setSize(W, H, BW, BH) {
                                                                                                                            BASE_W = BW;
                                                                                                                            BASE_H = BH;
                                                                                                                            if (shader) {
                                                                                                                              gl.useProgram(shader);
                                                                                                                              gl.uniform2f(resolutionLocation, W, H)
                                                                                                                            }
                                                                                                                          }
                                                                                                                          function setData(parts, centers, maxCenterId) {
                                                                                                                            particles = parts;
                                                                                                                            particleCount = particles.length;
                                                                                                                            centerGroupBuffer = [];
                                                                                                                            var c;
                                                                                                                            for (var i = 0, L = centers.length; i < L; i++) {
                                                                                                                              c = centers[i];
                                                                                                                              centerGroupBuffer[c.id] = c.colorGroupId
                                                                                                                            }
                                                                                                                            centerGroupBuffer = new Float32Array(centerGroupBuffer)
                                                                                                                          }
                                                                                                                          function drawParticles(mat3, zoom, centerLocationBuffer, centers) {
                                                                                                                            frameParticleCount = 0;
                                                                                                                            var w;
                                                                                                                            for (var i = 0; i < particleCount; i++) {
                                                                                                                              particle = particles[i];
                                                                                                                              if (particle.complete) {} else {
                                                                                                                                if (updatingParticles) {
                                                                                                                                  particle.update()
                                                                                                                                }
                                                                                                                                w = particle.origin.density;
                                                                                                                                if (w < 1) {
                                                                                                                                  w = particle.weight
                                                                                                                                } else {
                                                                                                                                  w = particle.weight / w
                                                                                                                                }
                                                                                                                                offset[frameParticleCount * 2] = particle.offset[0];
                                                                                                                                offset[frameParticleCount * 2 + 1] = particle.offset[1];
                                                                                                                                originIndex[frameParticleCount] = particle.originId;
                                                                                                                                progress[frameParticleCount] = particle.step || 0;
                                                                                                                                direction[frameParticleCount] = particle.direction || 0;
                                                                                                                                velocity[frameParticleCount] = particle.velocity;
                                                                                                                                weight[frameParticleCount] = w * 2;
                                                                                                                                alpha[frameParticleCount] = particle.origin.defaultAlpha;
                                                                                                                                frameParticleCount++
                                                                                                                              }
                                                                                                                            }
                                                                                                                            gl.useProgram(shader);
                                                                                                                            gl.uniform1f(scaleUniform, zoom.value);
                                                                                                                            gl.uniformMatrix3fv(matrixUniform, false, mat3);
                                                                                                                            gl.uniform4fv(centerLocationUniform, centerLocationBuffer);
                                                                                                                            gl.uniform1fv(centerGroupUniform, centerGroupBuffer);
                                                                                                                            buffIt(offsetBuffer, offsetAttribute, offset, 2);
                                                                                                                            buffIt(originIndexBuffer, originIndexAttribute, originIndex, 1);
                                                                                                                            buffIt(progressBuffer, progressAttribute, progress, 1);
                                                                                                                            buffIt(directionBuffer, directionAttribute, direction, 1);
                                                                                                                            buffIt(velocityBuffer, velocityAttribute, velocity, 1);
                                                                                                                            buffIt(weightBuffer, weightAttribute, weight, 1);
                                                                                                                            buffIt(alphaBuffer, alphaAttribute, alpha, 1);
                                                                                                                            gl.drawArrays(gl.POINTS, 0, frameParticleCount)
                                                                                                                          }
                                                                                                                          function setUpdating(u) {
                                                                                                                            updatingParticles = u
                                                                                                                          }
                                                                                                                          app.faderShader = {
                                                                                                                            init: init,
                                                                                                                            shader: null,
                                                                                                                            setSize: setSize,
                                                                                                                            setData: setData,
                                                                                                                            drawParticles: drawParticles,
                                                                                                                            setUpdating: setUpdating
                                                                                                                          }
                                                                                                                        }
                                                                                                                      )(app);
                                                                                                                      "use strict";
                                                                                                                      (function(app) {
                                                                                                                        var constants = app.constants, PAUSE = constants.PAUSE, PLAY = constants.PLAY, DRAGGING = constants.DRAGGING, glCanvas, gl, igloo, pathShader, gravitronShader, lerperShader, centers, maxCenterId, W, H, cx, cy, tx, ty, tzoom, baseCx, baseCy, pow = Math.pow, TAU = Math.PI * 2, abs = Math.abs, BASE_ZOOM = 1, BASE_W, BASE_H, lerpParticles, frameParticleCount, hexture, gradients, textureCount = 0, mat3 = [1, 0, 0, 0, 1, 0, 0, 0, 1], zoom, panX, panY, updatingParticles = true, gradientImage, hexImage, centerLocationBuffer = false, faderResolutionLocation, drawingParticles = false, TRAVEL_PIXELS = constants.TRAVEL_PIXELS, browserIsCompatible = false, WIMPY_WEBGL_MESSAGE = "Even though your browser suppports WebGL, it doesn't have what it takes to support this app.", shadersLoaded = false, centersLoaded = false, particlesLoaded = false;
                                                                                                                        function setSize(sizes) {
                                                                                                                          W = sizes.width;
                                                                                                                          H = sizes.height;
                                                                                                                          cx = W * 0.5;
                                                                                                                          cy = H * 0.5;
                                                                                                                          baseCx = cx;
                                                                                                                          baseCy = cy;
                                                                                                                          if (window.devicePixelRatio > 1) {
                                                                                                                            BASE_ZOOM = window.devicePixelRatio;
                                                                                                                            BASE_W = W * BASE_ZOOM;
                                                                                                                            BASE_H = H * BASE_ZOOM;
                                                                                                                            baseCx = cx * BASE_ZOOM;
                                                                                                                            baseCy = cy * BASE_ZOOM
                                                                                                                          } else {
                                                                                                                            BASE_W = W;
                                                                                                                            BASE_H = H
                                                                                                                          }
                                                                                                                          glCanvas.width = BASE_W;
                                                                                                                          glCanvas.height = BASE_H;
                                                                                                                          if (shadersLoaded) {
                                                                                                                            pathShader.setSize(W, H, BASE_W, BASE_H);
                                                                                                                            gravitronShader.setSize(W, H, BASE_W, BASE_H);
                                                                                                                            lerperShader.setSize(W, H, BASE_W, BASE_H)
                                                                                                                          }
                                                                                                                        }
                                                                                                                        function setCanvas() {
                                                                                                                          glCanvas = $("#particles")[0];
                                                                                                                          try {
                                                                                                                            igloo = new Igloo(glCanvas,{
                                                                                                                              premultipliedAlpha: false
                                                                                                                            })
                                                                                                                          } catch (err) {
                                                                                                                            if (!window.WebGLRenderingContext) {
                                                                                                                              announceDeferred(constants.GL_STATUS_EVENT, {
                                                                                                                                status: constants.GL_UNSUPPORTED,
                                                                                                                                message: "Browser does not support WebGL."
                                                                                                                              })
                                                                                                                            } else {
                                                                                                                              announceDeferred(constants.GL_STATUS_EVENT, {
                                                                                                                                status: constants.GL_WIMPY,
                                                                                                                                message: WIMPY_WEBGL_MESSAGE
                                                                                                                              })
                                                                                                                            }
                                                                                                                            return
                                                                                                                          }
                                                                                                                          gl = igloo.gl;
                                                                                                                          gl.clearColor(1, 1, 1, 1);
                                                                                                                          try {
                                                                                                                            gl.disable(gl.DEPTH_TEST);
                                                                                                                            gl.enable(gl.BLEND);
                                                                                                                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                                                                                                                            gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE)
                                                                                                                          } catch (err) {
                                                                                                                            console.log("error on blend mode");
                                                                                                                            console.log(err)
                                                                                                                          }
                                                                                                                          initTextures();
                                                                                                                          if (checkFramebufferStatus()) {
                                                                                                                            browserIsCompatible = true
                                                                                                                          } else {
                                                                                                                            announceDeferred(constants.GL_STATUS_EVENT, {
                                                                                                                              status: constants.GL_WIMPY,
                                                                                                                              message: WIMPY_WEBGL_MESSAGE
                                                                                                                            })
                                                                                                                          }
                                                                                                                        }
                                                                                                                        function checkFramebufferStatus() {
                                                                                                                          var fboStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
                                                                                                                          switch (fboStatus) {
                                                                                                                            case gl.FRAMEBUFFER_COMPLETE:
                                                                                                                            return true;
                                                                                                                            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                                                                                                                            console.log("gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT: the attachment types are mismatched.");
                                                                                                                            break;
                                                                                                                            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                                                                                                                            console.log("gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: there is no attachment.");
                                                                                                                            break;
                                                                                                                            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                                                                                                                            console.log("gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS: the height and width of the attachments are not the same.");
                                                                                                                            break;
                                                                                                                            case gl.FRAMEBUFFER_UNSUPPORTED:
                                                                                                                            console.log("gl.FRAMEBUFFER_UNSUPPORTED: it is what it is.");
                                                                                                                            break
                                                                                                                          }
                                                                                                                          return false
                                                                                                                        }
                                                                                                                        function initTextures() {
                                                                                                                          hexImage = new Image();
                                                                                                                          hexImage.onload = function() {
                                                                                                                            handleTextureLoaded(hexImage, hexture)
                                                                                                                          }
                                                                                                                          ;
                                                                                                                          hexImage.src = "data/hex.png";
                                                                                                                          gradientImage = new Image();
                                                                                                                          gradientImage.onload = function() {
                                                                                                                            handleTextureLoaded(gradientImage, gradients)
                                                                                                                          }
                                                                                                                          ;
                                                                                                                          gradientImage.src = "data/gradients.png"
                                                                                                                        }
                                                                                                                        function handleTextureLoaded(image, texture, program) {
                                                                                                                          textureCount++;
                                                                                                                          if (textureCount >= 2) {
                                                                                                                            pathShader = app.pathShader;
                                                                                                                            pathShader.init(igloo, gl, buffIt, createAndSetupTexture, gradientImage);
                                                                                                                            if (checkFramebufferStatus()) {
                                                                                                                              browserIsCompatible = true
                                                                                                                            } else {
                                                                                                                              announceDeferred(constants.GL_STATUS_EVENT, {
                                                                                                                                status: constants.GL_WIMPY,
                                                                                                                                message: WIMPY_WEBGL_MESSAGE
                                                                                                                              })
                                                                                                                            }
                                                                                                                            pathShader.setSize(W, H, BASE_W, BASE_H);
                                                                                                                            gravitronShader = app.gravitronShader;
                                                                                                                            gravitronShader.init(igloo, gl, buffIt);
                                                                                                                            gravitronShader.setSize(W, H, BASE_W, BASE_H);
                                                                                                                            lerperShader = app.lerperShader;
                                                                                                                            lerperShader.init(igloo, gl, buffIt, createAndSetupTexture, hexImage, gradientImage);
                                                                                                                            lerperShader.setSize(W, H, BASE_W, BASE_H);
                                                                                                                            shadersLoaded = true;
                                                                                                                            announceReady()
                                                                                                                          }
                                                                                                                        }
                                                                                                                        function announceReady() {
                                                                                                                          if (shadersLoaded && centersLoaded) {
                                                                                                                            if (!centerLocationBuffer) {
                                                                                                                              centerLocationBuffer = new Float32Array((maxCenterId + 1) * 4);
                                                                                                                              gravitronShader.setData(centers, maxCenterId)
                                                                                                                            }
                                                                                                                            if (particlesLoaded) {
                                                                                                                              pathShader.setData(centers, maxCenterId);
                                                                                                                              lerperShader.setData(lerpParticles, centers)
                                                                                                                            }
                                                                                                                            particleGL.announce(constants.GL_STATUS_EVENT, {
                                                                                                                              status: constants.READY,
                                                                                                                              drawFunction: drawParticles,
                                                                                                                              pathUpdateFunction: setPathLengths,
                                                                                                                              loadStatus: constants.CENTERS_LOADED
                                                                                                                            })
                                                                                                                          }
                                                                                                                        }
                                                                                                                        function setPathLengths() {
                                                                                                                          var center, index;
                                                                                                                          for (var i = 0; i <= maxCenterId; i++) {
                                                                                                                            center = centers[i];
                                                                                                                            index = center.id * 4;
                                                                                                                            centerLocationBuffer[index] = center.x;
                                                                                                                            centerLocationBuffer[index + 1] = center.y;
                                                                                                                            centerLocationBuffer[index + 2] = center.groupAngle;
                                                                                                                            centerLocationBuffer[index + 3] = center.distance
                                                                                                                          }
                                                                                                                          pathShader.setLengths(centerLocationBuffer)
                                                                                                                        }
                                                                                                                        function drawParticles() {
                                                                                                                          tzoom = zoom.get() / BASE_ZOOM;
                                                                                                                          mat3[0] = tzoom;
                                                                                                                          mat3[4] = tzoom;
                                                                                                                          mat3[6] = panX.get() / W * 2 / BASE_ZOOM;
                                                                                                                          mat3[7] = -panY.get() / H * 2 / BASE_ZOOM;
                                                                                                                          gl.useProgram(gravitronShader.shader);
                                                                                                                          gl.viewport(0, 0, BASE_W, BASE_H);
                                                                                                                          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
                                                                                                                          gravitronShader.drawNodes(mat3, zoom);
                                                                                                                          lerperShader.drawParticles(mat3, zoom, centerLocationBuffer)
                                                                                                                        }
                                                                                                                        function buffIt(buffer, attribute, src, size) {
                                                                                                                          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                                                                                                                          gl.vertexAttribPointer(attribute, size, gl.FLOAT, false, 0, 0);
                                                                                                                          gl.bufferData(gl.ARRAY_BUFFER, src, gl.DYNAMIC_DRAW)
                                                                                                                        }
                                                                                                                        function setData(data) {
                                                                                                                          centers = data.centers;
                                                                                                                          maxCenterId = -1;
                                                                                                                          for (var i = centers.length - 1; i >= 0; i--) {
                                                                                                                            if (centers[i].id > maxCenterId) {
                                                                                                                              maxCenterId = centers[i].id
                                                                                                                            }
                                                                                                                          }
                                                                                                                          centersLoaded = true;
                                                                                                                          announceReady()
                                                                                                                        }
                                                                                                                        function setParticleData(data) {
                                                                                                                          lerpParticles = data.lerpers;
                                                                                                                          particlesLoaded = true;
                                                                                                                          announceReady()
                                                                                                                        }
                                                                                                                        function setUpdater(params) {
                                                                                                                          if (browserIsCompatible) {
                                                                                                                            drawingParticles = !!params.drawParticles
                                                                                                                          }
                                                                                                                        }
                                                                                                                        function createAndSetupTexture(gl, TEXTURE_MIN_FILTER, TEXTURE_MAG_FILTER) {
                                                                                                                          var texture = gl.createTexture();
                                                                                                                          gl.bindTexture(gl.TEXTURE_2D, texture);
                                                                                                                          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                                                                                                                          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                                                                                                                          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, TEXTURE_MIN_FILTER);
                                                                                                                          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, TEXTURE_MAG_FILTER);
                                                                                                                          return texture
                                                                                                                        }
                                                                                                                        function announceDeferred(event, params) {
                                                                                                                          setTimeout(function() {
                                                                                                                            particleGL.announce(event, params)
                                                                                                                          }, 300)
                                                                                                                        }
                                                                                                                        function setZoomerPanner(data) {
                                                                                                                          zoom = data.zoom;
                                                                                                                          panX = data.panX;
                                                                                                                          panY = data.panY
                                                                                                                        }
                                                                                                                        function setPlayback(action) {
                                                                                                                          if (action == PAUSE) {
                                                                                                                            updatingParticles = false;
                                                                                                                            app.lerperShader.setUpdating(false)
                                                                                                                          } else {
                                                                                                                            if (action == PLAY) {
                                                                                                                              updatingParticles = true;
                                                                                                                              app.lerperShader.setUpdating(true)
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                        var particleGL = {
                                                                                                                          setCanvas: setCanvas,
                                                                                                                          setData: setData,
                                                                                                                          setSize: setSize,
                                                                                                                          setUpdater: setUpdater,
                                                                                                                          setZoomerPanner: setZoomerPanner,
                                                                                                                          setPlayback: setPlayback,
                                                                                                                          setParticleData: setParticleData
                                                                                                                        };
                                                                                                                        setCanvas();
                                                                                                                        F.eventify(particleGL);
                                                                                                                        app.particleGL = particleGL
                                                                                                                      }
                                                                                                                    )(window.app);
                                                                                                                    "use strict";
                                                                                                                    (function(app) {
                                                                                                                      var constants = app.constants, SoftFloat = F.SoftFloat, cos = Math.cos, sin = Math.sin, round = Math.round, HALF_PI = Math.PI * 0.5, QTR_PI = Math.PI * 0.25, TAU = Math.PI * 2, LIGHT = 0.3, DARK = 0.9, NODE_SIZE = constants.INTRO_NODE_SIZE, HIGHLIGHT_ALPHA_MOD = 8, stepTime, HOVER = constants.HOVER, CLEAR = constants.CLEAR, GROUP = constants.GROUP, SELECT_EVENT = constants.SELECT_EVENT, RING_MARGIN_MIN = constants.RING_MARGIN_MIN, RING_MARGIN_COEFFICIENT = constants.RING_MARGIN_COEFFICIENT, FADE_WAIT = 500, READ_WAIT = 1500, shadersLoaded = false, dataLoaded = false, domReady = false, centerRadius = new F.SoftFloat(0.001), $progressBar = $("#overview-progress"), launched = false;
                                                                                                                      var step = 0, groups, driver, ring, latestGroup = 0, complete = false, items = [], waitEndTime;
                                                                                                                      function IntroItem(group, angle) {
                                                                                                                        this.group = group;
                                                                                                                        this.label = group.name;
                                                                                                                        this.cosA = cos(angle);
                                                                                                                        this.sinA = sin(angle);
                                                                                                                        this.x = group.x;
                                                                                                                        this.y = group.y;
                                                                                                                        this.$label = $("#intro-" + group.name.toLowerCase())
                                                                                                                      }
                                                                                                                      IntroItem.prototype.updatePosition = function(r) {
                                                                                                                        this.x = this.group.x + this.cosA * r;
                                                                                                                        this.y = this.group.y + this.sinA * r
                                                                                                                      }
                                                                                                                      ;
                                                                                                                      IntroItem.prototype.highlight = function() {
                                                                                                                        var centers = this.group.centers, grav;
                                                                                                                        for (var i = 0, L = centers.length; i < L; i++) {
                                                                                                                          grav = centers[i];
                                                                                                                          grav.size.setTarget(NODE_SIZE);
                                                                                                                          grav.layoutSize.setTarget(NODE_SIZE);
                                                                                                                          grav.alpha.setTarget(1)
                                                                                                                        }
                                                                                                                        this.$label.removeClass("hidden");
                                                                                                                        this.$label.addClass("primary")
                                                                                                                      }
                                                                                                                      ;
                                                                                                                      IntroItem.prototype.pushBack = function() {
                                                                                                                        this.$label.removeClass("primary");
                                                                                                                        var centers = this.group.centers, grav;
                                                                                                                        for (var i = 0, L = centers.length; i < L; i++) {
                                                                                                                          grav = centers[i];
                                                                                                                          grav.alpha.setTarget(0.2)
                                                                                                                        }
                                                                                                                      }
                                                                                                                      ;
                                                                                                                      IntroItem.prototype.drawLabel = function() {
                                                                                                                        this.$label.css("left", this.x);
                                                                                                                        this.$label.css("top", this.y)
                                                                                                                      }
                                                                                                                      ;
                                                                                                                      function launch() {
                                                                                                                        if (shadersLoaded && dataLoaded && domReady && !launched) {
                                                                                                                          launched = true;
                                                                                                                          intro.announce(constants.LEGEND_SPEED_EVENT, {
                                                                                                                            attraction: 0.2,
                                                                                                                            damping: 0.15
                                                                                                                          });
                                                                                                                          intro.announce(constants.LOOPER_CONTROL_EVENT, {
                                                                                                                            updater: update,
                                                                                                                            extraDrawer: drawLabels,
                                                                                                                            nodeFunction: updateGroups
                                                                                                                          });
                                                                                                                          centerRadius.setTarget(constants.INTRO_RING_MARGIN_MIN);
                                                                                                                          stepTime = Date.now()
                                                                                                                        }
                                                                                                                      }
                                                                                                                      function setData(data) {
                                                                                                                        groups = data.groups;
                                                                                                                        driver = groups[0];
                                                                                                                        ring = data.ring;
                                                                                                                        items[0] = new IntroItem(groups[0],-HALF_PI);
                                                                                                                        items[1] = new IntroItem(groups[1],-HALF_PI);
                                                                                                                        items[2] = new IntroItem(groups[2],QTR_PI);
                                                                                                                        items[3] = new IntroItem(groups[3],QTR_PI * 3);
                                                                                                                        setRingPositions();
                                                                                                                        dataLoaded = true;
                                                                                                                        launch()
                                                                                                                      }
                                                                                                                      function setRingPositions() {
                                                                                                                        var innerMostR = driver.arcs[0].radius;
                                                                                                                        if (undefined == innerMostR) {
                                                                                                                          return
                                                                                                                        }
                                                                                                                        var middleR = driver.radius;
                                                                                                                        var outerMostR = ring.radius;
                                                                                                                        var innerR = innerMostR + (middleR - innerMostR) * 0.5;
                                                                                                                        var outerSpan = (outerMostR - middleR);
                                                                                                                        var midOuter = middleR + outerSpan * 0.5;
                                                                                                                        var midOuterLower = middleR + outerSpan * 0.4;
                                                                                                                        items[0].updatePosition(innerR * 1.6);
                                                                                                                        items[1].updatePosition(midOuter * 1.55);
                                                                                                                        items[2].updatePosition(midOuterLower * 1.5);
                                                                                                                        items[3].updatePosition(midOuterLower * 1.5)
                                                                                                                      }
                                                                                                                      function updateGravitron(grav) {
                                                                                                                        grav.updateValues()
                                                                                                                      }
                                                                                                                      function updateGroups() {
                                                                                                                        for (var i = 0; i <= latestGroup; i++) {
                                                                                                                          groups[i].centers.forEach(updateGravitron)
                                                                                                                        }
                                                                                                                      }
                                                                                                                      function update() {
                                                                                                                        if (complete) {
                                                                                                                          return
                                                                                                                        }
                                                                                                                        driver.update();
                                                                                                                        ring.update(driver.getPathRadius() * RING_MARGIN_COEFFICIENT + constants.RING_MARGIN_MIN);
                                                                                                                        setRingPositions();
                                                                                                                        var now = Date.now();
                                                                                                                        var startStep = step;
                                                                                                                        switch (step) {
                                                                                                                          case 0:
                                                                                                                          highlightGroup(0);
                                                                                                                          waitEndTime = now + READ_WAIT;
                                                                                                                          intro.announce(constants.ZOOM_PAN_EVENT, {
                                                                                                                            zoom: 1.5
                                                                                                                          });
                                                                                                                          step++;
                                                                                                                          break;
                                                                                                                          case 1:
                                                                                                                          if (waitEndTime <= now) {
                                                                                                                            waitEndTime = now + FADE_WAIT;
                                                                                                                            fadePreceding(1);
                                                                                                                            step++
                                                                                                                          }
                                                                                                                          break;
                                                                                                                          case 2:
                                                                                                                          if (waitEndTime <= now) {
                                                                                                                            waitEndTime = now + READ_WAIT;
                                                                                                                            highlightGroup(1);
                                                                                                                            step++
                                                                                                                          }
                                                                                                                          break;
                                                                                                                          case 3:
                                                                                                                          if (now >= waitEndTime) {
                                                                                                                            waitEndTime = now + FADE_WAIT;
                                                                                                                            fadePreceding(2);
                                                                                                                            step++
                                                                                                                          }
                                                                                                                          break;
                                                                                                                          case 4:
                                                                                                                          if (now >= waitEndTime) {
                                                                                                                            waitEndTime = now + READ_WAIT;
                                                                                                                            highlightGroup(2);
                                                                                                                            step++
                                                                                                                          }
                                                                                                                          break;
                                                                                                                          case 5:
                                                                                                                          if (now >= waitEndTime) {
                                                                                                                            waitEndTime = now + FADE_WAIT;
                                                                                                                            fadePreceding(3);
                                                                                                                            step++
                                                                                                                          }
                                                                                                                          break;
                                                                                                                          case 6:
                                                                                                                          if (now >= waitEndTime) {
                                                                                                                            waitEndTime = now + READ_WAIT;
                                                                                                                            highlightGroup(3);
                                                                                                                            step++
                                                                                                                          }
                                                                                                                          break;
                                                                                                                          case 7:
                                                                                                                          if (now >= waitEndTime) {
                                                                                                                            waitEndTime = now + FADE_WAIT;
                                                                                                                            fadePreceding(4);
                                                                                                                            step++
                                                                                                                          }
                                                                                                                          break;
                                                                                                                          case 8:
                                                                                                                          if (now >= waitEndTime) {
                                                                                                                            tidyUp()
                                                                                                                          }
                                                                                                                          break;
                                                                                                                          default:
                                                                                                                          tidyUp();
                                                                                                                          break
                                                                                                                        }
                                                                                                                        if (startStep != step) {
                                                                                                                          var prog = Math.round((step + 1) / 8 * 100);
                                                                                                                          if (prog > 100) {
                                                                                                                            prog = 100
                                                                                                                          }
                                                                                                                          $progressBar.css("width", prog + "%")
                                                                                                                        }
                                                                                                                      }
                                                                                                                      function drawLabels() {
                                                                                                                        for (var i = 0, L = items.length; i < L; i++) {
                                                                                                                          items[i].drawLabel()
                                                                                                                        }
                                                                                                                      }
                                                                                                                      function fadePreceding(index) {
                                                                                                                        for (var i = 0; i < index; i++) {
                                                                                                                          items[i].pushBack()
                                                                                                                        }
                                                                                                                        intro.announce(constants.SELECT_EVENT, {
                                                                                                                          type: GROUP,
                                                                                                                          action: HOVER,
                                                                                                                          item: false
                                                                                                                        })
                                                                                                                      }
                                                                                                                      function highlightGroup(index) {
                                                                                                                        var centers = items[index].group.centers;
                                                                                                                        for (var i = 0, L = centers.length; i < L; i++) {
                                                                                                                          centers[i].movingCount = centers[i].colorGroupId ? 500 : 250;
                                                                                                                          centers[i].layoutSize.set(i * -10 / L)
                                                                                                                        }
                                                                                                                        items[index].highlight();
                                                                                                                        latestGroup = index;
                                                                                                                        intro.announce(constants.SELECT_EVENT, {
                                                                                                                          type: GROUP,
                                                                                                                          action: HOVER,
                                                                                                                          item: groups[index]
                                                                                                                        })
                                                                                                                      }
                                                                                                                      function tidyUp() {
                                                                                                                        items.forEach(function(item) {
                                                                                                                          var centers = item.group.centers;
                                                                                                                          for (var i = 0, L = centers.length; i < L; i++) {
                                                                                                                            centers[i].movingCount = 0
                                                                                                                          }
                                                                                                                        });
                                                                                                                        intro.announce(constants.ZOOM_PAN_EVENT, {
                                                                                                                          zoom: constants.DEFAULT_ZOOM
                                                                                                                        });
                                                                                                                        complete = true;
                                                                                                                        $(".intro-label").addClass("hidden");
                                                                                                                        $("#skip-overview").removeClass("enabled");
                                                                                                                        intro.announce(constants.SELECT_EVENT, {
                                                                                                                          type: CLEAR,
                                                                                                                          action: HOVER
                                                                                                                        });
                                                                                                                        intro.announce(constants.LEGEND_SPEED_EVENT, {
                                                                                                                          attraction: 0.2,
                                                                                                                          damping: 0.5
                                                                                                                        });
                                                                                                                        intro.announce(constants.INTRO_COMPLETE_EVENT);
                                                                                                                        setTimeout(function() {
                                                                                                                          $(".intro-label").remove();
                                                                                                                          $("#skip-overview").remove()
                                                                                                                        }, 1000)
                                                                                                                      }
                                                                                                                      function showSkipOption() {
                                                                                                                        $("#skip-overview").addClass("enabled");
                                                                                                                        $("#skip-button").bind("click", function() {
                                                                                                                          tidyUp()
                                                                                                                        })
                                                                                                                      }
                                                                                                                      function setGLReady(params) {
                                                                                                                        if (params.status == constants.READY) {
                                                                                                                          shadersLoaded = true;
                                                                                                                          launch()
                                                                                                                        }
                                                                                                                      }
                                                                                                                      function setDomReady() {
                                                                                                                        domReady = true;
                                                                                                                        launch()
                                                                                                                      }
                                                                                                                      var intro = {
                                                                                                                        setData: setData,
                                                                                                                        setShaderReady: setGLReady,
                                                                                                                        showSkipOption: showSkipOption,
                                                                                                                        setDomReady: setDomReady
                                                                                                                      };
                                                                                                                      F.eventify(intro);
                                                                                                                      app.intro = intro
                                                                                                                    }
                                                                                                                  )(window.app);
                                                                                                                  "use strict";
                                                                                                                  (function(app) {
                                                                                                                    var constants = app.constants, centers, centerLookup, groups, driver, ring, bursts, second, priorSecond, random = Math.random, pow = Math.pow, sin = Math.sin, cos = Math.cos, TAU = Math.PI * 2, PARTICLE_VELOCITY_ROOT = constants.PARTICLE_VELOCITY_ROOT, PARTICLE_VELOCITY_RANGE = constants.PARTICLE_VELOCITY_RANGE, PARTICLE_OFFSET_RANGE = constants.PARTICLE_OFFSET_RANGE, EVENT_MIN_SIZE = constants.EVENT_MIN_SIZE, LOOPER_CONTROL_EVENT = constants.LOOPER_CONTROL_EVENT, RING_MARGIN_MIN = constants.RING_MARGIN_MIN, RING_MARGIN_COEFFICIENT = constants.RING_MARGIN_COEFFICIENT, TIME_UPDATE_EVENT = constants.TIME_UPDATE_EVENT, SECONDS_PER_FRAME = 5, AFTER = constants.AFTER, PAUSE = constants.PAUSE, PLAY = constants.PLAY, DRAGGING = constants.DRAGGING, paused = false, dragging = false, HOVER = constants.HOVER, LOCK = constants.LOCK, CLEAR = constants.CLEAR, GROUP = constants.GROUP, GRAVITRON = constants.GRAVITRON, SELECT_EVENT = constants.SELECT_EVENT, mousedItem = false, lockedItem = false, introComplete = false, dataReady = false, shaderReady = false, particlesAnnounced = false;
                                                                                                                    (function() {
                                                                                                                      var d = new Date();
                                                                                                                      second = d.getSeconds() + 60 * d.getMinutes() + 3600 * d.getHours();
                                                                                                                      second = 3600 * 9;
                                                                                                                      priorSecond = second - 1
                                                                                                                    }
                                                                                                                  )();
                                                                                                                  function ParticleRecycler(generator, limit) {
                                                                                                                    this.particles = [];
                                                                                                                    this.count = 0;
                                                                                                                    this.index = 0;
                                                                                                                    this.hasAvailable = true;
                                                                                                                    this.getNewParticle = generator;
                                                                                                                    this.LIMIT = limit;
                                                                                                                    for (var i = 0; i < limit; i++) {
                                                                                                                      this.addParticle()
                                                                                                                    }
                                                                                                                  }
                                                                                                                  ParticleRecycler.prototype.size = function() {
                                                                                                                    return this.particles.length
                                                                                                                  }
                                                                                                                  ;
                                                                                                                  ParticleRecycler.prototype.setDirty = function() {
                                                                                                                    this.hasAvailable = true
                                                                                                                  }
                                                                                                                  ;
                                                                                                                  ParticleRecycler.prototype.getParticle = function() {
                                                                                                                    var p = null;
                                                                                                                    if (this.hasAvailable) {
                                                                                                                      var index = this.index
                                                                                                                      , count = this.count
                                                                                                                      , particles = this.particles
                                                                                                                      , startIndex = index;
                                                                                                                      while (index < count) {
                                                                                                                        if (particles[index].isComplete()) {
                                                                                                                          p = particles[index];
                                                                                                                          index++;
                                                                                                                          break
                                                                                                                        }
                                                                                                                        index++
                                                                                                                      }
                                                                                                                      if (null == p) {
                                                                                                                        index = 0;
                                                                                                                        while (index < startIndex) {
                                                                                                                          if (particles[index].isComplete()) {
                                                                                                                            p = particles[index];
                                                                                                                            index++;
                                                                                                                            break
                                                                                                                          }
                                                                                                                          index++
                                                                                                                        }
                                                                                                                      }
                                                                                                                      this.index = index;
                                                                                                                      if (null == p) {
                                                                                                                        this.hasAvailable = false
                                                                                                                      }
                                                                                                                    }
                                                                                                                    return p
                                                                                                                  }
                                                                                                                  ;
                                                                                                                  ParticleRecycler.prototype.addParticle = function() {
                                                                                                                    var p = this.getNewParticle();
                                                                                                                    this.particles.push(p);
                                                                                                                    this.count++;
                                                                                                                    return p
                                                                                                                  }
                                                                                                                  ;
                                                                                                                  function getNewLerperParticle() {
                                                                                                                    var r = random() * PARTICLE_OFFSET_RANGE;
                                                                                                                    var a = random() * TAU;
                                                                                                                    var offset = [cos(a) * r, sin(a) * r];
                                                                                                                    return new app.Lerper(offset,PARTICLE_VELOCITY_ROOT + random() * PARTICLE_VELOCITY_RANGE)
                                                                                                                  }
                                                                                                                  var lerpers = new ParticleRecycler(getNewLerperParticle,constants.MAX_LERPER_COUNT);
                                                                                                                  function launch() {
                                                                                                                    if (dataReady && shaderReady) {
                                                                                                                      if (introComplete) {
                                                                                                                        groups.forEach(unhighlightGroup);
                                                                                                                        particles.announce(LOOPER_CONTROL_EVENT, {
                                                                                                                          updater: update,
                                                                                                                          drawParticles: true
                                                                                                                        })
                                                                                                                      } else {
                                                                                                                        if (!particlesAnnounced) {
                                                                                                                          particlesAnnounced = true;
                                                                                                                          particles.announce(constants.PARTICLES_READY_EVENT)
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                  function updateGroupPaths(g) {
                                                                                                                    g.updatePaths()
                                                                                                                  }
                                                                                                                  function updatePathFunction() {
                                                                                                                    groups.forEach(updateGroupPaths)
                                                                                                                  }
                                                                                                                  function update() {
                                                                                                                    if (paused) {
                                                                                                                      return
                                                                                                                    }
                                                                                                                    if (dragging) {}
                                                                                                                    lerpers.setDirty();
                                                                                                                    driver.update();
                                                                                                                    ring.update(driver.radius * RING_MARGIN_COEFFICIENT + RING_MARGIN_MIN);
                                                                                                                    updatePathFunction();
                                                                                                                    for (var p = priorSecond + 1; p <= second; p++) {
                                                                                                                      releaseParticles(p)
                                                                                                                    }
                                                                                                                    particles.announce(TIME_UPDATE_EVENT, second);
                                                                                                                    priorSecond = second;
                                                                                                                    if (!paused && !dragging) {
                                                                                                                      second = (second + SECONDS_PER_FRAME) % AFTER
                                                                                                                    }
                                                                                                                  }
                                                                                                                  function setData(data) {
                                                                                                                    centers = data.centers;
                                                                                                                    centerLookup = data.centerLookup;
                                                                                                                    groups = data.groups;
                                                                                                                    driver = groups[0];
                                                                                                                    ring = data.ring;
                                                                                                                    bursts = data.bursts;
                                                                                                                    dataReady = true;
                                                                                                                    particles.announce(constants.DATA_LOAD_EVENT, {
                                                                                                                      lerpers: lerpers.particles
                                                                                                                    });
                                                                                                                    launch()
                                                                                                                  }
                                                                                                                  function setSecond(s) {
                                                                                                                    second = s;
                                                                                                                    priorSecond = s - 1
                                                                                                                  }
                                                                                                                  function setPlayback(action) {
                                                                                                                    if (action == PAUSE) {
                                                                                                                      paused = true;
                                                                                                                      dragging = false
                                                                                                                    } else {
                                                                                                                      if (action == DRAGGING) {
                                                                                                                        dragging = true
                                                                                                                      } else {
                                                                                                                        if (action == PLAY) {
                                                                                                                          paused = false;
                                                                                                                          dragging = false
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                  function releaseParticles(s) {
                                                                                                                    var secondBursts = bursts[s], b, origin, destination, count, p, recycler, addFunction;
                                                                                                                    if (!secondBursts) {
                                                                                                                      return
                                                                                                                    }
                                                                                                                    for (var i = 0, L = secondBursts.length; i < L; i++) {
                                                                                                                      b = secondBursts[i];
                                                                                                                      origin = centerLookup[b.origin];
                                                                                                                      destination = centerLookup[b.destination];
                                                                                                                      count = b.count;
                                                                                                                      if (destination && b.destination != b.origin) {
                                                                                                                        recycler = lerpers;
                                                                                                                        for (var j = 0, jL = count; j < jL; j++) {
                                                                                                                          p = recycler.getParticle();
                                                                                                                          try {
                                                                                                                            p.set(origin, destination)
                                                                                                                          } catch (err) {
                                                                                                                            break
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                  function setSelectedGroup(group) {
                                                                                                                    if (group) {
                                                                                                                      groups.forEach(pushBackGroup);
                                                                                                                      group.highlight()
                                                                                                                    } else {
                                                                                                                      groups.forEach(unhighlightGroup)
                                                                                                                    }
                                                                                                                    particles.announce(SELECT_EVENT, {
                                                                                                                      type: GROUP,
                                                                                                                      action: HOVER,
                                                                                                                      item: group
                                                                                                                    })
                                                                                                                  }
                                                                                                                  function unhighlightGroup(group) {
                                                                                                                    group.unhighlight()
                                                                                                                  }
                                                                                                                  function pushBackGroup(group) {
                                                                                                                    group.pushBack()
                                                                                                                  }
                                                                                                                  function unhighlightNode(node) {
                                                                                                                    node.unhighlight();
                                                                                                                    node.unhighlightLabel()
                                                                                                                  }
                                                                                                                  function pushBackNode(node) {
                                                                                                                    node.pushBack()
                                                                                                                  }
                                                                                                                  function handleSelect(params) {
                                                                                                                    if (params.action == LOCK) {
                                                                                                                      var zoomGroup = false;
                                                                                                                      if (params.type == CLEAR || !params.item || params.item == lockedItem.item) {
                                                                                                                        if (lockedItem) {
                                                                                                                          $(".label-node").css("opacity", 0);
                                                                                                                          if (lockedItem.type == GRAVITRON || lockedItem.type == GROUP) {
                                                                                                                            lockedItem.item.unhighlight()
                                                                                                                          }
                                                                                                                        }
                                                                                                                        lockedItem = false;
                                                                                                                        params.type = CLEAR;
                                                                                                                        params.item = false
                                                                                                                      } else {
                                                                                                                        if (params.type == GROUP) {
                                                                                                                          zoomGroup = params.item;
                                                                                                                          lockedItem = params
                                                                                                                        } else {
                                                                                                                          if (params.type == GRAVITRON) {
                                                                                                                            if (lockedItem) {
                                                                                                                              if (lockedItem.type == GROUP) {} else {
                                                                                                                                if (lockedItem.type == GRAVITRON) {
                                                                                                                                  lockedItem.item.unhighlight();
                                                                                                                                  for (var i = centers.length - 1; i >= 0; i--) {
                                                                                                                                    centers[i].unhighlightLabel()
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                            zoomGroup = params.item.parent;
                                                                                                                            lockedItem = params
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                      particles.announce(SELECT_EVENT, params);
                                                                                                                      if (zoomGroup) {
                                                                                                                        var rect = zoomGroup.getBounds();
                                                                                                                        particles.announce(constants.BOX_FOCUS_EVENT, rect)
                                                                                                                      } else {
                                                                                                                        particles.announce(constants.BOX_FOCUS_EVENT, false)
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      if (params.action == HOVER) {
                                                                                                                        if (mousedItem && mousedItem.item !== params.item && mousedItem != lockedItem) {
                                                                                                                          if (lockedItem || (params.type !== CLEAR && params.item)) {
                                                                                                                            mousedItem.item.pushBack()
                                                                                                                          } else {
                                                                                                                            mousedItem.item.unhighlight()
                                                                                                                          }
                                                                                                                        }
                                                                                                                        if (params.type == CLEAR || !params.item) {
                                                                                                                          if (lockedItem) {
                                                                                                                            groups.forEach(pushBackGroup);
                                                                                                                            lockedItem.item.highlight()
                                                                                                                          } else {
                                                                                                                            groups.forEach(unhighlightGroup)
                                                                                                                          }
                                                                                                                          mousedItem = false;
                                                                                                                          if (lockedItem) {
                                                                                                                            params.type = lockedItem.type;
                                                                                                                            params.item = lockedItem.item
                                                                                                                          } else {
                                                                                                                            params.type = CLEAR;
                                                                                                                            params.item = false
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          if (params.type == GROUP) {
                                                                                                                            mousedItem = params;
                                                                                                                            groups.forEach(pushBackGroup);
                                                                                                                            params.item.highlight()
                                                                                                                          } else {
                                                                                                                            if (params.type == GRAVITRON) {
                                                                                                                              mousedItem = params;
                                                                                                                              centers.forEach(pushBackNode);
                                                                                                                              params.item.highlight()
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                        particles.announce(SELECT_EVENT, params)
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                  function setPathUpdateFunction(data) {
                                                                                                                    if (data.status == constants.READY) {
                                                                                                                      shaderReady = true;
                                                                                                                      updatePathFunction = function() {
                                                                                                                        groups.forEach(updateGroupPaths);
                                                                                                                        data.pathUpdateFunction()
                                                                                                                      }
                                                                                                                      ;
                                                                                                                      launch()
                                                                                                                    }
                                                                                                                  }
                                                                                                                  function handleIntroComplete() {
                                                                                                                    introComplete = true;
                                                                                                                    launch()
                                                                                                                  }
                                                                                                                  function handleZoomReset() {
                                                                                                                    handleSelect({
                                                                                                                      type: CLEAR,
                                                                                                                      action: LOCK,
                                                                                                                      item: false
                                                                                                                    });
                                                                                                                    handleSelect({
                                                                                                                      type: CLEAR,
                                                                                                                      action: HOVER,
                                                                                                                      item: false
                                                                                                                    })
                                                                                                                  }
                                                                                                                  var particles = {
                                                                                                                    handleIntroComplete: handleIntroComplete,
                                                                                                                    setData: setData,
                                                                                                                    setSecond: setSecond,
                                                                                                                    setPlayback: setPlayback,
                                                                                                                    handleSelect: handleSelect,
                                                                                                                    setPathUpdateFunction: setPathUpdateFunction,
                                                                                                                    handleZoomReset: handleZoomReset
                                                                                                                  };
                                                                                                                  F.eventify(particles);
                                                                                                                  app.particles = particles
                                                                                                                }
                                                                                                              )(window.app);
                                                                                                              "use strict";
                                                                                                              (function(app) {
                                                                                                                var constants = app.constants
                                                                                                                , HOVER = constants.HOVER
                                                                                                                , LOCK = constants.LOCK
                                                                                                                , CLEAR = constants.CLEAR
                                                                                                                , GROUP = constants.GROUP
                                                                                                                , GRAVITRON = constants.GRAVITRON;
                                                                                                                function setSize() {
                                                                                                                  var w = $(window).width()
                                                                                                                  , h = $(window).height()
                                                                                                                  , headerHeight = $("#header").height();
                                                                                                                  dom.announce(constants.RESIZE_EVENT, {
                                                                                                                    width: w,
                                                                                                                    height: h,
                                                                                                                    headerHeight: headerHeight
                                                                                                                  });
                                                                                                                  return [w, h]
                                                                                                                }
                                                                                                                function init() {
                                                                                                                  var $nodeLabelTemplate = $(".node-label")
                                                                                                                  , $labelParent = $nodeLabelTemplate.parent();
                                                                                                                  $nodeLabelTemplate.remove();
                                                                                                                  dom.announce(constants.DOM_READY_EVENT, {
                                                                                                                    $nodeLabelTemplate: $nodeLabelTemplate,
                                                                                                                    $labelParent: $labelParent
                                                                                                                  });
                                                                                                                  var dims = setSize();
                                                                                                                  checkMobile(dims)
                                                                                                                }
                                                                                                                function checkMobile(dims) {
                                                                                                                  if (F.env.isTouch || dims[0] < 400 || dims[1] < 400) {
                                                                                                                    window.location = "./video.html"
                                                                                                                  }
                                                                                                                }
                                                                                                                function activateControls() {
                                                                                                                  $("#timeline").removeClass("inactive");
                                                                                                                  $("#zoom-controls").removeClass("inactive");
                                                                                                                  $(document).bind("mousedown", function(e) {
                                                                                                                    dom.announce(constants.SELECT_EVENT, {
                                                                                                                      action: LOCK,
                                                                                                                      item: false,
                                                                                                                      type: CLEAR
                                                                                                                    })
                                                                                                                  });
                                                                                                                  $(document).bind("mousemove", function() {
                                                                                                                    dom.announce(constants.SELECT_EVENT, {
                                                                                                                      action: HOVER,
                                                                                                                      item: false,
                                                                                                                      type: CLEAR
                                                                                                                    })
                                                                                                                  })
                                                                                                                }
                                                                                                                function setWebGLNotOK(data) {
                                                                                                                  if (data.status !== constants.READY) {
                                                                                                                    $("#main").empty();
                                                                                                                    $("#timeline").remove();
                                                                                                                    $("#legend").remove();
                                                                                                                    $("#loader-text").remove();
                                                                                                                    $("#blizzard").addClass("active")
                                                                                                                  } else {
                                                                                                                    $("#blizzard").remove()
                                                                                                                  }
                                                                                                                }
                                                                                                                function endIntro() {
                                                                                                                  $("body").removeClass("intro");
                                                                                                                  setTimeout(function() {
                                                                                                                    $("#loader-text").remove()
                                                                                                                  }, 500)
                                                                                                                }
                                                                                                                function endLoad() {
                                                                                                                  requestAnimationFrame(function() {
                                                                                                                    $("body").addClass("intro");
                                                                                                                    $("body").removeClass("loading");
                                                                                                                    dom.announce(constants.APP_LAUNCH_EVENT)
                                                                                                                  })
                                                                                                                }
                                                                                                                function handleSelect(params) {
                                                                                                                  if (params.action == LOCK) {
                                                                                                                    if (params.type == CLEAR) {
                                                                                                                      $("body").removeClass("zoomed")
                                                                                                                    } else {
                                                                                                                      $("body").addClass("zoomed")
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                setTimeout(endLoad, 400);
                                                                                                                $(window).bind("resize", setSize);
                                                                                                                var dom = {
                                                                                                                  init: init,
                                                                                                                  activateControls: activateControls,
                                                                                                                  setWebGLNotOK: setWebGLNotOK,
                                                                                                                  endIntro: endIntro,
                                                                                                                  handleSelect: handleSelect
                                                                                                                };
                                                                                                                F.eventify(dom);
                                                                                                                app.dom = dom
                                                                                                              }
                                                                                                            )(window.app);
                                                                                                            "use strict";
                                                                                                            (function(app) {
                                                                                                              var constants = app.constants, centers, centerLookup, groups, ring, $labelTemplate, $labelParent, AFTER = constants.AFTER, EVENT_DESRIPTIONS = {
                                                                                                                0: "Patient begins the check-in process.",
                                                                                                                1: "Completed patient check-in.",
                                                                                                                2: "The intake process begins with an athenahealth practice.",
                                                                                                                3: "Mid-level completes patient intake.",
                                                                                                                4: "Patient exam begins.",
                                                                                                                5: "Patient leaves exam room.",
                                                                                                                6: "Provider completes all necessary documentation, including placing of orders.",
                                                                                                                7: "Patient chart closed after completion of required documentation and orders.",
                                                                                                                8: "Patient begins the checkout process.",
                                                                                                                9: "Patient completes checkout.",
                                                                                                                10: "Patient email address collected at check-in.",
                                                                                                                11: "Patient phone number collected at check-in.",
                                                                                                                12: "Patient license information collected at check-in.",
                                                                                                                13: "Patient viewed a message in their portal inbox.",
                                                                                                                14: "Required documentation following the visit is started.",
                                                                                                                15: "Required documentation for patient visit completed.",
                                                                                                                16: "The order for a lab, imaging, surgical or other procedure is tied back to the chart.",
                                                                                                                17: "The results of a consultation or procedure is reviewed by the provider.",
                                                                                                                18: "Provider discusses prescription, consultation, or procedure with patient..",
                                                                                                                19: "Procedure or surgery ordered by provider.",
                                                                                                                20: "Request sent to pharmacy for prescription renewal or refill.",
                                                                                                                21: "Claim created for submission to payers.",
                                                                                                                22: "Patient screened for insurance eligibility.",
                                                                                                                23: "Claim sent to the payer for payment.",
                                                                                                                24: "Charges for visits or procedures billed to patient.",
                                                                                                                25: "Patient’s payment-responsibility transferred.",
                                                                                                                26: "Charges not covered by the primary payer are transferred to a secondary payer.",
                                                                                                                27: "Practice receives claim adjudication details from payer.",
                                                                                                                28: "Funds transferred from the payer to the practice.",
                                                                                                                29: "Patient’s payment received by practice.",
                                                                                                                30: "Claim closed following fulfillment of payment.",
                                                                                                                31: "Patient logs in to portal.",
                                                                                                                32: "Patient viewed their health history.",
                                                                                                                33: "Patient viewed results.",
                                                                                                                34: "Patient viewed current or previous medications.",
                                                                                                                35: "Prescription coupons viewed by patient via the portal.",
                                                                                                                36: "Patient viewed vitals via the portal.",
                                                                                                                37: "Patient viewed care summaries online.",
                                                                                                                38: "Patient viewed their charges for care.",
                                                                                                                39: "Patient makes a payment on the portal.",
                                                                                                                40: "Patient schedules appointment via the portal.",
                                                                                                                41: "Patient sends request for appointment, prescription refill or medical question.",
                                                                                                                42: "Patient modifies settings on their portal account.",
                                                                                                                43: "Patient updates account information on portal.",
                                                                                                                44: "Message sent from patient to provider.",
                                                                                                                45: "Patient finishes a session on the portal.",
                                                                                                                46: "Imaging procedures ordered.",
                                                                                                                47: "Prescriptions submitted by provider.",
                                                                                                                48: "Order submitted for consult.",
                                                                                                                49: "Patient sees another provider/specialist as referred by the practice.",
                                                                                                                50: "Ordered imaging procedure is performed.",
                                                                                                                51: "Ordered lab procedure is performed.",
                                                                                                                52: "Order submitted for lab procedure.",
                                                                                                                53: "Rejected or denied claims corrected by our service teams for resubmission.",
                                                                                                                54: "Error automatically flagged for correction by our billing rules engine before submission to payer.",
                                                                                                                55: "Claim flagged with errors by the payer is moved to the appropriate workflow for correction.",
                                                                                                                56: "Claim adjusted by payers to reflect differences in billing and payment.",
                                                                                                                57: "Claim returned to athena for correction.",
                                                                                                                58: "Payer receives bill for services rendered in the form of an itemized claim.",
                                                                                                                59: "Patient determined ineligible for coverage by payers.",
                                                                                                                60: "Patient ruled eligible for coverage by payers.",
                                                                                                                61: "Payer sends confirmation that a claim was received."
                                                                                                              }, GROUP_DATA = {
                                                                                                                Practice: [{
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Check-in end",
                                                                                                                  id: 1
                                                                                                                }, {
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Intake start",
                                                                                                                  id: 2
                                                                                                                }, {
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Exam end",
                                                                                                                  id: 5
                                                                                                                }, {
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Signoff start",
                                                                                                                  id: 6
                                                                                                                }, {
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Checkout end",
                                                                                                                  id: 9
                                                                                                                }, {
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Checkout start",
                                                                                                                  id: 8
                                                                                                                }, {
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Signoff end",
                                                                                                                  id: 7
                                                                                                                }, {
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Exam start",
                                                                                                                  id: 4
                                                                                                                }, {
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Intake end",
                                                                                                                  id: 3
                                                                                                                }, {
                                                                                                                  subtype: "Practice Encounter",
                                                                                                                  name: "Check-in start",
                                                                                                                  id: 0
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Patient",
                                                                                                                  name: "Patient email collected",
                                                                                                                  id: 10
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Patient",
                                                                                                                  name: "Patient phone number collected",
                                                                                                                  id: 11
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Patient",
                                                                                                                  name: "Patient license collected",
                                                                                                                  id: 12
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Patient",
                                                                                                                  name: "Sent message to patient",
                                                                                                                  id: 13
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Orders",
                                                                                                                  name: "Result tied back to order",
                                                                                                                  id: 16
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Orders",
                                                                                                                  name: "Result reviewed by provider",
                                                                                                                  id: 17
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Orders",
                                                                                                                  name: "Result discussed with patient",
                                                                                                                  id: 18
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Orders",
                                                                                                                  name: "Procedure/surgery order created",
                                                                                                                  id: 19
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Orders",
                                                                                                                  name: "Prescription renewal request received",
                                                                                                                  id: 20
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Orders",
                                                                                                                  name: "Post-visit documentation start",
                                                                                                                  id: 14
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Orders",
                                                                                                                  name: "Post-visit documentation end",
                                                                                                                  id: 15
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Claim created",
                                                                                                                  id: 21
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Eligibility check start",
                                                                                                                  id: 22
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Bill event",
                                                                                                                  id: 23
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Charge to patient",
                                                                                                                  id: 24
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Balance transfer to patient",
                                                                                                                  id: 25
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Balance transfer to secondary payer",
                                                                                                                  id: 26
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Supporting payment details from payer",
                                                                                                                  id: 27
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Payment by payer",
                                                                                                                  id: 28
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Payment by patient",
                                                                                                                  id: 29
                                                                                                                }, {
                                                                                                                  subtype: "Practice to Payer",
                                                                                                                  name: "Claim closed",
                                                                                                                  id: 30
                                                                                                                }],
                                                                                                                Patient: [{
                                                                                                                  name: "Patient login",
                                                                                                                  id: 31
                                                                                                                }, {
                                                                                                                  name: "Viewed health history",
                                                                                                                  id: 32
                                                                                                                }, {
                                                                                                                  name: "Viewed lab results",
                                                                                                                  id: 33
                                                                                                                }, {
                                                                                                                  name: "Viewed medications",
                                                                                                                  id: 34
                                                                                                                }, {
                                                                                                                  name: "Viewed prescription coupon",
                                                                                                                  id: 35
                                                                                                                }, {
                                                                                                                  name: "Viewed vitals",
                                                                                                                  id: 36
                                                                                                                }, {
                                                                                                                  name: "Viewed care summary",
                                                                                                                  id: 37
                                                                                                                }, {
                                                                                                                  name: "Viewed charges",
                                                                                                                  id: 38
                                                                                                                }, {
                                                                                                                  name: "Paid charges",
                                                                                                                  id: 39
                                                                                                                }, {
                                                                                                                  name: "Appointment scheduled via portal",
                                                                                                                  id: 40
                                                                                                                }, {
                                                                                                                  name: "Request submitted",
                                                                                                                  id: 41
                                                                                                                }, {
                                                                                                                  name: "Managed portal account",
                                                                                                                  id: 42
                                                                                                                }, {
                                                                                                                  name: "Updated patient info",
                                                                                                                  id: 43
                                                                                                                }, {
                                                                                                                  name: "Sent message",
                                                                                                                  id: 44
                                                                                                                }, {
                                                                                                                  name: "Patient logout",
                                                                                                                  id: 45
                                                                                                                }],
                                                                                                                Orders: [{
                                                                                                                  name: "Imaging order submitted",
                                                                                                                  id: 46
                                                                                                                }, {
                                                                                                                  name: "Prescription submitted",
                                                                                                                  id: 47
                                                                                                                }, {
                                                                                                                  name: "Consult order submitted",
                                                                                                                  id: 48
                                                                                                                }, {
                                                                                                                  name: "Consult order performed",
                                                                                                                  id: 49
                                                                                                                }, {
                                                                                                                  name: "Imaging order performed",
                                                                                                                  id: 50
                                                                                                                }, {
                                                                                                                  name: "Lab order performed",
                                                                                                                  id: 51
                                                                                                                }, {
                                                                                                                  name: "Lab order submitted",
                                                                                                                  id: 52
                                                                                                                }],
                                                                                                                Payer: [{
                                                                                                                  name: "athenahealth scrub",
                                                                                                                  id: 53
                                                                                                                }, {
                                                                                                                  name: "Claim rule fired",
                                                                                                                  id: 54
                                                                                                                }, {
                                                                                                                  name: "Kick reason fired",
                                                                                                                  id: 55
                                                                                                                }, {
                                                                                                                  name: "Payer adjustment",
                                                                                                                  id: 56
                                                                                                                }, {
                                                                                                                  name: "Claim returned",
                                                                                                                  id: 57
                                                                                                                }, {
                                                                                                                  name: "Charge to payer",
                                                                                                                  id: 58
                                                                                                                }, {
                                                                                                                  name: "Patient is ineligible",
                                                                                                                  id: 59
                                                                                                                }, {
                                                                                                                  name: "Patient is eligible",
                                                                                                                  id: 60
                                                                                                                }, {
                                                                                                                  name: "Payer acknowledgement",
                                                                                                                  id: 61
                                                                                                                }]
                                                                                                              }, BEZIER_CONTROLS = {
                                                                                                                "0": {
                                                                                                                  "1": [0.6347, 0.705, -2.395, 0.8302]
                                                                                                                },
                                                                                                                "1": {
                                                                                                                  "2": [0.6851, 0.7347, 3.8261, 0.6963],
                                                                                                                  "8": [0.7431, 0.5115, 3.882, 0.487]
                                                                                                                },
                                                                                                                "2": {
                                                                                                                  "3": [-5.4829, 0.5022, -2.5171, 0.4917]
                                                                                                                },
                                                                                                                "3": {
                                                                                                                  "4": [-0.7087, 0.7966, 2.4155, 1.0541]
                                                                                                                },
                                                                                                                "4": {
                                                                                                                  "5": [-0.4394, 0.5456, 2.6615, 0.5475]
                                                                                                                },
                                                                                                                "5": {
                                                                                                                  "0": [-0.4929, 0.3881, -3.8244, 0.6209],
                                                                                                                  "4": [5.9059, 0.4102, 2.8157, 0.4203],
                                                                                                                  "6": [1.0586, 1.0448, 4.1108, 0.7858]
                                                                                                                },
                                                                                                                "6": {
                                                                                                                  "7": [5.832, 0.749, 2.7775, 0.6664]
                                                                                                                },
                                                                                                                "7": {
                                                                                                                  "0": [-0.7423, 0.8156, -3.736, 0.5203],
                                                                                                                  "8": [0.791, 0.7252, -2.2372, 0.5809]
                                                                                                                },
                                                                                                                "8": {
                                                                                                                  "0": [-0.8191, 0.4318, -4.0206, 0.3532],
                                                                                                                  "9": [-0.5196, 0.8028, 2.4644, 0.6429]
                                                                                                                },
                                                                                                                "9": {
                                                                                                                  "8": [5.3853, 0.737, 2.1727, 0.8408]
                                                                                                                }
                                                                                                              };
                                                                                                              function load() {
                                                                                                                centers = [];
                                                                                                                groups = [];
                                                                                                                centerLookup = {};
                                                                                                                var lerpColors = initLerpColors();
                                                                                                                var groupLookup = {}
                                                                                                                , groupCount = 0;
                                                                                                                var GROUP_NAMES = constants.GROUP_NAMES;
                                                                                                                var arcs = [];
                                                                                                                var groupDescriptionDict = {};
                                                                                                                $(".intro-label").each(function(i, o) {
                                                                                                                  var name = $(this).find(".intro-title").text()
                                                                                                                  , descriptionContainer = $(this).find(".intro-text")
                                                                                                                  , description = descriptionContainer.text();
                                                                                                                  groupDescriptionDict[name] = description;
                                                                                                                  descriptionContainer.remove()
                                                                                                                });
                                                                                                                for (var n = 0, Ln = GROUP_NAMES.length; n < Ln; n++) {
                                                                                                                  var groupName = GROUP_NAMES[n];
                                                                                                                  var group;
                                                                                                                  var description = groupDescriptionDict[groupName];
                                                                                                                  if (groupName == "Practice") {
                                                                                                                    group = new app.SuperGroup(groupCount,groupName,constants.GROUP_COLORS[n],lerpColors[n],groupDescriptionDict)
                                                                                                                  } else {
                                                                                                                    group = new app.ArcGroup(groupCount,groupName,constants.GROUP_COLORS[n],lerpColors[n],groupDescriptionDict);
                                                                                                                    arcs.push(group)
                                                                                                                  }
                                                                                                                  groupLookup[groupName] = group;
                                                                                                                  groups.push(group);
                                                                                                                  groupCount++;
                                                                                                                  var nodes = GROUP_DATA[groupName];
                                                                                                                  for (var i = 0, L = nodes.length; i < L; i++) {
                                                                                                                    var node = nodes[i]
                                                                                                                    , minSize = constants.PRACTICE_EVENT_MIN_SIZE
                                                                                                                    , layoutMinSize = constants.PRACTICE_EVENT_MIN_SIZE
                                                                                                                    , sizeRange = constants.PRACTICE_EVENT_SIZE_RANGE
                                                                                                                    , layoutSizeRange = constants.EVENT_LAYOUT_SIZE_RANGE
                                                                                                                    , colorId = group.groupId;
                                                                                                                    if ("Practice" == groupName) {
                                                                                                                      if ("Practice Encounter" == node.subtype) {
                                                                                                                        minSize = constants.PRACTICE_EVENT_MIN_SIZE;
                                                                                                                        layoutMinSize = constants.PRACTICE_EVENT_MIN_SIZE;
                                                                                                                        sizeRange = constants.PRACTICE_EVENT_SIZE_RANGE;
                                                                                                                        layoutSizeRange = constants.PRACTICE_EVENT_LAYOUT_SIZE_RANGE
                                                                                                                      } else {
                                                                                                                        colorId = 4
                                                                                                                      }
                                                                                                                    }
                                                                                                                    var $label = $labelTemplate.clone();
                                                                                                                    var description = EVENT_DESRIPTIONS[node.id];
                                                                                                                    var sizes = {
                                                                                                                      minSize: minSize,
                                                                                                                      layoutMinSize: layoutMinSize,
                                                                                                                      sizeRange: sizeRange,
                                                                                                                      layoutSizeRange: layoutSizeRange
                                                                                                                    };
                                                                                                                    $label.text(node.name);
                                                                                                                    $labelParent.append($label);
                                                                                                                    var center = new app.Gravitron(node.id,node.name,node.subtype,group,colorId,sizes,$label,description);
                                                                                                                    group.addNode(center);
                                                                                                                    centers.push(center);
                                                                                                                    centerLookup[center.id] = center
                                                                                                                  }
                                                                                                                }
                                                                                                                ring = new app.RingGroup(arcs);
                                                                                                                dataLoader.announce(constants.NODES_INITIALIZED_EVENT, {
                                                                                                                  groups: groups,
                                                                                                                  centers: centers,
                                                                                                                  centerLookup: centerLookup,
                                                                                                                  ring: ring
                                                                                                                });
                                                                                                                $.ajax({
                                                                                                                  url: "./data/no_crosstalk_25.json",
                                                                                                                  success: loadEvents,
                                                                                                                  error: function(request, status, err) {
                                                                                                                    console.log("Error loading data: " + status + ", " + err)
                                                                                                                  }
                                                                                                                })
                                                                                                              }
                                                                                                              function loadEvents(data) {
                                                                                                                if ("string" == typeof data) {
                                                                                                                  data = JSON.parse(data)
                                                                                                                }
                                                                                                                var bursts = [], burstData, burstList, secondsPerInterval = constants.SECONDS_PER_HISTOGRAM_BUCKET, intervalIndex, floor = Math.floor;
                                                                                                                var origin, originId, group, subGroup;
                                                                                                                for (var i = 0; i < AFTER; i++) {
                                                                                                                  bursts[i] = []
                                                                                                                }
                                                                                                                var binnedCounts = [];
                                                                                                                var secondCounts = [];
                                                                                                                for (var i = 0, L = constants.HISTOGRAM_INTERVAL_COUNT; i < L; i++) {
                                                                                                                  binnedCounts[i] = 0
                                                                                                                }
                                                                                                                for (var i = 0; i < AFTER; i++) {
                                                                                                                  secondCounts[i] = 0
                                                                                                                }
                                                                                                                for (var g = 0, gL = groups.length; g < gL; g++) {
                                                                                                                  group = groups[g];
                                                                                                                  subGroup = groups[0].arcs[g];
                                                                                                                  group.secondCounts = [];
                                                                                                                  subGroup.secondCounts = [];
                                                                                                                  for (var i = 0; i < AFTER; i++) {
                                                                                                                    group.secondCounts[i] = 0;
                                                                                                                    subGroup.secondCounts[i] = 0
                                                                                                                  }
                                                                                                                }
                                                                                                                var origins = [];
                                                                                                                var destinations = [];
                                                                                                                var requiredPaths = [];
                                                                                                                var batchCount = 0;
                                                                                                                for (var originId in data) {
                                                                                                                  originId = parseInt(originId);
                                                                                                                  origins.push(originId);
                                                                                                                  requiredPaths[originId] = []
                                                                                                                }
                                                                                                                function finalizeNode(origin) {
                                                                                                                  if (!origin) {
                                                                                                                    return
                                                                                                                  }
                                                                                                                  origin.binMax = Math.max.apply(null, origin.binnedCounts);
                                                                                                                  var seconds = origin.secondCounts
                                                                                                                  , cumulatives = origin.cumulativeCounts;
                                                                                                                  cumulatives[0] = seconds[0];
                                                                                                                  for (var i = 1, L = seconds.length; i < L; i++) {
                                                                                                                    cumulatives[i] = cumulatives[i - 1] + seconds[i]
                                                                                                                  }
                                                                                                                  delete origin.secondCounts
                                                                                                                }
                                                                                                                function handleBatch() {
                                                                                                                  var end = Date.now() + 5;
                                                                                                                  batchCount++;
                                                                                                                  if (destinations.length == 0) {
                                                                                                                    if (origins.length == 0) {
                                                                                                                      finalizeNode(origin);
                                                                                                                      setTimeout(finalize, 50);
                                                                                                                      return
                                                                                                                    } else {
                                                                                                                      finalizeNode(origin);
                                                                                                                      originId = origins.shift();
                                                                                                                      origin = centerLookup[originId];
                                                                                                                      group = groups[origin.groupId];
                                                                                                                      burstData = data[originId];
                                                                                                                      destinations = [];
                                                                                                                      for (var destinationId in burstData) {
                                                                                                                        destinationId = parseInt(destinationId);
                                                                                                                        if (originId != destinationId) {
                                                                                                                          destinations.push(destinationId);
                                                                                                                          requiredPaths[originId][destinationId] = true
                                                                                                                        }
                                                                                                                      }
                                                                                                                      origin.secondCounts = [];
                                                                                                                      for (var i = 0; i < AFTER; i++) {
                                                                                                                        origin.secondCounts[i] = 0
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                  while (Date.now() < end && destinations.length > 0) {
                                                                                                                    var destinationId = destinations.shift();
                                                                                                                    burstList = burstData[destinationId];
                                                                                                                    for (var i = 0, L = burstList.length; i < L; i++) {
                                                                                                                      var bd = burstList[i]
                                                                                                                      , second = bd[0]
                                                                                                                      , count = bd[1]
                                                                                                                      , burstSecond = bursts[second];
                                                                                                                      if (second >= 0 && second < AFTER) {
                                                                                                                        burstSecond.push({
                                                                                                                          origin: originId,
                                                                                                                          destination: destinationId,
                                                                                                                          count: count
                                                                                                                        });
                                                                                                                        secondCounts[second] += count;
                                                                                                                        origin.secondCounts[second] += count;
                                                                                                                        group.secondCounts[second] += count;
                                                                                                                        intervalIndex = floor(second / secondsPerInterval);
                                                                                                                        origin.binnedCounts[intervalIndex] += count;
                                                                                                                        group.binnedCounts[intervalIndex] += count;
                                                                                                                        binnedCounts[intervalIndex] += count;
                                                                                                                        if (0 === origin.groupId) {
                                                                                                                          var subGroup = group.arcs[origin.subGroupId];
                                                                                                                          subGroup.secondCounts[second] += count;
                                                                                                                          subGroup.binnedCounts[intervalIndex] += count
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                  setTimeout(handleBatch, 15)
                                                                                                                }
                                                                                                                function finalizeGroup(group) {
                                                                                                                  group.binMax = Math.max.apply(null, group.binnedCounts);
                                                                                                                  var seconds = group.secondCounts;
                                                                                                                  var cumulatives = group.cumulativeCounts;
                                                                                                                  cumulatives[0] = seconds[0];
                                                                                                                  for (var i = 1, L = seconds.length; i < L; i++) {
                                                                                                                    cumulatives[i] = cumulatives[i - 1] + seconds[i]
                                                                                                                  }
                                                                                                                  delete group.secondCounts
                                                                                                                }
                                                                                                                function finalize() {
                                                                                                                  var group;
                                                                                                                  var total = {
                                                                                                                    binnedCounts: binnedCounts,
                                                                                                                    cumulativeCounts: []
                                                                                                                  };
                                                                                                                  var seconds = secondCounts
                                                                                                                  , cumulatives = total.cumulativeCounts;
                                                                                                                  cumulatives[0] = seconds[0];
                                                                                                                  for (var i = 1, L = seconds.length; i < L; i++) {
                                                                                                                    cumulatives[i] = cumulatives[i - 1] + seconds[i]
                                                                                                                  }
                                                                                                                  groups.forEach(finalizeGroup);
                                                                                                                  groups[0].arcs.forEach(finalizeGroup);
                                                                                                                  var origin, destination, oType, dType, oSubtype, path;
                                                                                                                  for (var o = 0, L = requiredPaths.length; o < L; o++) {
                                                                                                                    if (!requiredPaths[o]) {
                                                                                                                      continue
                                                                                                                    }
                                                                                                                    origin = centerLookup[o];
                                                                                                                    oType = origin.groupId;
                                                                                                                    oSubtype = origin.subtype || false;
                                                                                                                    for (var d = 0, dL = requiredPaths[o].length; d < dL; d++) {
                                                                                                                      if (!requiredPaths[o][d]) {
                                                                                                                        continue
                                                                                                                      }
                                                                                                                      destination = centerLookup[d];
                                                                                                                      dType = destination.groupId;
                                                                                                                      if (oType == 0) {
                                                                                                                        if (dType == 0) {
                                                                                                                          if (oSubtype == destination.subtype) {
                                                                                                                            if ("Practice Encounter" == oSubtype) {
                                                                                                                              path = new app.BezierPath(origin,destination);
                                                                                                                              var controlData = BEZIER_CONTROLS[path.origin.id];
                                                                                                                              if (controlData) {
                                                                                                                                controlData = controlData[path.destination.id]
                                                                                                                              }
                                                                                                                              path.controlData = controlData || [-0.6283, 0.3, 3.7699, 0.3]
                                                                                                                            } else {
                                                                                                                              path = new app.SuperGroupOuterPath(origin,destination)
                                                                                                                            }
                                                                                                                          } else {
                                                                                                                            if ("Practice Encounter" == oSubtype || "Practice Encounter" == destination.subtype) {
                                                                                                                              path = new app.SuperGroupIntraRingPath(origin,destination)
                                                                                                                            } else {
                                                                                                                              path = new app.SuperGroupOuterPath(origin,destination)
                                                                                                                            }
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          if ("Practice Encounter" == oSubtype) {
                                                                                                                            path = new app.SuperGroupIntraRingPath(origin,destination)
                                                                                                                          } else {
                                                                                                                            path = new app.IntraRingPath(origin,destination)
                                                                                                                          }
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        if (dType == 0) {
                                                                                                                          if ("Practice Encounter" == destination.subtype) {
                                                                                                                            path = new app.SuperGroupIntraRingPath(origin,destination)
                                                                                                                          } else {
                                                                                                                            path = new app.IntraRingPath(origin,destination)
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          path = new app.OuterPath(origin,destination)
                                                                                                                        }
                                                                                                                      }
                                                                                                                      origin.addPath(path)
                                                                                                                    }
                                                                                                                  }
                                                                                                                  total.binMax = Math.max.apply(null, total.binnedCounts);
                                                                                                                  total.name = "Daily Activities";
                                                                                                                  dataLoader.announce(constants.DATA_LOAD_EVENT, {
                                                                                                                    groups: groups,
                                                                                                                    centers: centers,
                                                                                                                    centerLookup: centerLookup,
                                                                                                                    bursts: bursts,
                                                                                                                    total: total,
                                                                                                                    ring: ring
                                                                                                                  })
                                                                                                                }
                                                                                                                handleBatch()
                                                                                                              }
                                                                                                              function initLerpColors() {
                                                                                                                var lerpColors = []
                                                                                                                , color = F.color
                                                                                                                , lerpColor = color.lerpColor
                                                                                                                , rgb2hsl = color.rgb2hsl
                                                                                                                , hsl2rgb = color.hsl2rgb
                                                                                                                , GROUP_COLORS = constants.GROUP_COLORS
                                                                                                                , GROUP_LERP_COLORS = constants.GROUP_LERP_COLORS
                                                                                                                , GROUP_NAMES = constants.GROUP_NAMES;
                                                                                                                for (var srcName in GROUP_COLORS) {
                                                                                                                  var srcRgb = GROUP_COLORS[srcName]
                                                                                                                  , srcHsl = rgb2hsl(srcRgb);
                                                                                                                  lerpColors[srcName] = {};
                                                                                                                  for (var destName in GROUP_LERP_COLORS) {
                                                                                                                    var destRgb = GROUP_LERP_COLORS[destName]
                                                                                                                    , destHsl = rgb2hsl(destRgb)
                                                                                                                    , lerpsteps = [];
                                                                                                                    lerpColors[srcName][destName] = lerpsteps;
                                                                                                                    for (var l = 0; l < constants.LERP_RANGE; l++) {
                                                                                                                      var progress = 1 * l / (constants.LERP_RANGE - 1)
                                                                                                                      , hsl = lerpColor(srcHsl, destHsl, progress);
                                                                                                                      lerpsteps[l] = hsl2rgb(hsl)
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                return lerpColors
                                                                                                              }
                                                                                                              function setLabelTemplate(data) {
                                                                                                                $labelTemplate = data.$nodeLabelTemplate;
                                                                                                                $labelParent = data.$labelParent
                                                                                                              }
                                                                                                              var dataLoader = {
                                                                                                                load: load,
                                                                                                                setLabelTemplate: setLabelTemplate
                                                                                                              };
                                                                                                              F.eventify(dataLoader);
                                                                                                              app.dataLoader = dataLoader
                                                                                                            }
                                                                                                          )(window.app)
                                                                                                        }
                                                                                                      )();
